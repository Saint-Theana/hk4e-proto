syntax = "proto3";

package proto;
option go_package = "./;proto";


import "define.proto";
import "cmd/cmd_social.proto";

message CustomDungeonBlock {
  uint32 block_id = 15; //8
  Vector rot = 2; //12
  uint32 guid = 1; //4
  Vector pos = 11; //1
}

message CustomDungeonRoom {
  uint32 room_id = 3; //15
  repeated CustomDungeonBlock block_list = 7; //4
}

message CustomDungeonSetting {
  repeated uint32 open_room_list = 13; //1
  bool is_arrive_finish = 14; //14
  uint32 life_num = 9; //6
  uint32 start_room_id = 10; //4
  bool is_forbid_skill = 11; //3
  uint32 coin_limit = 4; //10
  uint32 time_limit = 2; //9
}

message CustomDungeon {
  CustomDungeonSetting setting = 1; //1
  repeated CustomDungeonRoom room_list = 3; //15
  uint32 dungeon_id = 4; //3
  uint64 dungeon_guid = 8; //10
}

message EnterCustomDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6238; //6226;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint64 dungeon_guid = 3; //11
  uint32 dungeon_id = 13; //12
  EnterCustomDungeonType enter_type = 2; //10
}

message EnterCustomDungeonRsp {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6245; //6218;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  CustomDungeon custom_dungeon = 7; //14
  EnterCustomDungeonType enter_type = 4; //2
  int32 retcode = 9; //10
  map<uint32, uint32> room_cost_map = 2; //6
}

message SaveCustomDungeonRoomReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6246; //6225;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  CustomDungeonRoom custom_dungeon_room = 15; //5
  bool is_update_setting = 3; //7
  CustomDungeonSetting setting = 14; //13
}

message SaveCustomDungeonRoomRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6241; //6207;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 room_id = 9; //14
  repeated CustomDungeonBlock error_block_list = 4; //9
  int32 retcode = 8; //12
}

message CustomDungeonAbstract {

  map<uint32, uint32> brick_statistics_map = 12; //12
  uint32 first_publish_time = 1; //3
  uint32 total_coin_num = 2; //15
  uint32 last_publish_time = 4; //6
  uint32 finish_room_id = 10; //7
}

message CustomDungeonSocial {
  uint32 win_num = 11; //4
  uint32 like_num = 6; //12
  uint32 play_num = 12; //7
  uint32 store_num = 7; //2
}

message CustomDungeonBrief {
  CustomDungeonSetting setting = 7; //2
  bool is_psn_platform = 4; //13
  CustomDungeonSocial social = 8; //7
  uint64 dungeon_guid = 5; //10
  uint32 last_save_time = 10; //14
  repeated uint32 tag_list = 15; //15
  uint32 dungeon_id = 6; //5
  uint32 battle_min_cost_time = 2; //12
  CustomDungeonState state = 9; //1
  CustomDungeonAbstract abstract = 13; //4
}

message OtherCustomDungeonBrief {
  SocialDetail creator_detail = 8; //4
  uint32 battle_min_cost_time = 7; //15
  CustomDungeonAbstract abstract = 15; //2
  uint64 dungeon_guid = 2; //14
  CustomDungeonSetting setting = 4; //10
  uint32 dungeon_id = 5; //6
  repeated uint32 tag_list = 6; //1
  bool is_adventure_dungeon = 12; //11
  bool is_psn_platform = 10; //9
  bool is_stored = 3; //3
  CustomDungeonSocial social = 11; //12
}

message CustomDungeonBanInfo {
  CustomDungeonBanType ban_type = 6; //11
  uint32 expire_time = 12; //6
  uint64 dungeon_guid = 1; //5
}

message ChangeCustomDungeonRoomReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6235; //6222;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 room_id = 6; //4
}

message ChangeCustomDungeonRoomRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6216; //6244;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //1
  uint32 room_id = 10; //13
}

message RemoveCustomDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6225; //6249;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint64 dungeon_guid = 1; //14
}

message RemoveCustomDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6202; //6220;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 6; //14
  uint64 dungeon_guid = 9; //11
}

message TryCustomDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6240; //6245;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 room_id = 9; //13
}

message TryCustomDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6237; //6241;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 room_id = 13; //4
  int32 retcode = 9; //1
}

message PublishCustomDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6214; //6242;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 tag_list = 1; //1
  uint64 dungeon_guid = 10; //5
}

message PublishCustomDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6242; //6214;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //2
}

message ExitCustomDungeonTryReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6207; //6247;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message ExitCustomDungeonTryRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6215; //6237;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 7; //3
}

message CustomDungeonUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6203; //6223;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  CustomDungeonBrief dungeon_brief = 14; //12
}

message GetRecommendCustomDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6210; //6235;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_refresh = 6; //13
}

message GetRecommendCustomDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6206; //6248;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated OtherCustomDungeonBrief custom_dungeon_list = 10; //8
  int32 retcode = 12; //14
}

message GetStoreCustomDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6248; //6250;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GetStoreCustomDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6212; //6212;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 10; //13
  repeated OtherCustomDungeonBrief custom_dungeon_list = 1; //7
}

message SearchCustomDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6222; //6233;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  string dungeon_code = 12; //6
}

message SearchCustomDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6224; //6215;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //15
  OtherCustomDungeonBrief custom_dungeon_brief = 6; //14
}

message StoreCustomDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6211; //6213;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_cancel_store = 5; //9
  uint64 dungeon_guid = 2; //11
}

message StoreCustomDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6226; //6201;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //12
}

message LikeCustomDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6229; //6210;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_cancel_like = 15; //5
  uint64 dungeon_guid = 5; //10
}

message LikeCustomDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6218; //6219;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //3
}

message GetCustomDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6249; //6209;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GetCustomDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6234; //6227;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 8; //10
  CustomDungeonBanInfo ban_info = 14; //14
  repeated CustomDungeonBrief brief_list = 12; //5
}

message CustomDungeonRecoverNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6233; //6217;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  EnterCustomDungeonType enter_type = 10; //14
  TryCustomDungeonType try_type = 5; //3
  CustomDungeon custom_dungeon = 3; //10
  repeated uint32 official_black_coin_list = 14; //12
}

message BackPlayCustomDungeonOfficialReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6227; //6203;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 room_id = 4; //2
}

message BackPlayCustomDungeonOfficialRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6213; //6204;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 7; //12
}

message CustomDungeonOfficialNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6236; //6221;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  TryCustomDungeonType try_type = 7; //9
  repeated uint32 official_black_coin_list = 12; //14
  EnterCustomDungeonType enter_type = 11; //15
}

message CustomDungeonVerify {
  uint64 dungeon_guid = 11; //3
  uint32 uid = 9; //15
  uint32 timestamp = 13; //4
  string region = 7; //11
  uint32 lang = 15; //13
}

message ReplayCustomDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6250; //6243;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message ReplayCustomDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6217; //6240;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  int32 retcode = 7; //15
}

message CustomDungeonBattleRecordNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6201; //6236;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 min_cost_time = 12; //13
  uint64 dungeon_guid = 13; //12
}

message OutStuckCustomDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6239; //6211;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message OutStuckCustomDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6209; //6234;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  int32 retcode = 14; //15
}

enum EnterCustomDungeonType {
  ENTER_CUSTOM_DUNGEON_NONE = 0;
  ENTER_CUSTOM_DUNGEON_EDIT = 1;
  ENTER_CUSTOM_DUNGEON_PLAY = 2;
  ENTER_CUSTOM_DUNGEON_OFFICIAL = 3;
}

enum CustomDungeonState {
  CUSTOM_DUNGEON_STATE_EDIT = 0;
  CUSTOM_DUNGEON_STATE_SELF_PASS = 1;
  CUSTOM_DUNGEON_STATE_PUBLISHED = 2;
}

enum CustomDungeonBanType {
  CUSTOM_DUNGEON_BAN_TYPE_NONE = 0;
  CUSTOM_DUNGEON_BAN_TYPE_LAYOUT = 1;
}

enum TryCustomDungeonType {
  TRY_CUSTOM_DUNGEON_NONE = 0;
  TRY_CUSTOM_DUNGEON_ROOM = 1;
  TRY_CUSTOM_DUNGEON_ALL = 2;
  TRY_CUSTOM_DUNGEON_OFFICIAL_PLAY = 3;
}

