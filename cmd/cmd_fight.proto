syntax = "proto3";

package proto;
option go_package = "./;proto";


import "define.proto";

message HitCollision {
  HitColliderType hit_collider_type = 9; //8
  Vector hit_point = 3; //7
  float attackee_hit_force_angle = 15; //2
  Vector hit_dir = 4; //13
  float attackee_hit_entity_angle = 12; //15
  int32 hit_box_index = 10; //4
}

message AttackHitEffectResult {
  float hit_halt_time_scale = 7; //8
  uint32 original_hit_eff_level = 3; //12
  float air_strength = 6; //15
  uint32 hit_eff_level = 13; //2
  float hit_halt_time = 15; //13
  float retreat_strength = 4; //7
}

message AbilityIdentifier {
  uint32 modifier_owner_id = 3; //2
  uint32 instanced_modifier_id = 11; //9
  uint32 instanced_ability_id = 5; //10
  bool is_serverbuff_modifier = 4; //6
  uint32 ability_caster_id = 10; //15
  int32 local_id = 8; //3
}

message AttackResult {
  bool is_resist_text = 531; //1858
  uint32 create_count_sync_to_server = 701; //1011
  uint32 amplify_reaction_type = 888; //2005
  uint32 endure_break = 6; //7
  uint32 element_type = 1; //5
  float element_durability_attenuation = 1333; //425
  uint32 defense_id = 13; //15
  uint32 attack_timestamp_ms = 1829; //1188
  uint32 bullet_fly_time_ms = 1940; //91
  bool is_crit = 9; //13
  float element_amplify_rate = 1858; //900
  uint32 attack_count = 1593; //1564
  uint32 critical_rand = 1576; //1664
  uint32 hit_pos_type = 7; //2
  string anim_event_id = 11; //4
  AttackHitEffectResult hit_eff_result = 5; //8
  float damage_shield = 198; //1202
  float endure_delta = 1169; //430
  Vector resolved_dir = 8; //1
  float damage = 12; //6
  uint32 addhurt_reaction_type = 1569; //1887
  uint32 hashed_anim_event_id = 2009; //278
  bool use_gadget_damage_action = 1698; //1418
  int32 hit_retreat_angle_compat = 15; //9
  AbilityIdentifier ability_identifier = 2; //14
  uint32 attacker_id = 4; //11
  bool mute_element_hurt = 555; //1530
  uint32 target_type = 346; //1366
  HitCollision hit_collision = 14; //10
  uint32 gadget_damage_action_idx = 55; //1110
}

message EvtBeingHitInfo {
  uint32 peer_id = 7; //6
  AttackResult attack_result = 5; //7
  uint32 frame_num = 10; //4
}

message EvtHittingOtherInfo {
  AttackResult attack_result = 13; //2
  uint32 peer_id = 3; //8
}

message EvtBeingHitNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 305; //372;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  ForwardType forward_type = 4; //6
  EvtBeingHitInfo being_hit_info = 15; //3
}

message EvtAnimatorParameterInfo {
  uint32 entity_id = 14; //4
  bool is_server_cache = 9; //5
  AnimatorParameterValueInfo value = 12; //7
  int32 name_id = 2; //15
}

message EvtAnimatorParameterNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 355; //398;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  EvtAnimatorParameterInfo animator_param_info = 10; //12
  ForwardType forward_type = 4; //14
}

message AbilityArgument {
  oneof arg {
    uint32 int_arg = 11; //5
    float float_arg = 2; //15
    string str_arg = 8; //11
  }
}

message HostPlayerNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 387; //312;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 host_peer_id = 5; //13
  uint32 host_uid = 4; //10
}

message EvtDoSkillSuccNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 398; //335;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 caster_id = 2; //13
  ForwardType forward_type = 5; //10
  Vector forward = 14; //15
  uint32 skill_id = 13; //7
}

message EvtCreateGadgetNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 320; //307;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_async_load = 8; //8
  uint32 camp_type = 12; //5
  bool sight_group_with_owner = 2; //10
  repeated uint32 target_entity_id_list = 1591; //889
  ForwardType forward_type = 7; //12
  uint32 entity_id = 4; //2
  uint32 target_entity_id = 10; //3
  uint32 camp_id = 14; //15
  uint64 guid = 5; //6
  Vector init_euler_angles = 11; //13
  uint32 target_lock_point_index = 6; //11
  repeated uint32 target_lock_point_index_list = 1252; //1920
  Vector init_pos = 9; //4
  uint32 owner_entity_id = 3; //9
  uint32 room_id = 15; //7
  bool is_peer_id_from_player = 771; //25
  uint32 prop_owner_entity_id = 1; //1
  bool is_true_life_time_by_owner = 137; //379
  uint32 config_id = 13; //14
}

message EvtDestroyGadgetNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 374; //321;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  ForwardType forward_type = 11; //5
  uint32 entity_id = 3; //3
}

message EvtFaceToEntityNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 380; //303;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 face_entity_id = 4; //5
  ForwardType forward_type = 10; //9
  uint32 entity_id = 8; //1
}

message EvtFaceToDirInfo {
  uint32 entity_id = 5; //12
  Vector face_dir = 2; //14
}

message EvtFaceToDirNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 370; //390;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  ForwardType forward_type = 14; //13
  EvtFaceToDirInfo evt_face_to_dir_info = 2; //5
}

message EvtCostStaminaNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 362; //373;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 skill_id = 14; //6
  float cost_stamina = 8; //11
}

message EvtSetAttackTargetInfo {
  uint32 entity_id = 14; //11
  uint32 select_point_index = 4; //6
  uint32 attack_target_id = 8; //7
}

message EvtSetAttackTargetNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 314; //399;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  ForwardType forward_type = 15; //1
  EvtSetAttackTargetInfo evt_set_attack_target_info = 1; //11
}

message EvtAnimatorStateChangedInfo {
  int32 face_angle_compact = 3; //14
  uint32 to_state_hash = 4; //5
  uint32 normalized_time_compact = 9; //9
  uint32 layer = 5; //2
  Vector pos = 7; //13
  float fade_duration = 8; //3
  bool forceSync = 13; //1
  uint32 entity_id = 11; //15
  bool handle_animator_state_immediately = 12; //7
}

message EvtCompensatePosDiffInfo {
  Vector cur_pos = 7; //14
  uint32 entity_id = 2; //11
  int32 face_angle_compact = 10; //10
  uint32 cur_hash = 1; //4
  uint32 normalized_time_compact = 15; //3
}

message EvtMonsterDoBlink {
  Vector target_rot = 9; //3
  Vector target_pos = 7; //7
  uint32 entity_id = 13; //2
}

message EvtFixedRushMove {
  uint32 entity_id = 1; //15
  float speed = 11; //3
  bool need_set_is_in_air = 15; //7
  repeated uint32 animator_state_id_list = 14; //2
  Vector target_pos = 7; //9
  bool check_animator_state_on_exit_only = 9; //6
  string override_collider = 13; //13
}

message EvtSyncTransform {
  uint32 entity_id = 10; //15
  Vector entity_pos = 9; //6
  Vector entity_rot = 5; //1
}

message EvtLightCoreMove {
  Vector target_pos = 12; //15
  float acelerate = 2; //11
  uint32 entity_id = 5; //5
  float max_absorb_time = 14; //10
  float speed = 6; //14
}

message EvtGrapplingHookMove {
  float acceleration = 5; //1
  repeated uint32 animator_state_id_list = 7; //2
  uint32 entity_id = 2; //3
  bool need_set_is_in_air = 4; //13
  float speed = 10; //12
  float max_speed = 14; //8
  bool check_animator_state_on_exit_only = 13; //11
  string override_collider = 12; //14
  Vector target_pos = 3; //10
}

message EvtAnimatorStateChangedNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 324; //331;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  ForwardType forward_type = 6; //3
  EvtAnimatorStateChangedInfo evt_animator_state_changed_info = 8; //10
}

message EvtRushMoveInfo {
  int32 state_name_hash = 7; //11
  Vector rush_to_pos = 8; //9
  Vector rush_attack_target_pos = 6; //8
  uint32 entity_id = 5; //4
  float timeRange = 10; //15
  Vector velocity = 13; //6
  Vector pos = 14; //2
  int32 face_angle_compact = 9; //10
}

message EvtMotionInfoDuringSteerAttack {
  Vector face_dir = 10; //4
  Vector velocity = 5; //3
  Vector pos = 9; //1
  uint32 entity_id = 14; //6
}

message EvtCombatSteerMotionInfo {
  Vector pos = 4; //12
  Vector velocity = 7; //10
  uint32 entity_id = 6; //4
  Vector face_dir = 3; //1
}

message EvtCombatForceSetPosInfo {
  uint32 ice_id = 15; //9
  uint32 collider_entity_id = 13; //10
  uint32 entity_id = 1; //6
  Vector target_pos = 14; //1
}

message EvtSyncEntityPositionInfo {
  uint32 entity_id = 12; //10
  uint32 normalized_time_compact = 1; //13
  uint32 state_hash = 7; //8
  int32 face_angle_compact = 3; //7
  Vector pos = 2; //15
}

message EvtRushMoveNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 329; //375;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  ForwardType forward_type = 1; //1
  EvtRushMoveInfo evt_rush_move_info = 13; //15
}

message EvtBulletHitNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 378; //348;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 single_bullet_id = 12; //8
  Vector hit_point = 1; //15
  Vector hit_normal = 4; //11
  int32 hit_box_index = 15; //9
  uint32 hit_entity_id = 14; //3
  uint32 entity_id = 10; //5
  uint32 forward_peer = 13; //7
  ForwardType forward_type = 6; //2
  HitColliderType hit_collider_type = 8; //6
}

message EvtBulletDeactiveNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 316; //397;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  ForwardType forward_type = 12; //6
  uint32 entity_id = 4; //9
  Vector disappear_pos = 5; //4
}

message EvtEntityStartDieEndNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 313; //381;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool immediately = 9; //15
  uint32 die_state_flag = 8; //12
  uint32 entity_id = 11; //8
  ForwardType forward_type = 15; //11
}

message EvtBulletMoveNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 388; //365;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  ForwardType forward_type = 11; //14
  Vector cur_pos = 13; //1
  uint32 entity_id = 1; //11
}

message EvtAvatarEnterFocusNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 325; //304;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 entity_id = 2; //1
  bool can_move = 9; //10
  bool enter_holding_focus_shoot = 11; //13
  bool disable_aim_layer = 6; //6
  bool use_auto_focus = 5; //5
  bool fast_focus = 10; //3
  bool show_cross_hair = 12; //12
  bool enter_normal_focus_shoot = 13; //14
  ForwardType forward_type = 14; //8
  Vector focus_forward = 8; //7
  bool disable_anim = 3; //9
  bool use_focus_sticky = 4; //15
  bool use_gyro = 15; //11
}

message EvtAvatarExitFocusNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 358; //393;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  Vector finish_forward = 7; //12
  ForwardType forward_type = 14; //11
  uint32 entity_id = 13; //14
}

message EvtAvatarUpdateFocusNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 318; //327;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  ForwardType forward_type = 15; //7
  Vector focus_forward = 3; //11
  uint32 entity_id = 5; //10
}

message AuthorityChange {
  EntityAuthorityInfo entity_authority_info = 4; //5
  uint32 authority_peer_id = 2; //3
  uint32 entity_id = 14; //13
}

message EntityAuthorityChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 375; //394;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated AuthorityChange authority_change_list = 2; //15
}

message AvatarBuffAddNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 328; //388;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint64 avatar_guid = 7; //10
  uint32 buff_id = 15; //6
}

message AvatarBuffDelNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 373; //326;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint64 avatar_guid = 8; //10
  uint32 buff_id = 15; //12
}

message MonsterAlertChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 322; //363;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 avatar_entity_id = 2; //15
  repeated uint32 monster_entity_list = 15; //5
  uint32 is_alert = 10; //13
}

message MonsterForceAlertNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 345; //395;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 monster_entity_id = 5; //13
}

message AvatarEnterElementViewNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 351; //334;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_triggerd = 6; //3
  uint32 avatar_entity_id = 1; //12
}

message TriggerCreateGadgetToEquipPartNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 342; //350;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 gadget_id = 5; //1
  uint32 entity_id = 3; //13
  string equip_part = 7; //14
  uint32 gadget_entity_id = 4; //10
}

message EvtEntityRenderersChangedNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 350; //343;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  ForwardType forward_type = 10; //8
  bool is_server_cache = 8; //3
  EntityRendererChangedInfo renderer_changed_info = 13; //5
  uint32 entity_id = 4; //15
}

message AnimatorForceSetAirMoveNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 330; //374;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 entity_id = 2; //14
  bool in_air_move = 1; //13
  ForwardType forward_type = 11; //9
}

message AiSkillCdInfo {


  map<uint32, uint32> skill_cd_map = 14; //11
  map<uint32, uint32> skill_group_cd_map = 3; //6
}

message EvtAiSyncSkillCdNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 343; //376;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  map<uint32, AiSkillCdInfo> ai_cd_map = 11; //7
}

message EvtBeingHitsCombineNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 335; //346;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  ForwardType forward_type = 3; //11
  repeated EvtBeingHitInfo evt_being_hit_info_list = 4; //7
}

message EvtAvatarSitDownNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 353; //324;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  Vector position = 2; //9
  uint32 entity_id = 4; //4
  uint64 chair_id = 11; //6
}

message EvtAvatarStandUpNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 336; //356;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint64 chair_id = 11; //11
  int32 performID = 14; //6
  int32 direction = 5; //1
  uint32 entity_id = 4; //9
}

message CreateMassiveEntityReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 394; //342;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated ClientMassiveEntity massive_entity_list = 5; //1
}

message CreateMassiveEntityRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 381; //330;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //1
}

message CreateMassiveEntityNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 364; //367;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated ServerMassiveEntity massive_entity_list = 8; //15
}

message DestroyMassiveEntityNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 383; //358;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated ClientMassiveEntity massive_entity_list = 9; //7
}

message MassiveEntityStateChangedNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 379; //370;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated MassiveEntityState massive_entity_state_list = 5; //4
}

message TeamEntityInfo {
  uint32 authority_peer_id = 12; //10
  AbilitySyncStateInfo team_ability_info = 8; //9
  uint32 team_entity_id = 2; //8
}

message SyncTeamEntityNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 327; //317;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 scene_id = 5; //13
  repeated TeamEntityInfo team_entity_info_list = 14; //15
}

message DelTeamEntityNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 363; //302;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 del_entity_id_list = 1; //15
  uint32 scene_id = 15; //8
}

message EvtSyncSkillAnchorPosition {
  uint32 entity_id = 7; //2
  Vector skill_anchor_position = 9; //13
}

message CombatInvokeEntry {
  bytes combat_data = 7; //12
  ForwardType forward_type = 15; //10
  CombatTypeArgument argument_type = 8; //11
}

message CombatInvocationsNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 323; //319;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated CombatInvokeEntry invoke_list = 11; //14
}

message ServerBuffChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 315; //361;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  enum ServerBuffChangeType {
    ADD_SERVER_BUFF = 0;
    DEL_SERVER_BUFF = 1;
  }

  ServerBuffChangeType server_buff_change_type = 4; //7
  bool is_creature_buff = 5; //10
  repeated uint32 entity_id_list = 1; //1
  repeated uint64 avatar_guid_list = 10; //12
  repeated ServerBuff server_buff_list = 12; //11
}

message AiThreatInfo {

  map<uint32, uint32> ai_threat_map = 13; //11
}

message EvtAiSyncCombatThreatInfoNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 356; //329;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  map<uint32, AiThreatInfo> combat_threat_info_map = 8; //8
}

message MassiveEntityElementOpBatchNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 390; //357;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  int32 entity_type = 2; //6
  uint32 op_idx = 1; //9
  uint32 user_id = 4; //11
  uint32 attacker_id = 10; //3
  int32 source_element_type = 9; //12
  int32 reaction_source_type = 11; //4
  float attack_element_durability = 6; //7
  oneof check_shape {
    ShapeSphere shape_sphere = 7; //10
    ShapeBox shape_box = 8; //2
  }
}

message AiSyncInfo {
  uint32 entity_id = 1; //9
  bool is_self_killing = 2; //8
  bool has_path_to_target = 10; //4
}

message EntityAiSyncNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 354; //400;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 local_avatar_alerted_monster_list = 8; //15
  repeated AiSyncInfo info_list = 10; //1
}

message LuaSetOptionNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 395; //316;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  enum LuaOptionType {
    LUA_OPTION_NONE = 0;
    LUA_OPTION_PLAYER_INPUT = 1;
  }

  string lua_set_param = 4; //8
  LuaOptionType option_type = 14; //10
}

message EvtDestroyServerGadgetNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 367; //387;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 entity_id = 14; //7
}

message EntityAiKillSelfNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 301; //340;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 entity_id = 15; //12
}

message EvtAvatarLockChairReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 337; //318;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint64 chair_id = 3; //5
  Vector position = 14; //8
}

message EvtAvatarLockChairRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 384; //366;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint64 chair_id = 15; //14
  uint32 entity_id = 4; //15
  Vector position = 3; //4
  int32 retcode = 12; //12
}

message ReportFightAntiCheatNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 311; //368;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 cheat_count = 8; //8
  uint32 cheat_type = 12; //12
}

message EvtBeingHealedNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 391; //333;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 target_id = 8; //1
  float real_heal_amount = 12; //5
  uint32 source_id = 13; //13
  float heal_amount = 11; //4
}

message EvtLocalGadgetOwnerLeaveSceneNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 360; //384;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 entity_id = 11; //10
}

enum ForwardType {
  FORWARD_LOCAL = 0;
  FORWARD_TO_ALL = 1;
  FORWARD_TO_ALL_EXCEPT_CUR = 2;
  FORWARD_TO_HOST = 3;
  FORWARD_TO_ALL_GUEST = 4;
  FORWARD_TO_PEER = 5;
  FORWARD_TO_PEERS = 6;
  FORWARD_ONLY_SERVER = 7;
  FORWARD_TO_ALL_EXIST_EXCEPT_CUR = 8;
}

enum HitColliderType {
  HIT_COLLIDER_INVALID = 0;
  HIT_COLLIDER_HIT_BOX = 1;
  HIT_COLLIDER_WET_HIT_BOX = 2;
  HIT_COLLIDER_HEAD_BOX = 3;
}

enum CombatTypeArgument {
  COMBAT_NONE = 0;
  COMBAT_EVT_BEING_HIT = 1;
  COMBAT_ANIMATOR_STATE_CHANGED = 2;
  COMBAT_FACE_TO_DIR = 3;
  COMBAT_SET_ATTACK_TARGET = 4;
  COMBAT_RUSH_MOVE = 5;
  COMBAT_ANIMATOR_PARAMETER_CHANGED = 6;
  ENTITY_MOVE = 7;
  SYNC_ENTITY_POSITION = 8;
  COMBAT_STEER_MOTION_INFO = 9;
  COMBAT_FORCE_SET_POS_INFO = 10;
  COMBAT_COMPENSATE_POS_DIFF = 11;
  COMBAT_MONSTER_DO_BLINK = 12;
  COMBAT_FIXED_RUSH_MOVE = 13;
  COMBAT_SYNC_TRANSFORM = 14;
  COMBAT_LIGHT_CORE_MOVE = 15;
  COMBAT_BEING_HEALED_NTF = 16;
  COMBAT_SKILL_ANCHOR_POSITION_NTF = 17;
  COMBAT_GRAPPLING_HOOK_MOVE = 18;
}

