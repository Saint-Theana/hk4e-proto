syntax = "proto3";

package proto;
option go_package = "./;proto";


import "define.proto";
import "cmd/cmd_gcg_common.proto";

message GCGAttackCostInfo {

  uint32 skill_id = 13; //8
  map<uint32, uint32> cost_map = 6; //3
}

message GCGPlayCardCostInfo {

  map<uint32, uint32> cost_map = 10; //14
  uint32 card_id = 3; //1
}

message GCGSelectOnStageCostInfo {

  map<uint32, uint32> cost_map = 10; //8
  uint32 card_guid = 14; //9
}

message GCGCostReviseInfo {
  bool is_can_attack = 2; //4
  repeated uint32 can_use_hand_card_id_list = 7; //11
  repeated GCGPlayCardCostInfo play_card_cost_list = 15; //5
  repeated GCGSelectOnStageCostInfo select_on_stage_cost_list = 5; //10
  repeated GCGAttackCostInfo attack_cost_list = 8; //2
}

message GCGMsgTokenChange {
  uint32 before = 15; //13
  uint32 token_type = 8; //4
  uint32 card_guid = 6; //2
  uint32 after = 5; //11
  GCGReason reason = 12; //7
}

message GCGMsgPhaseChange {

  map<uint32, uint32> allow_controller_map = 7; //15
  GCGPhaseType before_phase = 8; //12
  GCGPhaseType after_phase = 13; //5
}

message GCGMsgAddCards {
  uint32 pos = 6; //11
  GCGZoneType zone = 9; //2
  GCGReason reason = 1; //15
  uint32 controller_id = 11; //13
  repeated uint32 card_guid_list = 5; //14
}

message GCGMsgRemoveCards {
  uint32 controller_id = 4; //15
  GCGZoneType zone = 9; //10
  GCGReason reason = 6; //5
  repeated uint32 card_guid_list = 14; //1
}

message GCGMsgMoveCard {
  uint32 controller_id = 6; //14
  GCGZoneType to = 12; //5
  GCGZoneType from = 3; //12
  repeated uint32 card_guid_list = 15; //8
  GCGReason reason = 4; //6
  repeated uint32 fail_guid_list = 10; //11
}

message GCGMsgSelectOnStage {
  uint32 controller_id = 2; //6
  GCGReason reason = 13; //10
  uint32 card_guid = 5; //4
}

message GCGMsgSelectOnStageByEffect {
  uint32 skill_id = 4; //12
  uint32 controller_id = 13; //15
  uint32 card_guid = 2; //1
}

message GCGMsgDiceRoll {
  repeated GCGDiceSideType dice_side_list = 7; //10
  uint32 dice_num = 11; //15
  uint32 controller_id = 8; //5
}

message GCGMsgDiceReroll {
  uint32 controller_id = 8; //2
  repeated uint32 select_dice_index_list = 13; //1
  repeated GCGDiceSideType dice_side_list = 7; //6
}

message GCGMsgPass {
  uint32 controller_id = 12; //14
}

message GCGMsgCharDie {
  uint32 controller_id = 9; //5
  uint32 card_guid = 10; //11
}

message GCGMsgUseSkill {
  uint32 skill_id = 14; //9
  uint32 card_guid = 11; //6
}

message GCGMsgUseSkillEnd {
  uint32 card_guid = 13; //11
  uint32 skill_id = 5; //12
}

message GCGDamageDetail {
  uint32 skill_id = 9; //10
  uint32 card_guid = 10; //7
}

message GCGMsgSkillResult {
  uint32 skill_id = 4; //12
  uint32 last_hp = 13; //14
  repeated GCGDamageDetail detail_list = 12; //2
  uint32 target_card_guid = 7; //7
  uint32 effect_element = 1; //5
  uint32 from_result_seq = 14; //15
  uint32 damage = 11; //6
  uint32 result_seq = 15; //4
  uint32 src_card_guid = 2; //8
}

message GCGLimitsInfo {
  uint32 limit_type = 15; //7
  uint32 limit_value = 3; //1
}

message GCGSkillLimitsInfo {
  uint32 skill_id = 9; //5
  repeated GCGLimitsInfo limits_list = 8; //15
}

message GCGCardSkillLimitsInfo {
  repeated GCGSkillLimitsInfo skill_limits_list = 13; //12
}

message GCGMsgSkillLimitsChange {

  map<uint32, GCGCardSkillLimitsInfo> card_limits_change_map = 13; //15
}

message GCGMsgCostDice {
  uint32 controller_id = 9; //6
  repeated uint32 select_dice_index_list = 8; //13
  GCGReason reason = 7; //9
}

message GCGMsgAddDice {


  map<uint32, GCGDiceSideType> before_dice_map = 5; //12
  int32 change_count = 10; //1
  map<uint32, GCGDiceSideType> dice_map = 15; //8
  GCGReason reason = 9; //4
  uint32 controller_id = 3; //10
}

message GCGMsgNewCard {
  GCGCard card = 5; //15
}

message GCGMsgUpdateController {

  map<uint32, uint32> allow_controller_map = 3; //7
}

message GCGMsgModifyAdd {
  uint32 pos = 11; //9
  uint32 owner_card_guid = 10; //10
  repeated uint32 card_guid_list = 4; //15
  uint32 controller_id = 7; //14
  GCGReason reason = 14; //11
}

message GCGMsgModifyRemove {
  uint32 controller_id = 7; //14
  GCGReason reason = 1; //12
  uint32 owner_card_guid = 2; //5
  repeated uint32 card_guid_list = 3; //4
}

message GCGMsgPVEIntention {
  repeated uint32 skill_id_list = 3; //8
  uint32 card_guid = 9; //13
}

message GCGMsgPVEIntentionInfo {

  map<uint32, GCGMsgPVEIntention> intention_map = 15; //2
}

message GCGMsgPVEIntentionChange {
  repeated GCGMsgPVEIntention change_intention_list = 2; //4
  GCGIntentionChangeType change_type = 6; //1
}

message GCGMsgDuelDataChange {
  uint32 round = 8; //14
}

message GCGMsgClientPerform {
  repeated uint32 param_list = 5; //2
  GCGClientPerformType perform_type = 2; //5
}

message GCGMsgGameOver {
  GCGEndReason end_reason = 4; //13
  uint32 win_controller_id = 10; //6
}

message GCGMsgOpTimer {
  fixed64 begin_time = 10; //9
  GCGPhaseType phase = 1; //3
  fixed64 time_stamp = 9; //13
  uint32 controller_id = 6; //8
}

message GCGMsgWaitingListChange {
  uint32 cur_index = 3; //6
  uint32 controller_id = 4; //4
}

message GCGMsgCardUpdate {
  GCGCard card = 10; //7
}

message GCGMsgCostRevise {
  uint32 controller_id = 15; //5
  GCGCostReviseInfo cost_revise = 10; //13
}

message GCGMsgPhaseContinue {
}

message GCGMsgNoDamageSkillResult {
  uint32 result_seq = 3; //8
  uint32 from_result_seq = 13; //4
  uint32 effect_element = 1; //9
  uint32 target_card_guid = 4; //5
  repeated GCGDamageDetail detail_list = 9; //13
  uint32 skill_id = 15; //10
  uint32 src_card_guid = 5; //12
}

message GCGMsgReactionBegin {
  uint32 card_guid = 3; //13
  uint32 skill_id = 8; //3
}

message GCGMsgReactionEnd {
  uint32 skill_id = 15; //4
}

message GCGMessage {
  oneof message {
    GCGMsgTokenChange token_change = 10; //12
    GCGMsgPhaseChange phase_change = 15; //13
    GCGMsgAddCards add_cards = 11; //10
    GCGMsgRemoveCards remove_cards = 7; //14
    GCGMsgSelectOnStage select_on_stage = 9; //6
    GCGMsgDiceRoll dice_roll = 3; //9
    GCGMsgDiceReroll dice_reroll = 12; //11
    GCGMsgPass pass = 5; //5
    GCGMsgCharDie char_die = 6; //2
    GCGMsgSkillResult skill_result = 1; //1
    GCGMsgCostDice cost_dice = 4; //7
    GCGMsgAddDice add_dice = 13; //3
    GCGMsgMoveCard move_card = 14; //15
    GCGMsgUseSkill use_skill = 2; //4
    GCGMsgNewCard new_card = 1658; //1848
    GCGMsgUpdateController update_controller = 204; //429
    GCGMsgModifyAdd modify_add = 1001; //1851
    GCGMsgModifyRemove modify_remove = 1447; //471
    GCGMsgUseSkillEnd use_skill_end = 1779; //1411
    GCGMsgDuelDataChange duel_data_change = 1102; //1008
    GCGMsgClientPerform client_perform = 1225; //1035
    GCGMsgGameOver game_over = 640; //714
    GCGMsgOpTimer op_timer = 778; //1862
    GCGMsgWaitingListChange waiting_list_change = 517; //1678
    GCGMsgCardUpdate card_update = 1284; //1879
    GCGMsgSelectOnStageByEffect select_on_stage_by_effect = 542; //2042
    GCGMsgCostRevise cost_revise = 662; //1350
    GCGMsgPhaseContinue phase_continue = 344; //1474
    GCGMsgPVEIntentionInfo pve_intention_info = 975; //1252
    GCGMsgPVEIntentionChange pve_intention_change = 719; //893
    GCGMsgSkillLimitsChange skill_limits_change = 597; //259
    GCGMsgNoDamageSkillResult no_damage_skill_result = 1483; //24
    GCGMsgReactionBegin reaction_begin = 170; //859
    GCGMsgReactionEnd reaction_end = 58; //1395
  }
}

message GCGMessagePack {
  GCGActionType action_type = 8; //3
  uint32 controller_id = 12; //6
  repeated GCGMessage msg_list = 3; //13
}

message GCGOperationRedraw {
  repeated uint32 card_list = 12; //2
}

message GCGOperationOnStageSelect {
  uint32 card_guid = 6; //5
  repeated uint32 cost_dice_index_list = 13; //4
}

message GCGOperationReroll {
  repeated uint32 dice_index_list = 3; //12
}

message GCGOperationAttack {
  repeated uint32 cost_dice_index_list = 11; //8
  uint32 skill_id = 8; //2
}

message GCGOperationPass {
}

message GCGOperationPlayCard {
  uint32 card_guid = 14; //12
  repeated uint32 cost_dice_index_list = 13; //4
  repeated uint32 target_card_guid_list = 11; //10
  uint32 replace_card_guid = 6; //8
}

message GCGOperationReboot {
  repeated uint32 cost_card_guid_list = 9; //7
  repeated uint32 dice_index_list = 10; //6
}

message GCGOperationSurrender {
}

message GCGOperation {
  oneof op {
    GCGOperationRedraw op_redraw = 12; //10
    GCGOperationOnStageSelect op_select_on_stage = 4; //4
    GCGOperationReroll op_reroll = 13; //9
    GCGOperationAttack op_attack = 9; //11
    GCGOperationPass op_pass = 10; //15
    GCGOperationPlayCard op_play_card = 8; //2
    GCGOperationReboot op_reboot = 6; //5
    GCGOperationSurrender op_surrender = 15; //1
  }
}

message GCGReplayOperationData {
  uint32 controller_id = 10; //8
  GCGOperation op = 15; //5
}

message GCGReplayControllerData {
  uint32 controller_id = 7; //13
  repeated uint32 card_id_list = 9; //5
}

message GCGOperationReplay {
  uint32 seed = 12; //11
  repeated GCGReplayOperationData operation_data_list = 6; //9
  repeated GCGReplayControllerData controller_data_list = 9; //13
  uint32 game_id = 8; //1
}

message GCGToken {
  uint32 value = 5; //11
  uint32 key = 9; //4
}

message GCGCard {
  bool is_show = 13; //14
  uint32 face_type = 1; //5
  uint32 id = 14; //6
  repeated GCGToken token_list = 3; //2
  repeated uint32 skill_id_list = 11; //11
  repeated GCGSkillLimitsInfo skill_limits_list = 12; //8
  uint32 guid = 8; //15
  repeated uint32 tag_list = 9; //3
  uint32 controller_id = 2; //7
}

message GCGZone {
  repeated uint32 card_list = 14; //4
}

message GCGWaitingCharacter {
  uint32 card_id = 2; //2
  uint32 cond_count = 9; //14
}

message GCGPlayerField {

  map<uint32, GCGZone> modify_zone_map = 11; //2
  uint32 cur_waiting_index = 181; //383
  GCGZone summon_zone = 4; //1
  uint32 field_show_id = 1; //8
  uint32 card_back_show_id = 14; //12
  uint32 dice_count = 12; //3
  uint32 controller_id = 3; //10
  GCGZone on_stage_zone = 10; //14
  bool is_passed = 13; //7
  GCGZone character_zone = 8; //5
  uint32 on_stage_character_guid = 6; //6
  GCGZone assist_zone = 5; //15
  uint32 deck_card_num = 15; //13
  repeated GCGDiceSideType dice_side_list = 7; //11
  GCGZone hand_zone = 9; //9
  repeated GCGPVEIntention intention_list = 1273; //1192
  repeated GCGWaitingCharacter waiting_list = 2; //4
}

message GCGPhase {

  GCGPhaseType phase_type = 5; //5
  map<uint32, uint32> allow_controller_map = 14; //6
}

message GCGControllerShowInfo {
  ProfilePicture profile_picture = 4; //11
  string nick_name = 1; //14
  uint32 controller_id = 6; //9
}

message GCGPVEIntention {
  uint32 card_guid = 11; //9
  repeated uint32 skill_id_list = 3; //7
}

message GCGDuelChallenge {
  uint32 total_progress = 9; //7
  uint32 challenge_id = 10; //10
  uint32 cur_progress = 1; //12
}

message GCGDuel {
  GCGCostReviseInfo cost_revise = 6; //10
  GCGGameBusinessType business_type = 7; //14
  repeated GCGCard history_card_list = 1326; //121
  uint32 operation_seq = 5; //1210
  uint32 game_id = 9; //11
  uint32 game_type = 13; //2
  repeated GCGCard card_list = 1; //9
  uint32 server_seq = 11; //3
  repeated GCGMessagePack history_msg_pack_list = 1636; //796
  uint32 round = 4; //15
  repeated GCGPlayerField field_list = 3; //7
  uint32 controller_id = 2; //13
  GCGPhase phase = 8; //8
  repeated uint32 card_id_list = 12; //4
  repeated GCGPVEIntention intetion_list = 15; //1
  repeated uint32 forbid_finish_challenge_list = 1985; //647
  repeated GCGDuelChallenge challenge_list = 37; //5
  uint32 cur_controller_id = 14; //12
  repeated GCGControllerShowInfo show_info_list = 10; //6
}

message GCGOperationReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7487; //7107;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 op_seq = 6; //2
  uint32 redirect_uid = 3; //7
  GCGOperation op = 11; //15
}

message GCGOperationRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7651; //7600;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 3; //8
  uint32 op_seq = 7; //4
}

message GCGMessagePackNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7329; //7516;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated GCGMessagePack msg_pack_list = 13; //11
  uint32 server_seq = 6; //5
}

message GCGAskDuelReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7646; //7237;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GCGAskDuelRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7928; //7869;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 7; //3
  GCGDuel duel = 5; //13
}

message GCGPlayerBriefData {

  map<uint32, uint32> card_face_map = 4; //8
  string nick_name = 2; //9
  ProfilePicture profile_picture = 14; //12
  repeated uint32 card_id_list = 13; //3
  uint32 controller_id = 11; //5
  uint32 uid = 3; //10
}

message GCGGameBriefData {
  uint32 game_id = 1; //14
  uint32 game_uid = 6; //9
  GCGGameBusinessType business_type = 10; //13
  uint32 verify_code = 11; //5
  repeated GCGPlayerBriefData player_brief_list = 5; //12
}

message GCGGameBriefDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7654; //7539;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_new_game = 12; //11
  GCGGameBriefData gcg_brief_data = 4; //10
}

message GCGInitFinishReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7751; //7684;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GCGInitFinishRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7186; //7433;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 3; //2
}

message GCGHeartBeatNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7499; //7224;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 server_seq = 3; //6
}

message GCGSkillPreviewHpInfo {
  GCGSkillHpChangeType change_type = 9; //4
  uint32 hp_change_value = 1; //13
}

message GCGSkillPreviewReactionInfo {
  uint32 source_element = 10; //13
  uint32 target_element = 9; //1
}

message GCGSkillPreviewElementReactionInfo {
  repeated uint32 fresh_list = 12; //8
  repeated uint32 source_list = 2; //2
  repeated GCGSkillPreviewReactionInfo reaction_list = 9; //14
}

message GCGSkillPreviewCardInfo {
  uint32 controller_id = 1; //3
  uint32 owner_card_guid = 7; //11
  GCGZoneType zone_type = 13; //14
  uint32 card_id = 5; //13
  uint32 card_guid = 12; //6
}

message GCGSkillPreviewOnstageChangeInfo {
  uint32 target_onstage_card_guid = 3; //6
  uint32 source_onstage_card_guid = 5; //15
}

message GCGSkillPreviewTokenInfo {
  uint32 token_type = 8; //3
  uint32 after_value = 6; //12
  uint32 before_value = 7; //15
}

message GCGSkillPreviewTokenChangeInfo {
  repeated GCGSkillPreviewTokenInfo token_change_list = 1; //14
}

message GCGSkillPreviewExtraInfo {
  repeated GCGSkillPreviewCardInfo fail_added_when_full_list = 11; //14
  repeated GCGSkillPreviewCardInfo refresh_card_when_exist_list = 6; //6
}

message GCGSkillPreviewInfo {



  map<uint32, GCGSkillPreviewTokenChangeInfo> card_token_change_map = 12; //3
  map<uint32, GCGSkillPreviewElementReactionInfo> reaction_info_map = 9; //5
  map<uint32, GCGSkillPreviewHpInfo> hp_info_map = 1; //8
  repeated GCGSkillPreviewCardInfo add_card_list = 11; //11
  GCGSkillPreviewExtraInfo extra_info = 6; //10
  uint32 skill_id = 2; //6
  repeated GCGSkillPreviewOnstageChangeInfo change_onstage_character_list = 14; //9
  repeated GCGSkillPreviewCardInfo rm_card_list = 15; //12
}

message GCGChangeOnstageInfo {
  uint32 card_guid = 4; //6
  bool is_quick = 5; //7
  GCGSkillPreviewInfo change_onstage_preview_info = 8; //12
}

message GCGSkillPreviewPlayCardInfo {
  uint32 target_card_guid = 9; //9
  uint32 hand_card_guid = 2; //15
  GCGSkillPreviewInfo play_card_info = 15; //6
}

message GCGSkillPreviewNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7368; //7503;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 controller_id = 3; //15
  repeated GCGSkillPreviewPlayCardInfo play_card_list = 9; //11
  repeated GCGSkillPreviewInfo skill_preview_list = 6; //9
  repeated GCGChangeOnstageInfo change_onstage_preview_list = 2; //1
  uint32 onstage_card_guid = 10; //5
}

message GCGSkillPreviewAskReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7943; //7509;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GCGSkillPreviewAskRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7069; //7409;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 7; //1
}

message GCGChallengeUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7731; //7268;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 server_seq = 9; //12
  GCGDuelChallenge challenge = 4; //13
}

message GCGBackToDuelReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7038; //7729;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_back = 13; //14
}

message GCGBackToDuelRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7304; //7416;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //1
}

message GCGDebugReplayNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7443; //7932;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  string json_str = 3; //9
}

message GCGGameMaxNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7537; //7666;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

}

message GCGGameCreateFailReasonNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7551; //7239;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  enum GCGGameCreateReason {
    REASON_NONE = 0;
    REASON_GAME_MAX = 1;
    REASON_CLIENT_VERSION_NOT_LASTEST = 2;
    REASON_RESOURCE_NOT_COMPLETE = 3;
    REASON_TIMEOUT = 4;
  }

  GCGGameCreateReason reason = 2; //15
}

message GCGDSDeckData {
  repeated uint32 card_list = 12; //1
  uint32 card_back_id = 2; //15
  repeated uint32 character_card_list = 14; //10
  string name = 3; //5
  uint32 id = 15; //3
  fixed32 create_time = 9; //13
  bool is_valid = 4; //4
  uint32 field_id = 6; //7
}

message GCGDSCardData {
  uint32 card_id = 7; //14
  uint32 face_type = 2; //6
  uint32 num = 4; //12
  repeated uint32 unlock_face_type_list = 10; //9
  repeated uint32 proficiency_reward_taken_idx_list = 15; //7
  uint32 proficiency = 12; //8
}

message GCGDSDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7558; //7122;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated GCGDSDeckData deck_list = 11; //4
  repeated uint32 unlock_card_back_id_list = 5; //5
  repeated uint32 unlock_field_id_list = 8; //6
  uint32 cur_deck_id = 2; //10
  repeated GCGDSCardData card_list = 7; //3
  repeated uint32 unlock_deck_id_list = 13; //1
}

message GCGDSCardBackUnlockNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7493; //7265;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 card_back_id = 9; //6
}

message GCGDSFieldUnlockNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7075; //7333;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 field_id = 8; //1
}

message GCGDSCardFaceUnlockNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7126; //7049;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 card_id = 6; //13
  uint32 face_type = 8; //1
}

message GCGDSCardNumChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7605; //7358;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 card_id = 6; //4
  uint32 num = 3; //10
}

message GCGDSChangeCardFaceReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7178; //7169;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 face_type = 9; //6
  uint32 card_id = 12; //3
}

message GCGDSChangeCardFaceRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7641; //7331;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 face_type = 13; //8
  uint32 card_id = 6; //4
  int32 retcode = 3; //9
}

message GCGDSChangeCardBackReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7628; //7292;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 deck_id = 1; //10
  uint32 card_back_id = 9; //12
}

message GCGDSChangeCardBackRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7569; //7044;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 4; //15
  uint32 card_back_id = 6; //6
  uint32 deck_id = 3; //5
}

message GCGDSChangeFieldReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7691; //7541;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 field_id = 2; //6
  uint32 deck_id = 15; //11
}

message GCGDSChangeFieldRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7818; //7444;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 6; //1
  uint32 field_id = 12; //3
  uint32 deck_id = 1; //2
}

message GCGDSChangeDeckNameReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7769; //7432;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 deck_id = 5; //13
  string name = 1; //7
}

message GCGDSChangeDeckNameRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7459; //7916;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 deck_id = 14; //13
  int32 retcode = 15; //14
  string name = 9; //1
}

message GCGDSDeckSaveReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7478; //7104;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 deck_id = 14; //1
  repeated uint32 card_list = 13; //4
  repeated uint32 character_card_list = 12; //9
  string name = 11; //14
}

message GCGDSDeckSaveRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7791; //7269;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  fixed32 create_time = 8; //14
  uint32 deck_id = 1; //11
  int32 retcode = 3; //8
  bool is_valid = 11; //4
}

message GCGDSChangeCurDeckReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7372; //7131;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 deck_id = 11; //3
}

message GCGDSChangeCurDeckRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7565; //7301;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 9; //8
  uint32 deck_id = 12; //14
}

message GCGDSCurDeckChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7023; //7796;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 deck_id = 7; //6
}

message GCGDSDeleteDeckReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7002; //7988;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 deck_id = 11; //15
}

message GCGDSDeleteDeckRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7399; //7524;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 10; //14
  uint32 deck_id = 14; //7
}

message GCGDSDeckUnlockNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7096; //7732;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 deck_id = 12; //15
}

message GCGDSCardProficiencyNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7895; //7680;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 proficiency = 4; //2
  uint32 card_id = 7; //12
}

message GCGDSDeckUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7267; //7305;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 deck_id = 3; //6
  bool is_valid = 4; //12
}

message GCGDSCardFaceUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7763; //7851;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 card_id = 1; //14
  uint32 face_type = 12; //15
}

message GCGDSTakeCardProficiencyRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7289; //7581;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 reward_index = 2; //7
  uint32 card_id = 14; //14
}

message GCGDSTakeCardProficiencyRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7198; //7889;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 11; //8
  uint32 reward_index = 12; //10
  uint32 card_id = 14; //7
}

message GCGDSBanCardNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7734; //7839;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 card_list = 3; //4
}

message GCGTCTavernInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7206; //7011;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_last_duel_win = 2; //14
  uint32 level_id = 7; //11
  bool is_owner_in_duel = 3; //5
  uint32 point_id = 15; //3
  uint32 avatar_id = 13; //12
  uint32 character_id = 5; //7
  uint32 element_type = 9; //10
}

message GCGTCInviteReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7579; //7922;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 2; //3
  uint32 character_id = 3; //6
}

message GCGTCInviteRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7188; //7328;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 character_id = 13; //12
  int32 retcode = 4; //5
}

message GCGTCTavernChallengeData {
  repeated uint32 unlock_level_id_list = 13; //1
  uint32 character_id = 1; //8
}

message GCGTCTavernChallengeDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7722; //7294;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated GCGTCTavernChallengeData tavern_challenge_list = 5; //13
}

message GCGTCTavernChallengeUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7570; //7184;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  GCGTCTavernChallengeData tavern_challenge = 10; //5
}

message GCGGrowthLevelNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7327; //7736;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 exp = 15; //7
  uint32 level = 5; //11
}

message GCGGrowthLevelRewardNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7338; //7477;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 level_reward_taken_list = 1; //8
}

message GCGGrowthLevelTakeRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7040; //7051;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level = 8; //4
}

message GCGGrowthLevelTakeRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7671; //7670;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 level = 6; //1
  int32 retcode = 13; //13
}

message GCGInviteGuestBattleReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7254; //7783;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 uid = 11; //11
}

message GCGInviteGuestBattleRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7465; //7251;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 15; //3
  uint32 confirm_end_time = 7; //2
  uint32 punish_end_time = 5; //9
  uint32 uid = 4; //11
}

message GCGInviteBattleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7482; //7692;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 confirm_end_time = 9; //10
}

message GCGApplyInviteBattleReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7300; //7730;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_agree = 7; //9
}

message GCGApplyInviteBattleRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7358; //7304;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 punish_end_time = 6; //7
  int32 retcode = 10; //5
}

message GCGApplyInviteBattleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7941; //7820;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_agree = 10; //14
  int32 retcode = 14; //6
}

message GCGWorldPlayerGCGStateReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7623; //7206;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GCGPlayerGCGState {
  bool is_reasouce_complete = 14; //7
  bool is_gcg_state_open = 11; //5
  uint32 uid = 15; //2
}

message GCGWorldPlayerGCGStateRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7280; //7136;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated GCGPlayerGCGState player_state = 5; //12
  int32 retcode = 2; //10
}

message GCGSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7773; //7769;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_win = 4; //13
  uint32 game_id = 7; //7
  GCGEndReason reason = 12; //3
  GCGGameBusinessType business_type = 3; //2
  repeated uint32 finished_challenge_id_list = 11; //6
  uint32 win_controller_id = 2; //15
  repeated uint32 forbid_finish_challenge_list = 14; //12
  repeated ItemParam reward_item_list = 9; //9
}

message GCGResourceStateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7894; //7876;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_complete = 2; //5
}

message GCGClientSettleReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7849; //7506;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GCGClientSettleRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7490; //7105;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 close_time = 7; //4
  int32 retcode = 14; //1
}

message GCGSettleOptionReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7511; //7124;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  GCGSettleOption option = 13; //5
}

message GCGSettleOptionRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7222; //7735;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  GCGSettleOption option = 6; //13
  int32 retcode = 2; //14
}

message GCGBasicDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7017; //7319;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 level = 1; //9
  uint32 exp = 11; //4
  repeated uint32 level_reward_taken_list = 8; //12
}

message GCGTavernNpcInfo {
  uint32 id = 6; //6
  uint32 level_id = 3; //10
  uint32 scene_point_id = 2; //3
}

message GCGTavernNpcInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7851; //7290;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated GCGTavernNpcInfo week_npc_list = 5; //1
  GCGTavernNpcInfo character_npc = 12; //5
  repeated GCGTavernNpcInfo const_npc_list = 15; //15
}

message GCGStartChallengeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7857; //7595;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  GCGLevelType level_type = 11; //5
  uint32 config_id = 15; //13
  uint32 level_id = 10; //12
}

message GCGStartChallengeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7351; //7763;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  GCGLevelType level_type = 6; //12
  int32 retcode = 14; //15
  uint32 config_id = 11; //6
  uint32 level_id = 5; //1
}

message GCGWeekChallengeInfo {
  uint32 npc_id = 14; //4
  bool is_finished = 12; //7
  uint32 unlock_time = 15; //1
}

message GCGWeekChallengeInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7890; //7615;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated GCGWeekChallengeInfo challenge_info_list = 8; //15
  uint32 next_refresh_time = 9; //7
  bool is_notify_npc_change = 7; //9
}

message GCGStartChallengeByCheckRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7187; //7778;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 7; //9
  uint32 config_id = 13; //13
  GCGLevelType level_type = 11; //5
}

message GCGStartChallengeByCheckRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7127; //7619;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  GCGLevelType level_type = 9; //11
  uint32 level_id = 10; //2
  int32 retcode = 11; //4
  repeated uint32 exceeded_item_list = 13; //1
  uint32 config_id = 8; //10
  repeated uint32 exceeded_item_type_list = 15; //14
}

message GCGLevelData {
  repeated uint32 finished_challenge_id_list = 4; //10
  uint32 level_id = 13; //9
}

message GCGBossChallengeData {
  uint32 id = 5; //9
  repeated uint32 unlock_level_id_list = 1; //14
}

message GCGLevelChallengeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7016; //7055;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated GCGBossChallengeData unlock_boss_challenge_list = 11; //3
  repeated uint32 unlock_world_challenge_list = 1; //8
  repeated GCGLevelData level_list = 13; //10
}

message GCGLevelChallengeFinishNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7360; //7629;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 finished_challenge_id_list = 1; //10
  uint32 level_id = 7; //15
}

message GCGWorldChallengeUnlockNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7273; //7204;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 unlock_id_list = 6; //8
}

message GCGBossChallengeUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7119; //7073;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  GCGBossChallengeData boss_challenge = 9; //11
}

message GCGLevelChallengeDeleteNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 7737; //7648;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 level_id_list = 14; //13
}

enum GCGSkillHpChangeType {
  GCG_SKILL_HP_CHANGE_NONE = 0;
  GCG_SKILL_HP_CHANGE_DAMAGE = 1;
  GCG_SKILL_HP_CHANGE_HEAL = 2;
}

enum GCGSettleOption {
  GCG_SETTLE_OPT_NONE = 0;
  GCG_SETTLE_OPT_EXIT = 1;
  GCG_SETTLE_OPT_CONTINUE = 2;
  GCG_SETTLE_OPT_RESTART = 3;
}

