syntax = "proto3";

package proto;
option go_package = "./;proto";


import "define.proto";

message InBattleMechanicusBuildingInfo {
  uint32 building_id = 6; //8
  uint32 level = 3; //7
  uint32 cost_points = 4; //2
  uint32 refund_points = 14; //11
}

message InBattleMechanicusPlayerInfo {
  uint32 pick_card_id = 15; //5
  uint32 uid = 6; //14
  repeated InBattleMechanicusBuildingInfo building_list = 12; //4
  bool is_card_confirmed = 9; //13
  uint32 building_points = 3; //3
}

message InBattleMechanicusMonsterInfo {
  uint32 monster_id = 10; //1
  uint32 level = 14; //14
  uint32 count = 3; //13
}

message InBattleMechanicusCardInfo {
  uint32 rand_effect_id = 8; //12
  uint32 end_round = 9; //3
  InBattleMechanicusCardChallengeState challenge_state = 5; //5
  uint32 cost_points = 2; //1
  uint32 card_id = 15; //11
  uint32 begin_round = 3; //8
}

message InBattleMechanicusInfo {
  uint32 left_monster = 7; //5
  uint32 wait_seconds = 3; //13
  repeated uint32 entrance_list = 1225; //410
  repeated uint32 exit_list = 595; //115
  repeated InBattleMechanicusCardInfo history_card_list = 14; //11
  uint32 max_escape_monster_num = 9; //10
  uint32 building_stage_duration = 13; //4
  uint64 duration_ms = 8; //8
  InBattleMechanicusStageType stage = 6; //9
  uint32 total_round = 11; //12
  repeated InBattleMechanicusMonsterInfo monster_list = 15; //14
  uint32 escaped_monster_num = 1; //6
  uint32 round = 10; //3
  repeated InBattleMechanicusCardInfo pick_card_list = 4; //15
  repeated InBattleMechanicusPlayerInfo player_list = 5; //7
  uint64 wait_begin_time_us = 12; //1
  uint64 begin_time_ms = 2; //2
}

message InBattleFleurFairInfo {
  repeated uint32 gallery_id_list = 10; //5
  uint32 gallery_stage_index = 4; //6
  uint32 preview_stage_index = 11; //8
  repeated uint32 ability_group_id_list = 15; //2
  uint32 preview_display_duration = 9; //12
}

message CharAmusementAvatarInfo {
  uint32 uid = 3; //11
  uint32 punish_time = 1; //7
  repeated uint32 avatar_id_list = 11; //10
}

message CharAmusementInfo {
  uint32 total_cost_time = 5; //11
  uint32 stage_id = 8; //2
  uint32 level_id = 6; //10
  uint32 preview_stage_index = 3; //4
  repeated CharAmusementAvatarInfo avatar_info_list = 11; //5
}

message BrickBreakerStageInfo {
  uint32 level_id = 12; //15
  BrickBreakerStageType stage_type = 7; //1
  repeated BrickBreakerPlayerBattleInfo battle_info_list = 2; //2
}

message CoinCollectStageInfo {
  uint32 level_id = 6; //3
  uint32 play_index = 12; //15
  repeated CoinCollectPlayerInfo player_info_list = 5; //9
}

message LanV3BoatStageInfo {
  repeated uint32 player_uid_list = 4; //2
  uint32 map_id = 15; //10
  bool is_single = 8; //13
}

message MultistagePlayInfo {
  uint32 play_index = 3; //13
  uint32 play_type = 10; //11
  uint32 stage_type = 9; //10
  uint32 duration = 15; //8
  uint32 group_id = 12; //12
  uint32 begin_time = 8; //9
  uint32 stage_index = 13; //1
  oneof detail {
    InBattleMechanicusInfo mechanicus_info = 1387; //1334
    InBattleFleurFairInfo fleur_fair_info = 2006; //1064
    HideAndSeekStageInfo hide_and_seek_info = 1418; //108
    InBattleChessInfo chess_info = 1939; //1758
    InBattleIrodoriChessInfo irodori_chess_info = 452; //531
    CharAmusementInfo char_amusement_info = 1200; //324
    BrickBreakerStageInfo brick_breaker_info = 1701; //1964
    CoinCollectStageInfo coin_collect_info = 1451; //1067
    LanV3BoatStageInfo lan_v3_boat_info = 424; //1801
  }
}

message MultistagePlayInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5305; //5372;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  MultistagePlayInfo info = 5; //13
}

message MultistagePlayFinishStageReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5355; //5398;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 group_id = 1; //12
  uint32 play_index = 3; //15
}

message InBattleMechanicusEscapeMonsterNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5320; //5307;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 escaped_monster_num = 2; //4
}

message InBattleMechanicusLeftMonsterNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5374; //5321;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 left_monster = 6; //14
}

message InBattleMechanicusBuildingPointsNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5380; //5303;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  map<uint32, uint32> player_building_points_map = 7; //4
}

message InBattleMechanicusPickCardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5370; //5390;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 group_id = 9; //11
  uint32 play_index = 4; //7
  uint32 card_id = 11; //1
}

message InBattleMechanicusPickCardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5362; //5373;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 4; //11
  uint32 card_id = 5; //2
  uint32 play_index = 15; //4
  uint32 group_id = 13; //9
}

message InBattleMechanicusPickCardNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5314; //5399;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 player_uid = 9; //6
  uint32 group_id = 5; //7
  uint32 play_index = 11; //8
  uint32 card_id = 8; //10
}

message InBattleMechanicusConfirmCardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5324; //5331;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 play_index = 4; //6
  uint32 card_id = 9; //1
  uint32 group_id = 15; //3
}

message InBattleMechanicusConfirmCardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5329; //5375;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 play_index = 11; //2
  uint32 card_id = 6; //14
  int32 retcode = 3; //11
  uint32 group_id = 12; //6
}

message InBattleMechanicusConfirmCardNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5378; //5348;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 play_index = 7; //11
  uint32 card_id = 1; //13
  uint32 group_id = 12; //10
  uint32 player_uid = 2; //2
}

message InBattleMechanicusCardResultNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5316; //5397;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 wait_seconds = 9; //6
  uint32 group_id = 15; //2
  repeated InBattleMechanicusCardInfo card_list = 5; //9
  uint64 wait_begin_time_us = 4; //7
  map<uint32, uint32> player_confirmed_card_map = 12; //12
  uint32 play_index = 10; //8
}

message MultistagePlayFinishStageRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5313; //5381;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //11
  uint32 group_id = 12; //12
  uint32 play_index = 7; //6
}

message MultistageSettleWatcherInfo {
  uint32 total_progress = 8; //13
  uint32 cur_progress = 1; //5
  uint32 watcher_id = 5; //7
  bool is_inverse = 10; //12
}

message InBattleMechanicusSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5369; //5305;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 group_id = 9; //15
  uint64 scene_time_ms = 10; //11
  uint32 difficulty_percentage = 13; //6
  uint32 total_token = 1; //7
  repeated MultistageSettleWatcherInfo watcher_list = 7; //3
  uint32 real_token = 15; //13
  bool is_success = 8; //2
  uint32 play_index = 12; //14
}

message InBattleMechanicusSettleInfo {
  uint64 scene_time_ms = 15; //15
  uint32 total_token = 7; //4
  uint32 real_token = 1; //8
  repeated MultistageSettleWatcherInfo watcher_list = 4; //7
  bool is_success = 6; //6
  uint32 play_index = 13; //3
  uint32 difficulty_percentage = 11; //10
  uint32 group_id = 12; //13
}

message MultistagePlaySettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5347; //5313;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 play_index = 15; //14
  uint32 group_id = 1; //4
  oneof detail {
    InBattleMechanicusSettleInfo mechanicus_settle_info = 1241; //1402
    InBattleChessSettleInfo chess_settle_info = 200; //1283
    InBattleIrodoriChessSettleInfo irodori_chess_settle_info = 96; //612
  }
}

message MultistagePlayStageEndNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5341; //5379;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 group_id = 9; //15
  uint32 play_index = 14; //9
}

message MultistagePlayEndNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5393; //5355;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 group_id = 2; //5
  uint32 play_index = 3; //13
}

message FleurFairBuffEnergyNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5353; //5324;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 energy = 1; //4
}

message FleurFairGallerySettleInfo {

  uint32 energy = 7; //2
  uint32 gallery_stage_index = 15; //11
  map<uint32, int32> energy_stat_map = 9; //6
  uint32 gallery_stage_count = 14; //9
  bool is_success = 5; //1
}

message FleurFairPlayerStatInfo {
  string online_id = 3; //11
  uint32 uid = 13; //8
  ProfilePicture profile_picture = 14; //1
  uint32 stat_id = 2; //3
  uint32 head_image = 8; //6
  string nick_name = 5; //15
  int32 param = 4; //5
}

message FleurFairBossSettleInfo {
  uint32 reward_token_num = 4; //15
  repeated FleurFairPlayerStatInfo stat_info_list = 3; //1
  bool is_success = 6; //10
  uint32 energy = 8; //12
  uint32 cost_time = 2; //8
}

message FleurFairStageSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5336; //5356;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 stage_type = 9; //10
  oneof detail {
    FleurFairGallerySettleInfo gallery_settle_info = 10; //13
    FleurFairBossSettleInfo boss_settle_info = 8; //14
  }
}

message FleurFairFinishGalleryStageNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5394; //5342;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

}

message HideAndSeekPlayerBattleInfo {
  uint32 costume_id = 5; //3
  repeated uint32 skill_list = 3; //15
  bool is_ready = 13; //12
  uint32 avatar_id = 11; //6
}

message HideAndSeekStageInfo {

  uint32 map_id = 8; //8
  bool is_record_score = 15; //3
  HideAndSeekStageType stage_type = 1; //7
  map<uint32, HideAndSeekPlayerBattleInfo> battle_info_map = 12; //2
  repeated uint32 hider_uid_list = 9; //1
  uint32 hunter_uid = 11; //10
}

message HideAndSeekSelectAvatarReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5381; //5330;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 avatar_id = 4; //8
}

message HideAndSeekSelectAvatarRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5364; //5367;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 14; //2
  uint32 avatar_id = 10; //3
}

message HideAndSeekSetReadyReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5383; //5358;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message HideAndSeekSetReadyRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5379; //5370;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 13; //11
}

message HideAndSeekSettleInfo {
  uint32 uid = 1; //2
  ProfilePicture profile_picture = 5; //1
  repeated ExhibitionDisplayInfo card_list = 2; //8
  string nickname = 9; //3
  uint32 head_image = 3; //4
  string online_id = 10; //10
}

message HideAndSeekSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5327; //5317;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  enum SettleReason {
    SETTLE_REASON_TIME_OUT = 0;
    SETTLE_PLAY_END = 1;
    SETTLE_PLAYER_QUIT = 2;
  }

  uint32 cost_time = 10; //2
  repeated HideAndSeekSettleInfo settle_info_list = 4; //8
  repeated uint32 winner_list = 9; //15
  SettleReason reason = 1; //4
  uint32 play_index = 13; //13
  bool is_record_score = 5; //6
  repeated ExhibitionDisplayInfo score_list = 7; //9
  uint32 stage_type = 11; //14
}

message HideAndSeekPlayerReadyNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5363; //5302;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 uid_list = 12; //5
}

message HideAndSeekPlayerSetAvatarNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5323; //5319;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 avatar_id = 10; //2
  uint32 costume_id = 9; //13
  uint32 uid = 2; //5
}

message ChessCardInfo {
  uint32 effect_stack = 12; //12
  uint32 card_id = 11; //11
}

message InBattleChessInfo {

  repeated uint32 ban_card_tag_list = 11; //2
  uint32 round = 2; //4
  repeated ChessCardInfo selected_card_info_list = 1; //9
  ChessMysteryInfo mystery_info = 10; //1
  map<uint32, ChessPlayerInfo> player_info_map = 15; //8
  uint32 max_escapable_monsters = 12; //6
  uint32 escaped_monsters = 9; //12
  uint32 total_round = 14; //14
  uint32 left_monsters = 3; //15
}

message InBattleChessSettleInfo {
  bool is_success = 2; //7
  uint32 chess_exp = 3; //11
  uint32 chess_level = 10; //13
  uint32 old_chess_level = 15; //10
  repeated ExhibitionDisplayInfo score_list = 1; //1
  uint64 scene_time_ms = 11; //14
  uint32 old_chess_exp = 9; //2
}

message ChessPlayerInfo {
  uint32 uid = 11; //5
  uint32 free_refresh_limit = 2; //10
  repeated ChessNormalCardInfo candidate_card_info_list = 6; //3
  uint32 building_points = 13; //12
  uint32 candidate_index = 12; //6
  uint32 free_refresh_count = 3; //13
  uint32 refresh_cost = 8; //7
}

message ChessMonsterInfo {
  uint32 monster_id = 9; //12
  uint32 level = 2; //2
  repeated uint32 affix_list = 3; //13
}

message ChessEntranceInfo {
  repeated ChessMonsterInfo monster_info_list = 7; //14
  uint32 entrance_index = 9; //15
  uint32 entrance_point_id = 6; //8
}

message ChessEntranceDetailInfo {
  repeated ChessEntranceInfo info_list = 6; //4
}

message ChessMysteryInfo {


  map<uint32, uint32> entrance_point_map = 11; //13
  repeated uint32 exit_point_id_list = 2; //3
  map<uint32, ChessEntranceDetailInfo> detail_info_map = 5; //5
}

message ChessNormalCardInfo {
  uint32 card_id = 6; //2
  uint32 cost_points = 2; //15
  bool is_attach_curse = 9; //6
}

message ChessPickCardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5391; //5333;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 card_id = 3; //1
  uint32 card_index = 9; //4
}

message ChessPickCardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5360; //5384;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 card_index = 10; //11
  uint32 card_id = 8; //1
  int32 retcode = 7; //4
}

message ChessPickCardNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5304; //5380;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 curse_card_id = 5; //13
  ChessNormalCardInfo normal_card_info = 7; //1
}

message ChessManualRefreshCardsReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5361; //5389;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message ChessManualRefreshCardsRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5365; //5359;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //12
}

message ChessPlayerInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5326; //5332;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  ChessPlayerInfo player_info = 15; //10
}

message ChessLeftMonstersNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5377; //5360;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 left_monsters = 8; //6
}

message ChessEscapedMonstersNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5312; //5314;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 escaped_monsters = 10; //14
}

message ChessSelectedCardsNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5334; //5392;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated ChessCardInfo selected_card_info_list = 9; //4
}

message GlobalBuildingInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5389; //5320;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 current_num = 8; //5
  repeated BuildingInfo building_list = 3; //3
  uint32 max_num = 4; //13
}

message InBattleIrodoriChessInfo {
  IrodoriChessMysteryInfo mystery_info = 10; //3
  uint32 left_monsters = 11; //12
  repeated uint32 selected_card_id_list = 3; //13
  uint32 building_points = 6; //7
  uint32 settle_score = 8; //4
}

message IrodoriChessMonsterInfo {
  uint32 grant_points = 14; //6
  uint32 level = 13; //13
  uint32 monster_id = 12; //14
  repeated uint32 affix_list = 1; //11
}

message IrodoriChessEntranceInfo {
  repeated IrodoriChessMonsterInfo monster_info_list = 8; //6
  uint32 entrance_point_id = 10; //4
}

message IrodoriChessEntranceDetailInfo {
  repeated IrodoriChessEntranceInfo info_list = 2; //15
}

message IrodoriChessMysteryInfo {
  IrodoriChessEntranceDetailInfo entrance_detail_info = 8; //5
  repeated uint32 entrance_point_id_list = 2; //2
  repeated uint32 exit_point_id_list = 5; //13
}

message InBattleIrodoriChessSettleInfo {
  bool is_new_record = 12; //5
  bool is_activity_end = 10; //2
  uint64 scene_time_ms = 14; //1
  uint32 settle_score = 15; //3
  bool is_perfect = 5; //12
  uint32 kill_monster_num = 2; //7
}

message IrodoriChessPlayerInfo {
  uint32 uid = 9; //4
  uint32 building_points = 8; //9
  uint32 settle_score = 4; //3
}

message IrodoriChessPlayerInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5338; //5364;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  IrodoriChessPlayerInfo player_info = 13; //6
}

message IrodoriChessLeftMonsterNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5340; //5338;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 left_monsters = 6; //8
}

message BrickBreakerPlayerBattleInfo {
  repeated uint32 skill_list = 9; //10
  bool is_ready = 6; //14
  bool is_changing = 14; //11
  uint32 uid = 3; //15
  repeated uint32 avatar_id = 5; //9
  repeated uint32 costume_id = 12; //13
  string nickname = 15; //3
}

message BrickBreakerPlayerReadyNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5332; //5345;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 uid_list = 9; //14
}

message BrickBreakerPlayerSetAvatarNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5368; //5308;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 avatar_id_list = 13; //8
  repeated uint32 costume_id_list = 6; //11
  uint32 uid = 3; //9
}

message BrickBreakerPlayerSetSkillNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5333; //5309;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 uid = 12; //8
  repeated uint32 skill_id_list = 5; //14
}

message BrickBreakerSetReadyReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5386; //5352;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message BrickBreakerSetReadyRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5348; //5377;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 13; //2
}

message BrickBreakerSelectAvatarReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5397; //5337;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 avatar_id = 13; //2
}

message BrickBreakerSelectAvatarRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5302; //5385;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 avatar_id = 13; //8
  int32 retcode = 9; //4
}

message BrickBreakerSelectSkillReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5319; //5325;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 skill_id = 15; //6
}

message BrickBreakerSelectSkillRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5321; //5378;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 9; //10
  repeated uint32 skill_id = 6; //11
}

message BrickBreakerSetChangingReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5371; //5336;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_changing = 13; //11
}

message BrickBreakerSetChangingRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5308; //5354;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 12; //2
}

message BrickBreakerPlayerSetChangingNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 5366; //5383;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 uid = 9; //15
  bool is_changing = 1; //7
}

message CoinCollectTeamAvatarInfo {
  uint32 costume_id = 15; //4
  uint32 avatar_id = 8; //10
}

message CoinCollectPlayerInfo {
  uint32 choose_skill_no = 10; //5
  uint32 player_uid = 5; //12
  string player_name = 4; //11
  bool is_prepare = 8; //14
  repeated CoinCollectTeamAvatarInfo avatar_info_list = 14; //10
}

message CoinCollectPrepareStageNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6441; //6536;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  CoinCollectStageInfo coin_collect_info = 7; //3
}

message LanV3BoatSettleInfo {
  uint32 uid = 7; //8
  string online_id = 2; //13
  uint32 head_image = 15; //10
  string nickname = 14; //14
  ProfilePicture profile_picture = 11; //12
  repeated ExhibitionDisplayInfo card_list = 5; //1
}

message LanV3BoatSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6566; //6539;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_gallery_succ = 3; //10
  repeated uint32 winner_uid_list = 9; //2
  bool is_single = 13; //8
  uint32 stage_type = 5; //12
  repeated ExhibitionDisplayInfo score_list = 14; //1
  repeated LanV3BoatSettleInfo settle_info_list = 7; //13
  uint32 play_index = 12; //4
}

enum MultistagePlayType {
  MULTISTAGE_PLAY_TYPE_NON = 0;
  MULTISTAGE_PLAY_TYPE_MECHANICUS = 1;
  MULTISTAGE_PLAY_TYPE_FLEUR_FAIR = 2;
  MULTISTAGE_PLAY_TYPE_HIDE_AND_SEEK = 3;
  MULTISTAGE_PLAY_TYPE_BOUNCE_CONJURING = 4;
  MULTISTAGE_PLAY_TYPE_CHESS = 5;
  MULTISTAGE_PLAY_TYPE_IRODORI_CHESS = 6;
  MULTISTAGE_PLAY_TYPE_CHAR_AMUSEMENT = 7;
  MULTISTAGE_PLAY_TYPE_BRICK_BREAKER = 8;
  MULTISTAGE_PLAY_TYPE_COIN_COLLECT = 9;
  MULTISTAGE_PLAY_TYPE_LAN_V3_BOAT = 10;
}

enum InBattleMechanicusStageType {
  IN_BATTLE_MECHANICUS_STAGE_NONE = 0;
  IN_BATTLE_MECHANICUS_STAGE_BUILD = 1;
  IN_BATTLE_MECHANICUS_STAGE_CARD_FLIP = 2;
  IN_BATTLE_MECHANICUS_STAGE_KILL = 3;
}

enum InBattleMechanicusCardChallengeState {
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_NONE = 0;
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_ON_GOING = 1;
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_FAIL = 2;
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_SUCCESS = 3;
}

enum HideAndSeekStageType {
  HIDE_AND_SEEK_STAGE_PREPARE = 0;
  HIDE_AND_SEEK_STAGE_PICK = 1;
  HIDE_AND_SEEK_STAGE_GAME = 2;
  HIDE_AND_SEEK_STAGE_HIDE = 3;
  HIDE_AND_SEEK_STAGE_SEEK = 4;
  HIDE_AND_SEEK_STAGE_SETTLE = 5;
}

enum BrickBreakerStageType {
  BRICK_BREAKER_STAGE_PREPARE = 0;
  BRICK_BREAKER_STAGE_PICK = 1;
  BRICK_BREAKER_STAGE_GAME = 2;
  BRICK_BREAKER_STAGE_PLAY = 3;
  BRICK_BREAKER_STAGE_SETTLE = 4;
}

enum LanV3BoatKickReason {
  LAN_V3_KICK_REASON_NONE = 0;
  LAN_V3_KICK_REASON_EXIT_VEHICLE = 1;
  LAN_V3_KICK_REASON_AVATAR_DIE = 2;
  LAN_V3_KICK_REASON_SLOW_ENTER = 3;
}

