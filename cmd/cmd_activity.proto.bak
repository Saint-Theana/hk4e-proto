syntax = "proto3";

package proto;
option go_package = "./;proto";


import "define.proto";
import "cmd/cmd_gallery.proto";
import "cmd/cmd_ugc.proto";
import "cmd/cmd_multistage_play.proto";

message GetActivityScheduleReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2041; //2136;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message ActivityScheduleInfo {
  uint32 schedule_id = 13; //13
  bool is_open = 7; //2
  uint32 activity_id = 12; //14
  uint32 end_time = 9; //1
  uint32 begin_time = 2; //10
}

message GetActivityScheduleRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2015; //2107;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated ActivityScheduleInfo activity_schedule_list = 12; //9
  int32 retcode = 9; //13
  uint32 remain_fly_sea_lamp_num = 10; //4
}

message GetActivityInfoReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2098; //2095;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 activity_id_list = 15; //4
}

message ActivityInfo {


  bool is_finished = 3; //6
  uint32 activity_type = 10; //4
  uint32 begin_time = 5; //8
  repeated uint32 taken_reward_list = 644; //329
  bool is_hidden = 1126; //919
  bool is_quick_open = 1637; //1449
  repeated uint32 meet_cond_list = 2; //10
  map<uint32, uint32> activity_coin_map = 406; //682
  bool is_banner_cleared = 537; //102
  uint32 cur_score = 396; //1906
  uint32 first_day_start_time = 598; //592
  uint32 activity_id = 15; //12
  bool is_play_open_anim = 7; //13
  uint32 end_time = 12; //5
  uint32 score_limit = 1497; //1958
  map<uint32, uint32> wish_gift_num_map = 1052; //1399
  uint32 selected_avatar_reward_id = 519; //1290
  bool is_common_content_closed = 754; //1963
  repeated uint32 expire_cond_list = 9; //3
  repeated ActivityPushTipsData activity_push_tips_data_list = 336; //864
  repeated ActivityWatcherInfo watcher_info_list = 14; //2
  uint32 schedule_id = 6; //15
  bool is_starting = 11; //9
  oneof detail {
    SeaLampActivityDetailInfo sam_lamp_info = 4; //7
    CrucibleActivityDetailInfo crucible_info = 13; //14
    SalesmanActivityDetailInfo salesman_info = 1; //11
    TrialAvatarActivityDetailInfo trial_avatar_info = 8; //1
    DeliveryActivityDetailInfo delivery_info = 32; //1092
    AsterActivityDetailInfo aster_info = 1808; //557
    FlightActivityDetailInfo flight_info = 1062; //1365
    DragonSpineActivityDetailInfo dragon_spine_info = 378; //1727
    EffigyActivityDetailInfo effigy_info = 1991; //391
    TreasureMapActivityDetailInfo treasure_map_info = 546; //1114
    BlessingActivityDetailInfo blessing_info = 1198; //1869
    SeaLampActivityInfo sea_lamp_info = 578; //494
    ExpeditionActivityDetailInfo expedition_info = 930; //202
    ArenaChallengeActivityDetailInfo arena_challenge_info = 699; //859
    FleurFairActivityDetailInfo fleur_fair_info = 1116; //857
    WaterSpiritActivityDetailInfo water_spirit_info = 1651; //1675
    ChannelerSlabActivityDetailInfo challneler_slab_info = 1135; //1015
    MistTrialActivityDetailInfo mist_trial_activity_info = 1320; //156
    HideAndSeekActivityDetailInfo hide_and_seek_info = 1077; //427
    FindHilichurlDetailInfo find_hilichurl_info = 417; //1411
    SummerTimeDetailInfo summer_time_info = 1477; //1372
    BuoyantCombatDetailInfo buoyant_combat_info = 1277; //1842
    EchoShellDetailInfo echo_shell_info = 1172; //1113
    BounceConjuringActivityDetailInfo bounce_conjuring_info = 278; //767
    BlitzRushActivityDetailInfo blitz_rush_info = 192; //794
    ChessActivityDetailInfo chess_info = 1797; //927
    SumoActivityDetailInfo sumo_info = 1379; //1261
    MoonfinTrialActivityDetailInfo moonfin_trial_info = 1122; //1588
    LunaRiteDetailInfo luna_rite_info = 82; //814
    PlantFlowerActivityDetailInfo plant_flower_info = 1864; //54
    MusicGameActivityDetailInfo music_game_info = 1220; //460
    RoguelikeDungeonActivityDetailInfo roguelike_dungoen_info = 1817; //219
    DigActivityDetailInfo dig_info = 168; //403
    HachiActivityDetailInfo hachi_info = 1663; //491
    WinterCampActivityDetailInfo winter_camp_info = 114; //1083
    PotionActivityDetailInfo potion_info = 1552; //1273
    TanukiTravelActivityDetailInfo tanuki_travel_activity_info = 1453; //1796
    LanternRiteActivityDetailInfo lantern_rite_activity_info = 1372; //1876
    MichiaeMatsuriActivityDetailInfo michiae_matsuri_info = 428; //194
    BartenderActivityDetailInfo bartender_info = 35; //1725
    UgcActivityDetailInfo ugc_info = 589; //703
    CrystalLinkActivityDetailInfo crystal_link_info = 1375; //1226
    IrodoriActivityDetailInfo irodori_info = 1014; //750
    PhotoActivityDetailInfo photo_info = 309; //328
    SpiceActivityDetailInfo spice_info = 1446; //1891
    GachaActivityDetailInfo gacha_info = 1177; //825
    LuminanceStoneChallengeActivityDetailInfo luminance_stone_challenge_info = 142; //1308
    RogueDiaryActivityDetailInfo rogue_diary_info = 397; //812
    SummerTimeV2DetailInfo summer_time_v2_info = 951; //622
    IslandPartyDetailInfo island_party_info = 1631; //1885
    GearActivityDetailInfo gear_info = 1801; //722
    GravenInnocenceDetailInfo graven_innocence_info = 1173; //1911
    InstableSprayDetailInfo instable_spray_info = 944; //1043
    MuqadasPotionActivityDetailInfo muqadas_potion_info = 1350; //1157
    TreasureSeelieActivityDetailInfo treasure_seelie_info = 1142; //966
    RockBoardExploreDetailInfo rock_board_explore_info = 1273; //1078
    VintageActivityDetailInfo vintage_info = 1316; //445
    WindFieldDetailInfo wind_field_info = 2029; //352
    FungusFighterDetailInfo fungus_fighter_info = 1543; //490
    CharAmusementDetailInfo char_amusement_info = 504; //1496
    EffigyChallengeV2DetailInfo effigy_challenge_info = 1144; //1025
    CoinCollectDetailInfo coin_collect_info = 559; //1679
    BrickBreakerDetailInfo brick_breaker_info = 1275; //1369
    DuelHeartDetailInfo duel_heart_info = 221; //1173
    SeaLampV3DetailInfo sea_lamp_v3_info = 1080; //251
    TeamChainDetailInfo team_chain_info = 144; //1547
    ElectroherculesBattleDetailInfo electrohercules_battle_info = 172; //1630
  }
}

message GetActivityInfoRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2073; //2041;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 14; //13
  repeated ActivityInfo activity_info_list = 13; //5
  repeated uint32 activated_sale_id_list = 7; //11
  repeated Uint32Pair disable_transfer_point_interaction_list = 3; //10
}

message ActivityPlayOpenAnimNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2178; //2157;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 activity_id = 15; //8
}

message ActivityInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2136; //2060;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  ActivityInfo activity_info = 3; //9
}

message ActivityScheduleInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2047; //2073;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated ActivityScheduleInfo activity_schedule_list = 5; //12
  uint32 remain_fly_sea_lamp_num = 11; //6
}

message ActivityWatcherInfo {
  bool is_taken_reward = 12; //8
  uint32 cur_progress = 8; //2
  uint32 total_progress = 1; //4
  uint32 watcher_id = 10; //5
}

message ActivityTakeWatcherRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2124; //2038;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 activity_id = 11; //4
  uint32 watcher_id = 6; //14
}

message ActivityTakeWatcherRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2009; //2034;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 activity_id = 3; //14
  uint32 watcher_id = 5; //7
  int32 retcode = 9; //9
}

message ActivityUpdateWatcherNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2079; //2156;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  ActivityWatcherInfo watcher_info = 11; //2
  uint32 activity_id = 3; //1
}

message ActivitySelectAvatarCardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2085; //2028;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 activity_id = 1; //15
  uint32 reward_id = 8; //10
}

message ActivitySelectAvatarCardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2154; //2189;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 activity_id = 1; //4
  int32 retcode = 5; //3
  uint32 reward_id = 14; //9
}

message ActivityCoinInfoNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2055; //2008;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 15; //8
  uint32 activity_id = 7; //10
  map<uint32, uint32> activity_coin_map = 14; //2
}

message SeaLampActivityDetailInfo {
  uint32 phase_id = 7; //14
  repeated uint32 taken_phase_reward_list = 14; //1
  repeated uint32 taken_contribution_reward_list = 15; //7
  uint32 progress = 3; //8
  uint32 contribution = 9; //15
  uint32 factor = 10; //13
  uint32 days = 11; //4
}

message SeaLampFlyLampReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2193; //2199;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 item_id = 4; //9
  int32 param = 15; //10
  Vector pos = 14; //7
  uint32 item_num = 1; //5
}

message SeaLampFlyLampRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2127; //2192;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 item_num = 13; //9
  uint32 item_id = 2; //15
  int32 retcode = 3; //14
}

message SeaLampTakeContributionRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2022; //2019;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 activity_id = 12; //4
  uint32 config_id = 7; //10
}

message SeaLampTakeContributionRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2101; //2177;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 config_id = 14; //9
  int32 retcode = 13; //7
}

message SeaLampTakePhaseRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2119; //2176;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 phase_id = 4; //12
  uint32 activity_id = 1; //11
}

message SeaLampTakePhaseRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2187; //2190;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 phase_id = 8; //2
  int32 retcode = 3; //6
}

message SeaLampContributeItemReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2110; //2123;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 activity_id = 12; //8
  repeated ItemParam item_list = 13; //1
}

message SeaLampContributeItemRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2166; //2139;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 add_contribution = 2; //7
  uint32 add_progress = 4; //1
  uint32 total_contribution = 9; //14
  int32 retcode = 12; //6
}

message SeaLampSectionInfo {
  uint32 section_id = 13; //11
}

message SeaLampActivityInfo {
  bool is_mechanicus_open = 3; //14
  uint32 day_index = 4; //1
  repeated SeaLampSectionInfo section_info_list = 2; //6
  uint32 popularity = 5; //10
  uint32 sea_lamp_coin = 6; //15
  uint32 first_day_start_time = 10; //11
  uint32 mechanicus_id = 12; //9
  bool is_mechanicus_feature_close = 14; //12
  bool is_content_closed = 1; //5
}

message SeaLampFlyLampNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2014; //2105;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  Vector pos = 5; //11
  uint32 item_num = 7; //10
  uint32 item_id = 3; //7
  int32 param = 10; //5
}

message SeaLampCoinNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2197; //2114;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 sea_lamp_coin = 6; //8
}

message SeaLampPopularityNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2076; //2032;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 popularity = 2; //4
}

message AnnounceData {
  string count_down_text = 7; //9
  string center_system_text = 2; //8
  uint32 count_down_frequency = 14; //1
  uint32 config_id = 9; //7
  uint32 begin_time = 4; //4
  uint32 center_system_frequency = 8; //11
  string dungeon_confirm_text = 13; //2
  bool is_center_system_last_5_every_minutes = 12; //14
  uint32 end_time = 5; //10
}

message LoadActivityTerrainNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2006; //2029;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 activity_id = 3; //3
}

message ServerAnnounceNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2148; //2197;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated AnnounceData announce_data_list = 1; //11
}

message ServerAnnounceRevokeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2140; //2092;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 config_id_list = 12; //15
}

message ActivityBannerNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2005; //2155;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 11; //1
  uint32 activity_id = 6; //3
}

message ActivityBannerClearReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2198; //2009;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 6; //15
  uint32 activity_id = 3; //12
}

message ActivityBannerClearRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2143; //2163;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 activity_id = 14; //4
  int32 retcode = 2; //6
  uint32 schedule_id = 1; //11
}

message SalesmanActivityDetailInfo {

  uint32 special_reward_preview_id = 6; //3
  SalesmanStatusType status = 4; //4
  uint32 last_deliver_time = 7; //2
  map<uint32, uint32> selected_reward_id_map = 13; //5
  uint32 deliver_count = 9; //11
  bool is_has_taken_special_reward = 5; //7
  uint32 day_index = 8; //12
  uint32 cond_day_count = 11; //6
  uint32 day_reward_id = 2; //9
  bool is_today_has_delivered = 15; //13
}

message SalesmanDeliverItemReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2117; //2138;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 9; //4
}

message SalesmanDeliverItemRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2096; //2104;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 1; //9
  int32 retcode = 10; //15
}

message SalesmanTakeRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2060; //2191;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 position = 10; //8
  uint32 schedule_id = 7; //7
}

message SalesmanTakeRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2034; //2110;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 position = 6; //13
  uint32 schedule_id = 5; //7
  uint32 reward_id = 14; //9
  int32 retcode = 7; //11
}

message ActivityCondStateChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2089; //2140;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 activated_sale_id_list = 1; //9
  uint32 activity_id = 3; //4
  uint32 schedule_id = 15; //5
  repeated uint32 expire_cond_list = 2; //11
  repeated Uint32Pair disable_transfer_point_interaction_list = 8; //12
  repeated uint32 meet_cond_list = 13; //1
}

message SalesmanTakeSpecialRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2182; //2145;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 15; //13
}

message SalesmanTakeSpecialRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2103; //2124;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //12
  uint32 schedule_id = 7; //5
}

message GetAuthSalesmanInfoReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2108; //2070;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 8; //8
}

message GetAuthSalesmanInfoRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2113; //2004;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 day_reward_id = 13; //5
  int32 retcode = 6; //6
  uint32 schedule_id = 14; //11
}

message TrialAvatarActivityRewardDetailInfo {
  bool passed_dungeon = 14; //2
  uint32 trial_avatar_index_id = 5; //4
  bool received_reward = 2; //5
  uint32 reward_id = 7; //7
}

message TrialAvatarActivityDetailInfo {
  repeated TrialAvatarActivityRewardDetailInfo reward_info_list = 10; //13
}

message EnterTrialAvatarActivityDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2167; //2118;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 enter_point_id = 13; //10
  uint32 trial_avatar_index_id = 4; //5
  uint32 activity_id = 3; //14
}

message EnterTrialAvatarActivityDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2046; //2183;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 11; //11
  uint32 trial_avatar_index_id = 8; //13
  uint32 activity_id = 2; //10
}

message ReceivedTrialAvatarActivityRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2106; //2130;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 trial_avatar_index_id = 3; //4
}

message ReceivedTrialAvatarActivityRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2074; //2076;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 activity_id = 12; //13
  int32 retcode = 5; //3
  uint32 trial_avatar_index_id = 4; //9
}

message TrialAvatarFirstPassDungeonNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2175; //2013;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 trial_avatar_index_id = 9; //10
}

message TrialAvatarInDungeonIndexNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2078; //2186;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 trial_avatar_index_id = 9; //14
}

message CrucibleBattleUidInfo {
  ProfilePicture profile_picture = 11; //15
  uint32 uid = 2; //4
  string nickname = 4; //5
  string online_id = 6; //13
  uint32 icon = 5; //11
}

message CrucibleActivityDetailInfo {
  uint32 cost_time = 7; //5
  uint32 battle_world_level = 12; //12
  repeated CrucibleBattleUidInfo uid_info_list = 9; //3
  Vector pos = 6; //9
}

message DeliveryActivityDetailInfo {
  uint32 day_index = 6; //14
  bool is_taken_reward = 4; //13
  repeated uint32 finished_delivery_quest_index = 7; //4
}

message TakeDeliveryDailyRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2013; //2121;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 15; //9
}

message TakeDeliveryDailyRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2158; //2162;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 12; //5
  int32 retcode = 7; //7
}

message FinishDeliveryNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2044; //2089;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 finished_quest_index = 4; //1
  uint32 schedule_id = 8; //10
  uint32 day_index = 2; //12
}

message AsterLittleDetailInfo {
  bool is_open = 12; //4
  AsterLittleStageState stage_state = 9; //7
  uint32 stage_id = 6; //1
  uint32 begin_time = 11; //6
  uint32 stage_begin_time = 13; //5
}

message AsterMidCampInfo {
  Vector pos = 10; //3
  uint32 camp_id = 14; //8
}

message AsterMidDetailInfo {
  uint32 begin_time = 13; //10
  repeated AsterMidCampInfo camp_list = 2; //7
  bool is_open = 10; //4
  uint32 collect_count = 4; //11
}

message AsterLargeDetailInfo {
  bool is_open = 3; //3
  uint32 begin_time = 7; //13
}

message AsterProgressDetailInfo {
  uint32 last_auto_add_time = 14; //3
  uint32 count = 8; //1
}

message AsterActivityDetailInfo {
  AsterLittleDetailInfo aster_little = 3; //7
  uint32 aster_credit = 10; //14
  AsterLargeDetailInfo aster_large = 2; //9
  bool is_special_reward_taken = 9; //1
  bool is_content_closed = 15; //13
  uint32 content_close_time = 14; //8
  uint32 aster_token = 8; //5
  AsterMidDetailInfo aster_mid = 4; //6
  AsterProgressDetailInfo aster_progress = 7; //2
}

message SelectAsterMidDifficultyReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2128; //2134;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 gadget_entity_id = 7; //13
  uint32 schedule_id = 2; //1
  uint32 difficulty_id = 14; //5
}

message SelectAsterMidDifficultyRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2139; //2180;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //15
  uint32 schedule_id = 8; //2
  uint32 gadget_entity_id = 11; //5
  uint32 difficulty_id = 3; //14
}

message AsterProgressInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2091; //2016;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  AsterProgressDetailInfo info = 7; //1
}

message AsterLittleInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2063; //2068;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  AsterLittleDetailInfo info = 7; //1
}

message AsterMidInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2007; //2031;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  AsterMidDetailInfo info = 8; //4
}

message AsterMiscInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2165; //2036;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 aster_token = 7; //2
  uint32 aster_credit = 8; //15
}

message TakeAsterSpecialRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2093; //2097;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 6; //5
}

message TakeAsterSpecialRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2075; //2193;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //12
  uint32 schedule_id = 10; //14
}

message AsterLargeInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2185; //2146;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  AsterLargeDetailInfo info = 12; //10
}

message FlightDailyRecord {
  uint32 group_id = 14; //4
  bool is_touched = 8; //1
  repeated uint32 watcher_id_list = 6; //11
  uint32 best_score = 3; //7
  uint32 start_time = 15; //3
}

message FlightActivityDetailInfo {
  uint32 preview_reward_id = 7; //15
  uint32 min_open_player_level = 2; //11
  repeated FlightDailyRecord daily_record_list = 5; //1
}

message FlightActivitySettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2169; //2195;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_new_record = 15; //1
  uint32 medal_level = 9; //6
  uint32 left_time = 5; //13
  uint32 collect_num = 2; //9
  uint32 total_num = 3; //5
  uint32 group_id = 10; //8
  uint32 score = 12; //10
  bool is_success = 13; //4
}

message FlightActivityRestartReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2017; //2037;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 group_id = 15; //4
  uint32 schedule_id = 14; //10
}

message FlightActivityRestartRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2071; //2165;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 group_id = 12; //11
  uint32 schedule_id = 6; //10
  int32 retcode = 13; //15
}

message AsterMidCampInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2151; //2133;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated AsterMidCampInfo camp_list = 2; //5
}

message DragonSpineActivityDetailInfo {
  bool is_content_closed = 2; //10
  repeated DragonSpineChapterInfo chapter_info_list = 9; //4
  uint32 weapon_enhance_level = 15; //2
  uint32 content_finish_time = 14; //15
  uint32 shimmering_essence = 1; //13
  uint32 warm_essence = 7; //11
  uint32 wondrous_essence = 5; //7
}

message DragonSpineChapterInfo {
  uint32 progress = 8; //14
  uint32 open_time = 3; //6
  bool is_open = 6; //11
  uint32 chapter_id = 4; //9
  uint32 finished_mission_num = 7; //10
}

message DragonSpineChapterOpenNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2037; //2022;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 8; //12
  uint32 chapter_id = 10; //10
}

message DragonSpineChapterProgressChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2086; //2065;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 15; //7
  uint32 chapter_id = 8; //11
  uint32 cur_progress = 5; //5
}

message DragonSpineChapterFinishNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2132; //2069;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 5; //13
  uint32 chapter_id = 9; //11
  uint32 weapon_enhance_level = 2; //14
}

message DragonSpineCoinChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2067; //2088;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 shimmering_essence = 7; //4
  uint32 warm_essence = 5; //13
  uint32 schedule_id = 14; //12
  uint32 wondrous_essence = 1; //11
}

message ActivitySaleChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2058; //2071;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 sale_id = 2; //5
  bool is_close = 8; //1
}

message EffigyDailyInfo {
  uint32 challenge_max_score = 6; //6
  bool is_first_pass_reward_taken = 2; //12
  uint32 challenge_total_score = 10; //15
  uint32 challenge_id = 15; //1
  uint32 challenge_count = 12; //3
  uint32 day_index = 14; //14
  uint32 begin_time = 7; //2
}

message EffigyActivityDetailInfo {
  uint32 cur_score = 5; //5
  repeated EffigyDailyInfo daily_info_list = 9; //14
  uint32 last_difficulty_id = 10; //9
  repeated uint32 taken_reward_index_list = 7; //2
}

message StartEffigyChallengeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2061; //2169;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 difficulty_id = 13; //9
  repeated uint32 condition_id_list = 2; //6
  uint32 challenge_id = 15; //1
  uint32 point_id = 9; //12
}

message StartEffigyChallengeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2070; //2173;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 condition_id_list = 2; //2
  int32 retcode = 1; //8
  uint32 challenge_id = 4; //15
  uint32 difficulty_id = 9; //10
  uint32 point_id = 8; //12
}

message EffigyChallengeInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2164; //2090;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 difficulty_id = 7; //9
  repeated uint32 condition_id_list = 2; //11
  uint32 challenge_score = 12; //14
  uint32 challenge_id = 8; //8
}

message EffigyChallengeDungeonResultInfo {
  uint32 challenge_score = 14; //7
  bool is_in_time_limit = 1; //8
  uint32 challenge_id = 10; //6
  bool is_success = 2; //15
  uint32 challenge_max_score = 6; //13
}

message EffigyChallengeResultNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2145; //2046;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_success = 4; //5
  uint32 challenge_max_score = 1; //12
  uint32 challenge_score = 5; //3
  uint32 challenge_id = 14; //7
}

message TakeEffigyFirstPassRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2080; //2196;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 challenge_id = 5; //6
}

message TakeEffigyFirstPassRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2170; //2061;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 challenge_id = 13; //2
  int32 retcode = 10; //7
}

message TakeEffigyRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2049; //2040;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 reward_index = 2; //14
}

message TakeEffigyRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2180; //2007;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 6; //15
  uint32 reward_index = 13; //7
}

message SelectEffigyChallengeConditionReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2115; //2064;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 difficulty_id = 11; //15
  uint32 challenge_id = 2; //7
  repeated uint32 condition_id_list = 3; //9
}

message SelectEffigyChallengeConditionRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2068; //2039;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 condition_id_list = 1; //12
  int32 retcode = 12; //6
  uint32 difficulty_id = 10; //7
  uint32 challenge_id = 11; //2
}

message RestartEffigyChallengeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2131; //2148;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message RestartEffigyChallengeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2077; //2042;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 14; //2
}

message TreasureMapRegionInfo {
  uint32 start_time = 6; //6
  uint32 current_progress = 5; //11
  bool is_done_mp_spot = 2; //3
  uint32 scene_id = 1; //2
  uint32 goal_points = 12; //12
  bool is_find_mp_spot = 15; //4
  uint32 region_radius = 8; //1
  Vector region_center_pos = 13; //9
  uint32 region_id = 14; //5
}

message TreasureMapBonusChallengeInfo {

  bool is_done = 2; //5
  uint32 config_id = 9; //10
  bool is_active = 5; //1
  map<uint32, bool> fragment_map = 13; //12
  uint32 solution_id = 14; //8
}

message TreasureMapActivityDetailInfo {
  uint32 active_region_index = 2; //1
  repeated TreasureMapRegionInfo region_info_list = 7; //6
  bool is_mp_challenge_touched = 6; //7
  uint32 treasure_close_time = 5; //10
  repeated TreasureMapBonusChallengeInfo bonus_challenge_list = 15; //5
  uint32 currency_num = 1; //2
  uint32 preview_reward_id = 12; //14
  uint32 min_open_player_level = 3; //8
  uint32 total_mp_spot_num = 14; //13
}

message TreasureMapRegionInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2064; //2185;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  TreasureMapRegionInfo region_info = 6; //14
}

message TreasureMapCurrencyNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2038; //2171;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 currency_num = 13; //8
}

message TreasureMapRegionActiveNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2177; //2122;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 active_region_index = 14; //14
}

message TreasureMapMpChallengeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2054; //2048;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

}

message TreasureMapBonusChallengeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2056; //2115;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  TreasureMapBonusChallengeInfo info = 5; //5
}

message TreasureMapGuideTaskDoneNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2053; //2119;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

}

message TreasureMapPreTaskDoneNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2097; //2152;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

}

message BlessingActivityDetailInfo {

  uint32 cur_day_scan_type = 15; //9
  bool is_content_closed = 5; //11
  map<uint32, uint32> pic_num_map = 7; //15
  uint32 content_close_time = 11; //2
  uint32 cur_day_scan_num = 12; //4
  uint32 redeem_reward_num = 9; //1
  bool is_activated = 8; //13
  uint32 next_refresh_time = 14; //6
}

message BlessingScanReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2179; //2081;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 entity_id = 13; //11
}

message BlessingScanRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2122; //2093;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 scan_pic_id = 9; //4
  int32 retcode = 8; //11
  uint32 cur_day_scan_num = 4; //1
}

message BlessingRedeemRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2173; //2137;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message BlessingRedeemRewardRsp {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2104; //2098;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  map<uint32, uint32> pic_num_map = 6; //12
  int32 retcode = 2; //15
}

message BlessingFriendPicData {

  map<uint32, uint32> pic_num_map = 12; //4
  uint32 avatar_id = 2; //5
  string remark_name = 3; //11
  string nickname = 5; //14
  string signature = 6; //1
  ProfilePicture profile_picture = 4; //6
  uint32 uid = 9; //9
}

message BlessingRecvPicRecord {
  string nickname = 12; //1
  string remark_name = 14; //2
  uint32 pic_id = 2; //3
  uint32 uid = 5; //5
  uint32 avatar_id = 8; //6
  string signature = 10; //10
  uint32 index = 1; //14
  bool is_recv = 7; //7
  ProfilePicture profile_picture = 11; //9
}

message BlessingGetFriendPicListReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2026; //2043;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message BlessingGetFriendPicListRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2102; //2056;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //2
  repeated BlessingFriendPicData friend_pic_data_list = 12; //6
}

message BlessingGiveFriendPicReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2002; //2062;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 uid = 9; //11
  uint32 pic_id = 8; //3
}

message BlessingGiveFriendPicRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2082; //2053;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 pic_id = 15; //10
  int32 retcode = 11; //11
  uint32 uid = 5; //13
}

message BlessingAcceptGivePicReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2012; //2006;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 index = 6; //9
  uint32 uid = 1; //1
}

message BlessingAcceptGivePicRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2069; //2055;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 pic_id = 12; //1
  int32 retcode = 14; //13
  uint32 index = 13; //5
  uint32 uid = 11; //14
}

message BlessingGetAllRecvPicRecordListReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2042; //2096;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message BlessingGetAllRecvPicRecordListRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2118; //2083;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated BlessingRecvPicRecord recv_pic_record_list = 9; //15
  int32 retcode = 4; //9
}

message BlessingRecvFriendPicNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2159; //2178;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 uid = 15; //15
  uint32 pic_id = 14; //5
}

message BlessingAcceptAllGivePicReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2153; //2045;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message BlessingAcceptAllGivePicRsp {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2048; //2044;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 11; //11
  map<uint32, uint32> accept_pic_num_map = 13; //14
  repeated uint32 accept_index_list = 3; //5
}

message ExpeditionPathInfo {
  uint32 mark_id = 7; //12
  uint32 start_time = 15; //9
  uint32 assist_avatar_id = 10; //7
  float bonus_probability = 8; //4
  ExpeditionState state = 9; //15
  repeated uint32 avatar_id_list = 2; //2
  uint32 assist_costume_id = 1; //5
  uint32 path_id = 11; //8
  uint32 challenge_id = 3; //11
  uint32 assist_uid = 14; //10
}

message ExpeditionChallengeInfo {
  bool is_finished = 15; //5
  uint32 id = 13; //11
  uint32 open_time = 11; //9
}

message ExpeditionActivityDetailInfo {
  uint32 cur_challenge_id = 3; //5
  repeated ExpeditionChallengeInfo challenge_info_list = 2; //10
  uint32 expedition_count = 4; //2
  uint32 content_close_time = 9; //4
  bool is_content_closed = 12; //8
  repeated ExpeditionPathInfo path_info_list = 13; //15
}

message ExpeditionStartReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2020; //2087;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 avatar_id_list = 8; //1
  uint32 assist_uid = 7; //5
  uint32 assist_avatar_id = 4; //8
  uint32 path_id = 10; //7
}

message ExpeditionStartRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2157; //2135;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 assist_uid = 7; //1
  uint32 path_id = 4; //7
  repeated uint32 avatar_id_list = 12; //4
  int32 retcode = 13; //12
  uint32 assist_avatar_id = 9; //2
}

message ExpeditionRecallReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2011; //2131;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 path_id = 7; //13
}

message ExpeditionRecallRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2156; //2129;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 path_id = 3; //1
  int32 retcode = 8; //8
}

message ExpeditionTakeRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2163; //2149;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 path_id = 2; //3
}

message ExpeditionTakeRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2065; //2080;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 8; //13
  bool is_bonus = 13; //11
  uint32 reward_level = 7; //1
  uint32 path_id = 14; //9
}

message ExpeditionAssistInfo {
  string online_id = 13; //14
  uint32 assist_time = 4; //1
  uint32 costume_id = 15; //6
  string target_nick_name = 9; //4
  uint32 avatar_id = 11; //12
}

message GetExpeditionAssistInfoListReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2147; //2150;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GetExpeditionAssistInfoListRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2028; //2035;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated ExpeditionAssistInfo assist_info_list = 2; //6
  int32 retcode = 1; //7
}

message SetCurExpeditionChallengeIdReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2081; //2021;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 id = 6; //5
}

message SetCurExpeditionChallengeIdRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2050; //2049;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 id = 5; //14
  int32 retcode = 4; //3
}

message ExpeditionChallengeEnterRegionNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2092; //2154;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 id = 7; //5
  bool is_puzzle_finished = 11; //10
}

message ExpeditionChallengeFinishedNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2094; //2091;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 id = 8; //13
}

message WaterSpiritActivityDetailInfo {

  map<uint32, uint32> search_time_map = 3; //9
  uint32 region_search_id = 4; //2
  uint32 mp_play_id = 13; //15
}

message FleurFairChapterInfo {
  uint32 open_time = 10; //15
  uint32 chapter_id = 14; //11
}

message FleurFairBalloonInfo {
  uint32 best_score = 7; //4
}

message FleurFairFallInfo {
  uint32 best_score = 9; //10
}

message FleurFairMusicRecord {
  uint32 max_combo = 1; //1
  uint32 max_score = 8; //11
  bool is_unlock = 7; //12
}

message FleurFairMusicGameInfo {

  map<uint32, FleurFairMusicRecord> music_record_map = 9; //10
}

message FleurFairMinigameInfo {
  uint32 minigame_id = 14; //13
  bool is_open = 3; //8
  uint32 open_time = 6; //15
  oneof detail {
    FleurFairBalloonInfo balloon_info = 13; //12
    FleurFairFallInfo fall_info = 11; //11
    FleurFairMusicGameInfo music_info = 9; //9
  }
}

message FleurFairDungeonSectionInfo {
  uint32 section_id = 2; //10
  uint32 open_time = 11; //13
  bool is_open = 5; //1
}

message FleurFairActivityDetailInfo {


  bool is_content_closed = 7; //4
  uint32 dungeon_punish_over_time = 1; //6
  uint32 content_close_time = 15; //15
  uint32 obtained_token = 10; //13
  repeated FleurFairChapterInfo chapter_info_list = 5; //14
  map<uint32, FleurFairMinigameInfo> minigame_info_map = 6; //9
  map<uint32, FleurFairDungeonSectionInfo> dungeon_section_info_map = 11; //3
  bool is_dungeon_unlocked = 9; //11
}

message FleurFairBalloonSettleInfo {
  BalloonSettleInfo settle_info = 13; //10
  bool is_new_record = 8; //7
}

message FleurFairFallSettleInfo {
  FallSettleInfo settle_info = 11; //4
  bool is_new_record = 14; //10
}

message FleurFairBalloonSettleNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2183; //2099;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 minigame_id = 10; //9
  map<uint32, FleurFairBalloonSettleInfo> settle_info_map = 5; //15
}

message FleurFairFallSettleNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2150; //2017;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 minigame_id = 12; //15
  map<uint32, FleurFairFallSettleInfo> settle_info_map = 5; //11
}

message FleurFairMusicGameSettleReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2072; //2194;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 score = 7; //3
  uint32 combo = 3; //6
  uint32 correct_hit = 6; //10
  uint32 music_basic_id = 9; //11
}

message FleurFairMusicGameSettleRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2200; //2113;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_unlock_next_level = 7; //4
  bool is_new_record = 5; //12
  int32 retcode = 3; //5
  uint32 music_basic_id = 4; //9
}

message FleurFairMusicGameStartReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2105; //2167;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 music_basic_id = 8; //2
}

message FleurFairMusicGameStartRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2088; //2079;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 3; //3
  uint32 music_basic_id = 5; //7
}

message FleurFairReplayMiniGameReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2004; //2181;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 minigame_id = 11; //5
}

message FleurFairReplayMiniGameRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2040; //2052;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 14; //14
  uint32 minigame_id = 9; //8
}

message ArenaChallengeMonsterLevel {
  uint32 arena_challenge_level = 13; //7
  uint32 arena_challenge_id = 3; //15
}

message ArenaChallengeActivityDetailInfo {

  bool is_finish_any_level = 5; //14
  map<uint32, uint32> level_open_time_map = 2; //3
  uint32 world_level = 6; //15
  repeated ArenaChallengeMonsterLevel level_list = 7; //9
}

message StartArenaChallengeLevelReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2033; //2127;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 arena_challenge_id = 5; //4
  uint32 gadget_entity_id = 7; //5
  uint32 arena_challenge_level = 4; //2
}

message StartArenaChallengeLevelRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2116; //2125;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 arena_challenge_level = 7; //1
  int32 retcode = 6; //9
  uint32 gadget_entity_id = 2; //3
  uint32 arena_challenge_id = 1; //6
}

message ArenaChallengeChildChallengeInfo {
  uint32 challenge_id = 14; //12
  uint32 challenge_type = 5; //5
  uint32 challenge_index = 8; //4
  bool is_success = 15; //7
  bool is_settled = 4; //11
}

message ArenaChallengeFinishNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2199; //2030;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 arena_challenge_level = 9; //13
  uint32 arena_challenge_id = 15; //3
  repeated ArenaChallengeChildChallengeInfo child_challenge_list = 6; //2
  bool is_success = 7; //12
}

message WaterSpritePhaseFinishNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2095; //2025;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

}

message ActivityTakeWatcherRewardBatchReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2083; //2159;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 watcher_id_list = 13; //11
  uint32 activity_id = 2; //3
}

message ActivityTakeWatcherRewardBatchRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2186; //2109;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 watcher_id_list = 9; //6
  int32 retcode = 15; //15
  uint32 activity_id = 12; //7
  repeated ItemParam item_list = 8; //1
}

message ChannelerSlabCamp {
  uint32 reward_id = 11; //11
  Vector pos = 14; //8
  uint32 buff_num = 15; //7
  uint32 group_id = 5; //3
}

message ChannelerSlabChallenge {
  uint32 active_camp_index = 14; //5
  repeated ChannelerSlabCamp camp_list = 15; //14
}

message ChannelerSlabOneoffDungeon {
  bool is_done = 13; //8
  uint32 dungeon_id = 15; //12
  uint32 reward_id = 12; //13
}

message ChannelerSlabChallengeStage {
  uint32 open_time = 10; //3
  repeated ChannelerSlabChallenge challenge_list = 12; //14
  bool is_open = 1; //7
  uint32 stage_id = 13; //9
  ChannelerSlabOneoffDungeon dungeon_info = 5; //13
}

message ChannelerSlabBuffSchemeInfo {

  map<uint32, uint32> slot_map = 9; //9
  uint32 total_energy = 10; //13
  uint32 self_energy = 1; //15
}

message ChannelerSlabAssistInfo {
  uint32 uid = 11; //10
  uint32 avatar_level = 3; //12
  uint32 avatar_id = 15; //6
}

message ChannelerSlabBuffInfo {
  ChannelerSlabBuffSchemeInfo mp_buff_scheme_info = 9; //6
  repeated uint32 buff_id_list = 10; //8
  ChannelerSlabBuffSchemeInfo single_buff_scheme_info = 6; //7
  repeated ChannelerSlabAssistInfo assist_info_list = 14; //15
}

message ChannelerSlabLoopDungeonInfo {
  uint32 score = 4; //7
  uint32 dungeon_index = 7; //4
  uint32 open_time = 3; //12
  bool is_first_pass_reward_taken = 11; //9
  repeated uint32 last_condition_id_list = 1; //14
  bool is_open = 2; //1
}

message ChannelerSlabLoopDungeonStageInfo {
  repeated ChannelerSlabLoopDungeonInfo dungeon_info_list = 10; //15
  repeated uint32 taken_reward_index_list = 9; //5
  bool is_open = 8; //11
  uint32 last_difficulty_id = 2; //6
  uint32 open_time = 12; //3
}

message ChannelerSlabActivityDetailInfo {
  ChannelerSlabBuffInfo buff_info = 13; //1
  ChannelerSlabLoopDungeonStageInfo loop_dungeon_stage_info = 4; //7
  repeated ChannelerSlabChallengeStage stage_list = 9; //15
  uint32 play_end_time = 7; //3
}

message ChannelerSlabStageActiveChallengeIndexNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8354; //8734;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 stage_id = 7; //15
  uint32 challenge_index = 8; //12
  uint32 active_camp_index = 6; //6
}

message ChannelerSlabStageOneofDungeonNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8449; //8203;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 stage_id = 14; //2
  bool is_done = 4; //8
}

message ChannelerSlabWearBuffReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8487; //8107;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 buff_id = 12; //3
  bool is_mp = 8; //5
  uint32 slot_id = 11; //13
}

message ChannelerSlabWearBuffRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8651; //8600;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 buff_id = 4; //15
  int32 retcode = 12; //1
  bool is_mp = 9; //9
  uint32 slot_id = 5; //8
}

message ChannelerSlabTakeoffBuffReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8329; //8516;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_mp = 8; //10
  uint32 slot_id = 13; //12
  uint32 buff_id = 10; //9
}

message ChannelerSlabTakeoffBuffRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8646; //8237;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 3; //3
  bool is_mp = 6; //13
  uint32 buff_id = 14; //14
  uint32 slot_id = 2; //8
}

message ChannelerSlabEnterLoopDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8928; //8869;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 point_id = 3; //9
  uint32 dungeon_index = 10; //10
  repeated uint32 condition_id_list = 2; //5
  uint32 difficulty_id = 14; //12
}

message ChannelerSlabEnterLoopDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8892; //8081;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //9
  uint32 point_id = 2; //12
  repeated uint32 condition_id_list = 11; //6
  uint32 dungeon_index = 6; //15
  uint32 difficulty_id = 4; //3
}

message ChannelerSlabLoopDungeonTakeFirstPassRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8779; //8589;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 dungeon_index = 6; //10
}

message ChannelerSlabLoopDungeonTakeFirstPassRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8654; //8539;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 14; //10
  uint32 dungeon_index = 2; //8
}

message ChannelerSlabLoopDungeonTakeScoreRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8751; //8684;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 reward_index = 4; //8
}

message ChannelerSlabLoopDungeonTakeScoreRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8186; //8433;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 reward_index = 11; //12
  int32 retcode = 5; //5
}

message ChannelerSlabLoopDungeonChallengeInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8499; //8224;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 dungeon_index = 3; //12
  uint32 challenge_score = 1; //4
  uint32 difficulty_id = 9; //2
  repeated uint32 condition_id_list = 10; //3
  repeated uint32 scheme_buff_id_list = 8; //6
}

message ChannelerSlabLoopDungeonSelectConditionReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8368; //8503;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 dungeon_index = 4; //4
  repeated uint32 condition_id_list = 3; //3
  uint32 difficulty_id = 2; //8
}

message ChannelerSlabLoopDungeonSelectConditionRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8943; //8509;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //9
  uint32 dungeon_index = 15; //5
  repeated uint32 condition_id_list = 10; //13
  uint32 difficulty_id = 6; //14
}

message ChannelerSlabLoopDungeonResultInfo {
  bool is_success = 13; //11
  uint32 challenge_max_score = 5; //8
  uint32 dungeon_index = 3; //7
  bool is_in_time_limit = 6; //10
  uint32 challenge_score = 1; //12
}

message ChannelerSlabOneOffDungeonInfoReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8069; //8409;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message ChannelerSlabOneOffDungeonInfoRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8731; //8268;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 scheme_buff_id_list = 11; //3
  int32 retcode = 2; //15
}

message ChannelerSlabOneOffDungeonInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8038; //8729;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 scheme_buff_id_list = 9; //6
}

message ChannelerSlabSaveAssistInfoReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8304; //8416;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated ChannelerSlabAssistInfo assist_info_list = 6; //8
}

message ChannelerSlabSaveAssistInfoRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8443; //8932;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated ChannelerSlabAssistInfo assist_info_list = 6; //8
  int32 retcode = 4; //11
}

message MistTrialBestAvatar {
  AvatarType avatar_type = 1; //6
  uint32 costume_id = 3; //14
  uint32 avatar_id = 2; //5
}

message MistTrialLevelData {
  MistTrialBestAvatar best_hit_avatar = 14; //14
  uint32 level_id = 12; //7
  uint32 open_time = 2; //1
  bool is_open = 6; //12
  repeated MistTrialBestAvatar best_avatar_list = 13; //6
  uint32 first_pass_time = 4; //2
}

message MistTrialActivityDetailInfo {
  repeated MistTrialLevelData trial_level_data_list = 7; //5
}

message MistTrialSelectAvatarAndEnterDungeonReq {
  message SelectAvatarIndex {
    oneof detail {
      uint32 mist_trial_avatar_id = 13; //8
      uint64 formal_avatar_guid = 15; //6
    }
  }

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8537; //8666;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 enter_point_id = 5; //7
  repeated uint32 select_trial_avatar_id_list = 9; //10
  uint32 trial_id = 14; //4
  repeated SelectAvatarIndex select_avatar_index_list = 6; //6
}

message MistTrialSelectAvatarAndEnterDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8551; //8239;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 trial_id = 14; //1
  int32 retcode = 1; //2
}

message MistTrialMissionInfo {
  uint32 param = 7; //9
  uint32 watcher_list_id = 14; //13
}

message MistTrialGetChallengeMissionReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8534; //8893;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 trial_id = 3; //9
}

message MistTrialGetChallengeMissionRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8884; //8508;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 trial_id = 9; //1
  repeated MistTrialMissionInfo mission_info_list = 6; //15
  int32 retcode = 7; //11
}

message MistTrialDunegonFailNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8775; //8135;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 dungeon_id = 9; //9
}

message ChannelerSlabCheckEnterLoopDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8678; //8745;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message ChannelerSlabCheckEnterLoopDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8961; //8452;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 8; //10
}

message HideAndSeekMapInfo {
  repeated uint32 match_lock_reason_list = 5; //11
  uint32 id = 7; //7
}

message HideAndSeekActivityDetailInfo {
  repeated uint32 chosen_map_list = 5; //5
  repeated uint32 unlock_map_list = 13; //13
  repeated uint32 chosen_hunter_skill_list = 8; //4
  repeated HideAndSeekMapInfo open_map_info_list = 4; //1
  repeated uint32 chosen_hider_skill_list = 3; //6
}

message HideAndSeekSelectSkillReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8142; //8183;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 skill_list = 6; //13
}

message HideAndSeekSelectSkillRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8442; //8088;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 14; //4
  repeated uint32 skill_list = 10; //12
}

message ActivityTakeScoreRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8174; //8971;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 reward_config_id = 14; //12
  uint32 activity_id = 2; //9
}

message ActivityTakeScoreRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8946; //8583;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 activity_id = 14; //13
  int32 retcode = 15; //9
  uint32 reward_config_id = 13; //15
}

message ActivityTakeAllScoreRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8101; //8372;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 activity_id = 4; //9
}

message ActivityTakeAllScoreRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8501; //8043;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 reward_config_list = 7; //14
  int32 retcode = 4; //15
  uint32 activity_id = 13; //7
}

message HideAndSeekChooseMapReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8458; //8512;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 map_list = 6; //3
}

message HideAndSeekChooseMapRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8321; //8533;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 map_list = 5; //3
  int32 retcode = 3; //11
}

message FindHilichurlDayContentInfo {
  uint32 start_time = 5; //1
}

message FindHilichurlDetailInfo {
  repeated FindHilichurlDayContentInfo day_content_info_list = 2; //1
  uint32 min_open_player_level = 4; //12
  bool is_end_quest_accept = 14; //7
  uint32 content_close_time = 8; //6
  bool is_content_closed = 15; //9
  uint32 player_day_index = 10; //4
  uint32 day_index = 1; //15
}

message CommonPlayerTipsNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8996; //8466;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 notify_type = 11; //3
  repeated string text_map_id_list = 14; //9
}

message FindHilichurlFinishSecondQuestNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8774; //8901;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 day_index = 9; //11
}

message FindHilichurlAcceptQuestNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8522; //8659;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

}

message SummerTimeSprintBoatRecord {
  uint32 best_score = 2; //3
  uint32 start_time = 3; //13
  bool is_touched = 9; //7
  repeated uint32 watcher_id_list = 5; //10
  uint32 group_id = 14; //2
}

message SummerTimeSprintBoatInfo {
  repeated SummerTimeSprintBoatRecord record_list = 14; //7
}

message SummerTimeDetailInfo {

  map<uint32, SummerTimeStageInfo> stage_map = 2; //3
  uint32 content_close_time = 6; //11
  bool is_content_closed = 9; //13
  SummerTimeSprintBoatInfo sprint_boat_info = 11; //4
}

message SummerTimeStageInfo {
  bool is_open = 3; //13
  uint32 open_time = 6; //10
  uint32 stage_id = 4; //1
}

message SummerTimeFloatSignalPositionNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8322; //8077;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  Vector position = 10; //1
  bool is_transfer_anchor = 11; //5
  uint32 float_signal_id = 3; //7
}

message SummerTimeFloatSignalUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8586; //8781;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_transfer_anchor = 11; //4
  uint32 float_signal_id = 14; //8
  Vector position = 2; //10
}

message SummerTimeSprintBoatSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8474; //8651;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 total_num = 7; //13
  uint32 group_id = 1; //12
  bool is_success = 2; //15
  uint32 collect_num = 3; //6
  uint32 left_time = 11; //8
  uint32 medal_level = 8; //2
  uint32 score = 14; //10
  bool is_new_record = 4; //7
}

message SummerTimeSprintBoatRestartReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8994; //8410;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 group_id = 5; //10
  uint32 schedule_id = 10; //14
}

message SummerTimeSprintBoatRestartRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8585; //8356;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 8; //10
  uint32 schedule_id = 15; //5
  uint32 group_id = 6; //4
}

message BuoyantCombatDailyInfo {
  uint32 start_time = 2; //2
  uint32 best_score = 12; //13
}

message BuoyantCombatDetailInfo {
  repeated BuoyantCombatDailyInfo daily_info_list = 15; //8
}

message StartBuoyantCombatGalleryReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8096; //8732;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 gallery_id = 11; //15
  uint32 gallery_level = 7; //13
}

message StartBuoyantCombatGalleryRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8895; //8680;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 gallery_level = 8; //12
  int32 retcode = 10; //5
  uint32 gallery_id = 7; //8
}

message BuoyantCombatSettleInfo {
  bool is_new_record = 1; //1
  BuoyantCombatGallerySettleInfo settle_info = 9; //3
}

message BuoyantCombatSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8267; //8305;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 gallery_id = 15; //8
  BuoyantCombatSettleInfo settle_info = 5; //11
}

message SetLimitOptimizationNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8763; //8851;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_active = 10; //3
}

message SummerTimeDungeonInfo {
  uint32 taken_chest_count = 4; //15
  uint32 total_chest_count = 13; //12
  uint32 taken_shell_count = 2; //14
  uint32 dungeon_id = 5; //4
  uint32 total_shell_count = 8; //13
}

message EchoShellDetailInfo {
  repeated SummerTimeDungeonInfo summer_time_dungeon_list = 13; //8
  repeated uint32 shell_list = 10; //13
  repeated uint32 pass_dungeon_list = 5; //4
  repeated uint32 taken_reward_list = 14; //2
}

message EchoShellUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8560; //8150;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 shell_id = 12; //1
}

message EchoShellTakeRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8614; //8114;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 reward_id = 8; //10
}

message EchoShellTakeRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8180; //8797;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 reward_id = 2; //6
  int32 retcode = 1; //10
}

message BounceConjuringChapterInfo {
  uint32 best_score = 3; //12
  uint32 open_time = 11; //9
  uint32 chapter_id = 2; //13
}

message BounceConjuringActivityDetailInfo {
  repeated BounceConjuringChapterInfo chapter_info_list = 7; //8
  bool is_content_closed = 6; //12
  uint32 content_close_time = 1; //7
}

message BounceConjuringSettleNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8552; //8084;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_new_record = 6; //14
  map<uint32, BounceConjuringGallerySettleInfo> settle_info_map = 7; //4
  uint32 total_score = 4; //2
  uint32 chapter_id = 11; //13
}

message BlitzRushStage {
  bool is_open = 6; //13
  uint32 open_time = 14; //11
}

message ParkourLevelInfo {
  uint32 best_record = 1; //12
  bool is_open = 12; //9
  uint32 open_time = 10; //7
  Vector pos = 5; //2
}

message BlitzRushActivityDetailInfo {
  repeated BlitzRushStage stage_list = 11; //10
  uint32 content_close_time = 1; //14
  bool is_content_closed = 5; //2
  repeated ParkourLevelInfo parkour_level_info_list = 6; //6
}

message BlitzRushParkourRestartReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8204; //8653;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 9; //13
  uint32 group_id = 10; //2
}

message BlitzRushParkourRestartRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8502; //8944;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 3; //14
  uint32 group_id = 15; //15
  uint32 schedule_id = 2; //1
}

message ChessActivityDetailInfo {
  uint32 level = 14; //4
  bool is_teach_dungeon_finished = 6; //9
  uint32 content_close_time = 10; //14
  uint32 obtained_exp = 8; //8
  bool is_content_closed = 15; //5
  uint32 available_exp = 5; //2
  uint32 exp = 11; //13
  repeated uint32 finished_map_id_list = 7; //1
  uint32 punish_over_time = 4; //3
}

message EnterChessDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8079; //8191;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 map_id = 10; //12
}

message EnterChessDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8741; //8592;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 4; //8
  uint32 map_id = 1; //13
}

message TreasureMapHostInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8218; //8681;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 mp_challenge_region_list = 15; //8
}

message SumoActivityDetailInfo {

  uint32 difficulty_id = 15; //11
  map<uint32, SumoStageData> sumo_stage_map = 4; //13
  uint32 last_stage_id = 2; //14
}

message SumoAvatarInfo {
  bool is_trial = 2; //2
  uint64 avatar_id = 9; //1
}

message SumoTeamData {
  repeated uint32 skill_id_list = 8; //14
  repeated SumoAvatarInfo avatar_info_list = 10; //3
}

message SumoStageData {
  uint32 max_score = 5; //1
  uint32 open_time = 14; //5
  uint32 stage_id = 9; //3
  repeated SumoTeamData team_list = 13; //7
  bool is_open = 15; //11
}

message SumoSaveTeamReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8599; //8313;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 activity_id = 12; //11
  uint32 stage_id = 7; //13
  uint32 difficulty_id = 14; //7
  repeated SumoTeamData team_list = 2; //12
}

message SumoSaveTeamRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8017; //8319;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 stage_id = 9; //9
  int32 retcode = 12; //2
  uint32 activity_id = 3; //11
  repeated SumoTeamData team_list = 8; //13
  uint32 difficulty_id = 14; //10
}

message SumoSelectTeamAndEnterDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8433; //8215;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 activity_id = 4; //1
  uint32 stage_id = 15; //7
  uint32 difficulty_id = 12; //4
  repeated SumoTeamData team_list = 8; //10
}

message SumoSelectTeamAndEnterDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8877; //8193;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //1
  uint32 activity_id = 13; //14
  uint32 difficulty_id = 14; //12
  uint32 stage_id = 10; //9
  repeated SumoTeamData team_list = 2; //2
}

message SumoDungeonSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8830; //8291;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 final_score = 11; //7
  uint32 difficulty_id = 2; //14
  uint32 kill_elite_monster_num = 13; //15
  uint32 stage_id = 3; //12
  uint32 kill_monster_num = 4; //4
  bool is_new_record = 15; //5
}

message SumoDungeonAvatar {
  uint64 avatar_guid = 3; //11
  bool is_avlive = 10; //13
  bool is_trial = 5; //4
}

message SumoDungeonTeam {
  repeated SumoDungeonAvatar dungeon_avatar_list = 4; //15
}

message SumoEnterDungeonNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8559; //8013;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 activity_id = 6; //15
  repeated SumoDungeonTeam dungeon_team_list = 1; //11
  uint32 no_switch_punish_time = 7; //10
  uint32 next_valid_switch_time = 8; //13
  uint32 stage_id = 15; //7
  uint32 cur_team_index = 14; //5
}

message SumoSwitchTeamReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8209; //8351;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 2; //9
  uint32 activity_id = 9; //5
}

message SumoSwitchTeamRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8137; //8525;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 next_valid_switch_time = 9; //7
  repeated SumoDungeonTeam dungeon_team_list = 5; //10
  uint32 activity_id = 7; //6
  int32 retcode = 3; //14
  uint32 cur_team_index = 13; //11
  uint32 stage_id = 8; //5
}

message SumoLeaveDungeonNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8842; //8640;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

}

message SumoRestartDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8993; //8612;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message SumoRestartDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8732; //8214;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 13; //11
  uint32 dungeon_id = 10; //4
  uint32 point_id = 8; //12
}

message ActivityDisableTransferPointInteractionNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8440; //8982;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_disable = 15; //10
  Uint32Pair scene_point_pair = 8; //5
}

message SumoSetNoSwitchPunishTimeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8554; //8935;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 cur_team_index = 2; //15
  uint32 stage_id = 1; //13
  repeated SumoDungeonTeam dungeon_team_list = 3; //11
  uint32 no_switch_punish_time = 14; //2
  uint32 next_valid_switch_time = 11; //14
  uint32 activity_id = 7; //9
}

message MoonfinTrialLevelInfo {
  uint32 best_record = 11; //3
  uint32 open_time = 3; //1
}

message MoonfinTrialActivityDetailInfo {

  map<uint32, MoonfinTrialLevelInfo> level_info_map = 7; //5
  uint32 special_fish_count = 2; //11
}

message FishingGallerySettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8356; //8780;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 gallery_id = 7; //6
  uint32 level_id = 6; //15
  FishingGallerySettleInfo settle_info = 3; //13
}

message LunaRiteHintPoint {
  uint32 area_id = 2; //11
  uint32 index = 4; //7
  LunaRiteHintPointType type = 15; //2
  Vector pos = 11; //10
}

message LunaRiteAreaInfo {
  repeated uint32 sacrifice_list = 2; //11
  LunaRiteHintStatusType hint_status = 3; //7
  repeated uint32 sacrifice_reward_list = 13; //4
  uint32 area_id = 12; //8
  uint32 challenge_index = 9; //6
}

message LunaRiteDetailInfo {
  repeated LunaRiteHintPoint hint_point = 8; //3
  repeated LunaRiteAreaInfo area_info_list = 9; //13
}

message LunaRiteSacrificeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8743; //8805;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 area_id = 2; //15
  uint32 index = 3; //14
}

message LunaRiteSacrificeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8324; //8080;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 area_id = 13; //13
  repeated uint32 sacrifice_list = 9; //14
  uint32 index = 7; //8
  int32 retcode = 8; //9
}

message LunaRiteTakeSacrificeRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8152; //8045;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 area_id = 5; //11
  uint32 index = 10; //3
}

message LunaRiteTakeSacrificeRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8806; //8397;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 index = 2; //11
  repeated uint32 sacrifice_reward_list = 14; //2
  uint32 sacrifice_reward_index = 13; //14
  uint32 area_id = 8; //6
  int32 retcode = 15; //12
}

message LunaRiteHintPointReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8859; //8195;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 area_id = 5; //13
}

message LunaRiteHintPointRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8361; //8765;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  LunaRiteHintStatusType hint_status = 3; //4
  uint32 area_id = 5; //5
  int32 retcode = 1; //13
  repeated LunaRiteHintPoint hint_point = 12; //9
}

message LunaRiteHintPointRemoveNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8181; //8787;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 hint_point_index = 2; //14
}

message LunaRiteGroupBundleRegisterNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8078; //8465;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 group_link_bundle_id = 14; //11
}

message LunaRiteAreaFinishNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8711; //8213;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 area_id = 12; //2
}

message PlantFlowerActivityDetailInfo {


  bool is_content_closed = 1; //3
  map<uint32, uint32> wish_flower_num_map = 14; //10
  uint32 today_seed_reward_id = 4; //11
  uint32 day_index = 8; //1
  bool is_today_has_awarded = 2; //13
  map<uint32, uint32> used_flower_num_map = 11; //7
}

message PlantFlowerGetSeedInfoReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8882; //8560;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 13; //6
}

message PlantFlowerGetSeedInfoRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8249; //8764;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 11; //15
  uint32 schedule_id = 8; //12
  uint32 seed_reward_id = 3; //5
}

message PlantFlowerTakeSeedRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8963; //8968;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 7; //12
}

message PlantFlowerTakeSeedRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8727; //8860;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //2
  uint32 schedule_id = 14; //13
}

message PlantFlowerSetFlowerWishReq {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8573; //8547;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  map<uint32, uint32> flower_num_map = 10; //12
  uint32 schedule_id = 4; //5
}

message PlantFlowerSetFlowerWishRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8902; //8910;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 4; //7
  int32 retcode = 15; //8
}

message PlantFlowerGetFriendFlowerWishListReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8639; //8126;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 2; //7
}

message PlantFlowerFriendFlowerWishData {

  ProfilePicture profile_picture = 15; //3
  uint32 uid = 6; //5
  string nickname = 3; //14
  map<uint32, uint32> flower_num_map = 7; //12
}

message PlantFlowerGetFriendFlowerWishListRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8025; //8511;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 15; //6
  uint32 schedule_id = 7; //2
  repeated PlantFlowerFriendFlowerWishData friend_flower_wish_list = 1; //9
}

message PlantFlowerGiveFriendFlowerReq {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8176; //8846;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 5; //11
  uint32 uid = 1; //13
  map<uint32, uint32> flower_num_map = 14; //12
}

message PlantFlowerGiveFriendFlowerRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8151; //8386;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 limit_flower_list = 13; //5
  int32 retcode = 1; //3
  uint32 schedule_id = 9; //14
}

message PlantFlowerGetRecvFlowerListReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8518; //8270;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 8; //1
}

message PlantFlowerRecvFlowerData {

  ProfilePicture profile_picture = 3; //13
  string nickname = 12; //5
  uint32 uid = 8; //9
  map<uint32, uint32> flower_num_map = 9; //14
}

message PlantFlowerGetRecvFlowerListRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8952; //8374;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 11; //6
  int32 retcode = 10; //1
  repeated PlantFlowerRecvFlowerData recv_flower_list = 12; //4
}

message PlantFlowerHaveRecvFlowerNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8405; //8078;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 12; //10
}

message PlantFlowerAcceptGiveFlowerReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8532; //8383;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 4; //2
  uint32 uid = 8; //12
}

message PlantFlowerAcceptFlowerResultInfo {


  map<uint32, uint32> unaccept_flower_num_map = 9; //4
  uint32 uid = 10; //7
  map<uint32, uint32> accept_flower_num_map = 4; //10
}

message PlantFlowerAcceptGiveFlowerRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8039; //8567;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 4; //1
  PlantFlowerAcceptFlowerResultInfo accept_flower_result_info = 14; //15
  int32 retcode = 12; //12
}

message PlantFlowerAcceptAllGiveFlowerReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8195; //8808;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 10; //11
}

message PlantFlowerAcceptAllGiveFlowerRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8764; //8888;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 14; //10
  int32 retcode = 1; //11
  repeated PlantFlowerAcceptFlowerResultInfo accept_flower_result_info_list = 7; //13
}

message PlantFlowerGetCanGiveFriendFlowerReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8982; //8716;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 15; //15
}

message PlantFlowerGetCanGiveFriendFlowerRsp {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8699; //8766;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  map<uint32, uint32> flower_num_map = 10; //6
  uint32 schedule_id = 13; //4
  int32 retcode = 1; //3
}

message PlantFlowerEditFlowerCombinationReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8837; //8843;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  CustomGadgetTreeInfo flower_combination_info = 3; //10
  uint32 entity_id = 7; //14
  uint32 schedule_id = 2; //9
}

message PlantFlowerEditFlowerCombinationRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8476; //8788;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 10; //13
  int32 retcode = 7; //6
}

message MusicGameRecord {
  bool is_unlock = 8; //9
  uint32 max_score = 15; //11
  uint32 max_combo = 1; //6
}

message MusicGameActivityDetailInfo {

  repeated UgcMusicBriefInfo ugc_record_list = 2; //4
  repeated UgcMusicBriefInfo ugc_search_list = 6; //7
  map<uint32, MusicGameRecord> music_game_record_map = 8; //8
}

message MusicGameSettleReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8066; //8892;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 button_list = 1626; //384
  uint32 delay = 252; //795
  repeated uint32 note_list = 5; //4
  uint32 score_rating = 8; //15
  uint32 score = 2; //9
  uint64 ugc_guid = 4; //6
  uint32 restart_times = 9; //13
  bool is_custom_delay = 497; //422
  uint32 max_combo = 12; //5
  uint32 is_full_combo = 493; //1058
  float speed = 484; //409
  bool is_save_score = 11; //3
  uint32 combo = 15; //1
  uint32 music_basic_id = 7; //7
  uint32 star_rating = 3; //2
  uint32 volume = 108; //1953
  uint32 correct_hit = 13; //14
  bool is_custom_speed = 527; //1285
}

message MusicGameSettleRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8735; //8673;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 9; //11
  uint32 music_basic_id = 4; //5
  bool is_new_record = 14; //6
  bool is_unlock_next_level = 1; //2
  uint64 ugc_guid = 7; //10
}

message MusicGameStartReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8536; //8406;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 music_basic_id = 7; //2
  bool is_save_score = 15; //11
  uint64 ugc_guid = 5; //3
}

message MusicGameStartRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8893; //8326;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 music_basic_id = 15; //4
  int32 retcode = 10; //1
  uint64 ugc_guid = 8; //15
}

message RogueAvatarInfo {
  bool is_onstage = 1; //5
  bool is_alive = 5; //3
  uint32 avatar_id = 15; //14
}

message RogueShowAvatarTeamInfo {
  repeated RogueAvatarInfo avatar_list = 3; //12
}

message RoguelikeShikigamiRecord {
  uint32 id = 8; //6
  uint32 level = 4; //3
}

message RogueEffectRecord {
  uint32 source_id = 5; //6
  repeated uint32 extra_param_list = 9; //9
  uint32 count = 1; //10
  bool is_new = 3; //5
}

message RoguelikeRuneRecord {
  uint32 left_count = 12; //14
  uint32 rune_id = 6; //6
  uint32 max_count = 7; //4
}

message RogueStageInfo {
  RogueShowAvatarTeamInfo avatar_team = 10; //2
  bool is_passed = 9; //5
  uint32 stage_id = 13; //7
  uint32 revise_monster_level = 520; //205
  repeated RoguelikeRuneRecord rune_record_list = 3; //6
  bool is_open = 11; //1
  uint32 cur_level = 6; //4
  uint32 cached_coin_c_num = 1765; //1409
  bool is_taken_reward = 7; //11
  bool is_in_combat = 2; //12
  uint32 cached_coin_b_num = 8; //14
  uint32 explore_cell_num = 15; //15
  uint32 coin_c_num = 14; //8
  bool is_explored = 12; //9
  uint32 max_passed_level = 4; //3
}

message RoguelikeDungeonActivityDetailInfo {
  repeated RogueStageInfo stage_list = 6; //8
  repeated RoguelikeShikigamiRecord shikigami_list = 1; //5
  repeated uint32 equipped_rune_list = 12; //14
  uint32 content_close_time = 8; //6
  bool is_content_closed = 10; //10
  repeated uint32 rune_list = 11; //2
}

message DoRoguelikeDungeonCardGachaReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8752; //8148;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 dungeon_id = 6; //13
  uint32 cell_id = 13; //6
}

message DoRoguelikeDungeonCardGachaRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8820; //8472;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_can_refresh = 7; //8
  repeated uint32 card_list = 8; //15
  int32 retcode = 15; //5
}

message RefreshRoguelikeDungeonCardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8070; //8279;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message RefreshRoguelikeDungeonCardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8302; //8349;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 9; //3
  repeated uint32 res_card_list = 12; //9
}

message SelectRoguelikeDungeonCardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8572; //8085;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 card_id = 8; //13
}

message SelectRoguelikeDungeonCardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8445; //8138;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 card_id = 4; //9
  int32 retcode = 13; //8
}

message EquipRoguelikeRuneReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8377; //8306;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 rune_list = 15; //3
}

message EquipRoguelikeRuneRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8054; //8705;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 7; //14
  repeated uint32 rune_list = 13; //1
}

message TriggerRoguelikeRuneReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8915; //8463;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 rune_id = 8; //8
}

message TriggerRoguelikeRuneRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8390; //8065;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 available_count = 11; //4
  uint32 rune_id = 2; //14
  int32 retcode = 7; //8
}

message TriggerRoguelikeCurseNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8642; //8412;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 effect_param_list = 6; //14
  uint32 curse_group_id = 13; //9
  bool is_trigger_curse = 7; //13
  uint32 curse_level = 5; //3
}

message UpgradeRoguelikeShikigamiReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8153; //8151;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 upgrade_level = 6; //6
  uint32 shikigami_group_id = 10; //15
}

message UpgradeRoguelikeShikigamiRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8113; //8966;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 9; //10
  uint32 shikigami_group_id = 5; //14
  uint32 cur_level = 4; //4
}

message RoguelikeSelectAvatarAndEnterDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8281; //8457;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint64 onstage_avatar_guid_list = 5; //14
  uint32 stage_id = 12; //4
  repeated uint64 backstage_avatar_guid_list = 1; //11
}

message RoguelikeSelectAvatarAndEnterDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8932; //8538;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 stage_id = 4; //15
  int32 retcode = 2; //1
}

message RoguelikeGiveUpReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8140; //8660;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 14; //9
}

message RoguelikeGiveUpRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8799; //8139;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 14; //4
  uint32 stage_id = 10; //7
  oneof info {
    RoguelikeDungeonSettleInfo settle_info = 2; //8
  }
}

message RoguelikeTakeStageFirstPassRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8887; //8421;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 14; //1
}

message RoguelikeTakeStageFirstPassRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8650; //8552;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 stage_id = 2; //14
  int32 retcode = 13; //5
}

message GiveUpRoguelikeDungeonCardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8131; //8353;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GiveUpRoguelikeDungeonCardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8024; //8497;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 9; //8
}

message RogueCellInfo {
  uint32 cell_config_id = 8; //14
  uint32 dungeon_id = 1; //4
  uint32 cell_id = 4; //9
  uint32 cell_type = 3; //13
  RogueCellState state = 2; //10
}

message EnterRoguelikeDungeonNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8098; //8652;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_mist_clear = 6; //14
  uint32 dungeon_weight_config_id = 15; //2
  repeated RoguelikeRuneRecord rune_record_list = 4; //6
  repeated uint64 onstage_avatar_guid_list = 11; //9
  bool is_first_enter = 379; //205
  repeated uint32 explored_cell_list = 5; //3
  map<uint32, RogueCellInfo> cell_info_map = 14; //11
  uint32 dungeon_id = 2; //1
  uint32 refresh_cost_item_count = 917; //1999
  float bonus_resource_prop = 1; //13
  uint32 revise_monster_level = 1665; //1541
  uint32 stage_id = 8; //15
  repeated uint64 backstage_avatar_guid_list = 7; //10
  uint32 cur_cell_id = 3; //12
  uint32 refresh_cost_item_id = 13; //7
  uint32 cur_level = 12; //8
}

message StartRogueEliteCellChallengeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8981; //8242;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  RogueEliteCellDifficultyType difficulty = 7; //1
  uint32 dungeon_id = 2; //11
  uint32 cell_id = 12; //4
}

message StartRogueEliteCellChallengeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8611; //8958;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 dungeon_id = 8; //12
  uint32 cell_id = 5; //9
  int32 retcode = 15; //10
}

message StartRogueNormalCellChallengeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8840; //8205;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 dungeon_id = 7; //3
  uint32 cell_id = 12; //8
}

message StartRogueNormalCellChallengeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8485; //8036;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 dungeon_id = 4; //10
  uint32 cell_id = 7; //2
  int32 retcode = 2; //6
}

message RogueCellUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8067; //8642;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  RogueCellInfo cell_info = 15; //7
}

message RogueDungeonPlayerCellChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8954; //8347;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 old_cell_id = 1; //10
  uint32 cell_id = 9; //7
}

message RogueHealAvatarsReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8538; //8947;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 dungeon_id = 12; //1
  uint32 cell_id = 11; //3
}

message RogueHealAvatarsRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8803; //8949;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 dungeon_id = 11; //10
  int32 retcode = 14; //9
  uint32 cell_id = 12; //14
}

message RogueResumeDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8422; //8795;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 1; //12
}

message RogueResumeDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8241; //8647;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 stage_id = 1; //12
  int32 retcode = 11; //15
}

message ClearRoguelikeCurseNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8183; //8207;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  map<uint32, uint32> clear_curse_map = 12; //10
  bool is_clear_all = 9; //11
  uint32 card_id = 6; //8
  bool is_curse_all_clear = 14; //1
}

message RoguelikeCardGachaNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8033; //8925;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 card_list = 5; //10
  bool is_can_refresh = 9; //11
}

message RogueSwitchAvatarReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8262; //8201;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 cell_id = 8; //15
  repeated uint64 onstage_avatar_guid_list = 14; //3
  uint64 cur_avatar_guid = 15; //11
  uint32 dungeon_id = 1; //6
}

message RogueSwitchAvatarRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8548; //8915;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint64 cur_avatar_guid = 3; //4
  repeated uint64 backstage_avatar_guid_list = 2; //8
  uint32 dungeon_id = 7; //14
  uint32 cell_id = 12; //3
  int32 retcode = 15; //12
  repeated uint64 onstage_avatar_guid_list = 13; //9
}

message DisableRoguelikeTrapNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8726; //8259;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 card_id = 8; //13
}

message RoguelikeRuneRecordUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8401; //8973;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated RoguelikeRuneRecord rune_record_list = 7; //11
}

message RoguelikeMistClearNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8670; //8324;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

}

message RoguelikeEffectDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8256; //8222;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated RogueEffectRecord curse_list = 11; //7
  repeated RogueEffectRecord card_list = 1; //4
}

message RoguelikeEffectViewReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8207; //8528;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 view_curse_list = 12; //10
  repeated uint32 view_card_list = 10; //2
}

message RoguelikeEffectViewRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8645; //8639;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  int32 retcode = 1; //2
}

message RoguelikeResourceBonusPropUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8858; //8555;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  float bonus_resource_prop = 2; //12
}

message RoguelikeSettleCoinInfo {
  uint32 coin_c = 7; //8
  uint32 coin_b = 15; //10
  uint32 cell_num = 12; //1
}

message RoguelikeDungeonSettleInfo {

  uint32 stage_id = 10; //5
  bool is_final_level = 5; //15
  map<uint32, RoguelikeSettleCoinInfo> finished_challenge_cell_num_map = 2; //3
  bool is_coin_c_reach_limit = 15; //13
  uint32 cur_level = 7; //9
  uint32 total_coin_b_num = 13; //6
  uint32 total_coin_c_num = 11; //10
}

message RoguelikeRefreshCardCostUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8164; //8927;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 item_count = 8; //5
  uint32 item_id = 4; //1
}

message DigMarkPoint {
  Vector pos = 2; //1
  uint32 bundle_id = 3; //13
  Vector rot = 14; //3
}

message DigActivityDetailInfo {
  repeated uint32 stage_id_list = 14; //15
  repeated DigMarkPoint dig_mark_point_list = 2; //11
  uint32 stage_id = 10; //8
}

message DigActivityMarkPointChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8508; //8109;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated DigMarkPoint dig_mark_point_list = 4; //11
}

message DigActivityChangeGadgetStateReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8676; //8464;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 entity_id = 6; //10
}

message DigActivityChangeGadgetStateRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8810; //8430;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 entity_id = 14; //15
  int32 retcode = 5; //6
}

message HachiActivityDetailInfo {

  map<uint32, HachiStageInfo> stage_map = 9; //6
}

message HachiStageInfo {
  bool is_open = 3; //8
  bool is_finished = 12; //12
  uint32 open_time = 10; //5
  uint32 stage_id = 13; //14
}

message WinterCampStageInfo {
  uint32 cur_progress = 2; //12
  uint32 id = 13; //6
  uint32 open_time = 12; //8
  bool is_finished = 9; //10
  uint32 total_progress = 15; //9
  Vector pos = 6; //5
}

message WinterCampRaceStageInfo {
  uint32 open_time = 11; //5
  uint32 id = 15; //1
  Vector pos = 10; //14
  uint32 max_score = 14; //2
}

message WinterCampActivityDetailInfo {
  repeated WinterCampRaceStageInfo race_info_list = 5; //9
  WinterCampStageInfo battle_info = 10; //10
  repeated uint32 wish_id_list = 3; //8
  repeated uint32 battle_taken_reward_list = 7; //14
  repeated uint32 explore_taken_reward_list = 14; //6
  bool is_content_closed = 11; //15
  WinterCampStageInfo explore_info = 1; //11
  repeated ItemParam used_item_list = 8; //2
}

message WinterCampStageInfoChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8517; //8154;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  WinterCampStageInfo explore_info = 3; //12
  WinterCampStageInfo battle_info = 15; //4
}

message WinterCampRaceScoreNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8068; //8149;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 id = 11; //5
  uint32 max_score = 7; //14
}

message WinterCampGiveFriendItemReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8528; //8572;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 uid = 2; //12
  repeated ItemParam item_list = 5; //11
}

message WinterCampGiveFriendItemRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8656; //8264;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 limit_item_id_list = 7; //11
  int32 retcode = 15; //3
}

message WinterCampSetWishListReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8363; //8753;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 item_id_list = 7; //4
}

message WinterCampSetWishListRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8827; //8281;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 6; //4
  repeated uint32 item_id_list = 3; //7
}

message WinterCampFriendWishData {
  string nickname = 7; //14
  uint32 uid = 8; //12
  ProfilePicture profile_picture = 9; //5
  repeated uint32 item_id_list = 14; //9
}

message WinterCampGetFriendWishListReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8455; //8946;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message WinterCampGetFriendWishListRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8987; //8937;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 6; //12
  repeated WinterCampFriendWishData wish_data_list = 14; //5
}

message WinterCampRecvItemNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8667; //8580;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  WinterCampRecvItemData recv_item_data = 5; //14
}

message WinterCampAcceptItemResultInfo {
  repeated ItemParam accept_item_list = 11; //2
  uint32 uid = 6; //6
  repeated ItemParam unaccept_item_list = 9; //9
}

message WinterCampAcceptGiveItemReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8148; //8387;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 uid = 4; //11
}

message WinterCampAcceptGiveItemRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8419; //8185;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 11; //14
  WinterCampAcceptItemResultInfo accept_item_result_info = 13; //3
}

message WinterCampAcceptAllGiveItemReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8920; //9000;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message WinterCampAcceptAllGiveItemRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8366; //8626;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 6; //6
  repeated WinterCampAcceptItemResultInfo accept_item_result_info = 1; //14
}

message WinterCampGetCanGiveFriendItemReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8272; //8964;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message WinterCampGetCanGiveFriendItemRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8330; //8357;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated ItemParam item_list = 1; //8
  int32 retcode = 2; //11
}

message WinterCampRecvItemData {
  repeated ItemParam item_list = 9; //2
  uint32 uid = 3; //8
  ProfilePicture profile_picture = 2; //1
  string nickname = 8; //12
}

message WinterCampGetRecvItemListReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8296; //8143;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message WinterCampGetRecvItemListRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8073; //8423;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated WinterCampRecvItemData recv_item_data_list = 13; //8
  int32 retcode = 11; //6
}

message WinterCampEditSnowmanCombinationReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8170; //8144;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 entity_id = 2; //9
  CustomGadgetTreeInfo combination_info = 4; //6
}

message WinterCampEditSnowmanCombinationRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8237; //8142;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //10
}

message WinterCampTriathlonSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8723; //8342;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 limited_coin = 8; //9
  uint32 normal_coin = 12; //2
  bool is_new_record = 2; //7
  bool is_success = 6; //3
  uint32 gallery_id = 13; //13
  uint32 remain_time = 7; //4
  uint32 score = 1; //11
  uint32 race_id = 4; //15
}

message WinterCampTakeExploreRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8290; //8607;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 id = 10; //8
}

message WinterCampTakeExploreRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8788; //8978;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 6; //2
  uint32 id = 13; //15
}

message WinterCampTakeBattleRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8074; //8401;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 id = 9; //2
}

message WinterCampTakeBattleRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8088; //8153;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //6
  uint32 id = 13; //15
}

message WinterCampTriathlonRestartReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8370; //8844;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 gallery_id = 8; //6
}

message WinterCampTriathlonRestartRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8323; //8569;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 14; //10
  uint32 gallery_id = 13; //14
}

message MistTrialSettleNotify {


  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8408; //8373;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated MistTrialBestAvatar best_avatar_list = 5; //2
  map<uint32, uint32> exhibition_list_data_result_map = 10; //14
  MistTrialBestAvatar best_hit_avatar = 2; //4
  uint32 first_pass_time = 9; //7
  map<uint32, uint32> exhibition_list_data_record_map = 11; //15
  uint32 dungeon_scene_id = 14; //5
}

message MistTrialGetDungeonExhibitionDataReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8202; //8740;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 trial_id = 8; //13
}

message MistTrialGetDungeonExhibitionDataRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8208; //8066;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 trial_id = 10; //12
  int32 retcode = 13; //4
}

message PotionLevelData {
  uint32 level_id = 6; //10
  uint32 score = 12; //7
  uint32 mode_id = 11; //5
  uint32 difficulty_level = 10; //2
}

message PotionStageData {
  uint32 stage_id = 14; //11
  repeated uint32 cool_down_buff_id_list = 12; //2
  bool is_open = 15; //15
  repeated PotionLevelData level_list = 1; //14
  repeated uint32 cool_down_avatar_id_list = 9; //13
}

message PotionActivityDetailInfo {
  repeated PotionStageData stage_list = 11; //10
}

message PotionResetChallengeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8097; //8377;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 5; //1
}

message PotionResetChallengeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8220; //8067;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 13; //11
  PotionStageData stage_data = 7; //14
}

message PotionAvatarInfo {
  bool is_trial = 3; //6
  uint64 avatar_id = 10; //8
}

message PotionEnterDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8571; //8261;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 buff_id_list = 11; //15
  uint32 level_id = 6; //5
  repeated PotionAvatarInfo avatar_info_list = 8; //14
  uint32 mode_id = 14; //2
  uint32 stage_id = 1; //13
}

message PotionEnterDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8770; //8482;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 12; //11
}

message PotionDungeonAvatar {
  uint64 avatar_guid = 13; //8
  bool is_trial = 7; //2
}

message PotionEnterDungeonNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8043; //8531;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 stage_id = 8; //13
  uint32 difficulty_level = 5; //7
  repeated PotionDungeonAvatar dungeon_avatar_list = 1; //6
  uint32 level_id = 14; //8
  uint32 mode_id = 6; //5
}

message PotionSaveDungeonResultReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8862; //8192;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 5; //8
  uint32 stage_id = 14; //7
}

message PotionSaveDungeonResultRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8112; //8688;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //5
}

message PotionRestartDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8104; //8273;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message PotionRestartDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8864; //8062;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 11; //4
}

message PotionDungeonResultInfo {
  uint32 final_score = 10; //8
  uint32 left_time = 6; //9
  uint32 difficulty_level = 1; //14
  uint32 mode_id = 12; //11
  uint32 level_id = 2; //4
  uint32 stage_id = 9; //2
}

message TanukiTravelLevelData {
  bool is_open = 8; //5
  uint32 route_id = 1; //9
  bool is_finish = 2; //15
}

message TanukiTravelActivityDetailInfo {
  repeated TanukiTravelLevelData tanuki_travel_level_data_list = 6; //4
  bool is_content_closed = 2; //11
  uint32 finished_level_index = 11; //10
}

message TanukiTravelFinishGuideQuestNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8824; //8924;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 activity_id = 7; //14
}

message LanternProjectionLevelInfo {
  uint32 min_finish_time = 1; //1
  uint32 id = 7; //2
  bool is_finished = 14; //7
  bool is_can_start = 4; //9
  bool is_show_tips = 2; //10
}

message LanternProjectionInfo {
  repeated ClientInputType view_switch_tips_list = 2; //12
  repeated LanternProjectionLevelInfo level_list = 11; //6
  repeated uint32 open_stage_list = 12; //10
  repeated ClientInputType view_input_tips_list = 14; //13
}

message SalvageBundleChallengeInfo {
  repeated uint32 finished_bundle_list = 10; //13
}

message SalvageScoreChallengeInfo {
  uint32 salvage_challenge_id = 13; //13
  uint32 max_score = 4; //7
}

message SalvageChallengeInfo {
  uint32 challenge_type = 14; //5
  bool is_unlock = 2; //12
  oneof challenge_detail {
    SalvageBundleChallengeInfo bundle_info = 8; //11
    SalvageScoreChallengeInfo score_challenge_info = 5; //13
    uint32 boss_challenge_id = 1; //2
  }
}

message SalvageStageInfo {
  repeated SalvageChallengeInfo challenge_info_list = 6; //9
  bool is_open = 10; //10
  uint32 stage_id = 15; //2
}

message LanternRiteFireworksChallengeInfo {
  bool is_full_score = 11; //13
  uint32 best_score = 14; //7
  uint32 challenge_id = 15; //3
}

message LanternRiteFireworksStageInfo {
  bool is_open = 7; //8
  repeated LanternRiteFireworksChallengeInfo challenge_info_list = 9; //9
  uint32 stage_id = 15; //15
}

message LanternRiteFireworksInfo {
  repeated LanternRiteFireworksStageInfo stage_info_list = 1; //6
}

message LanternRiteActivityDetailInfo {
  LanternProjectionInfo projection_info = 11; //13
  repeated SalvageStageInfo stage_info_list = 1; //5
  LanternRiteFireworksInfo fireworks_info = 6; //8
  bool is_mini_eldritch_dungeon_open = 7; //2
  bool is_content_closed = 9; //14
  bool is_taken_skin_reward = 3; //6
}

message FinishLanternProjectionReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8236; //8704;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 finish_time = 15; //3
  uint32 level_id = 10; //11
}

message FinishLanternProjectionRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8132; //8713;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 15; //13
}

message ViewLanternProjectionTipsReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8102; //8218;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_input_tips = 2; //9
  ClientInputType input_type = 1; //10
}

message ViewLanternProjectionTipsRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8742; //8590;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 3; //4
}

message ViewLanternProjectionLevelTipsReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8211; //8758;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 14; //7
}

message ViewLanternProjectionLevelTipsRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8637; //8411;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 6; //15
}

message SalvagePreventSettleInfo {
  bool is_new_record = 4; //8
  SalvagePreventGallerySettleInfo settle_info = 6; //14
}

message SalvagePreventSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8036; //8231;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 gallery_id = 5; //13
  SalvagePreventSettleInfo settle_info = 6; //12
}

message SalvageEscortSettleInfo {
  SalvageEscortGallerySettleInfo settle_info = 8; //3
  bool is_new_record = 9; //2
}

message SalvageEscortSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8967; //8499;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 gallery_id = 5; //14
  SalvageEscortSettleInfo settle_info = 2; //15
}

message LanternRiteTakeSkinRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8307; //8826;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message LanternRiteTakeSkinRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8672; //8777;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 4; //6
}

message SalvagePreventRestartReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8595; //8367;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 gallery_id = 10; //13
}

message SalvagePreventRestartRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8904; //8938;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 12; //10
  uint32 gallery_id = 3; //12
}

message SalvageEscortRestartReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8100; //8396;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 gallery_id = 6; //4
}

message SalvageEscortRestartRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8107; //8959;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 gallery_id = 6; //14
  int32 retcode = 12; //5
}

message LanternRiteStartFireworksReformReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8874; //8518;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 11; //2
  uint32 challenge_id = 12; //7
}

message LanternRiteFireworksReformFactorInfo {
  uint32 factor_value = 4; //5
  uint32 factor_id = 1; //13
}

message LanternRiteFireworksReformSkillInfo {
  uint32 skill_id = 3; //2
  bool is_unlock = 10; //11
  uint32 unlock_challenge_time = 6; //1
  uint32 unlock_challenge_id = 11; //14
}

message LanternRiteStartFireworksReformRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8757; //8862;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated LanternRiteFireworksReformFactorInfo factor_info_list = 1; //15
  uint32 fire_element_addition_ratio = 11; //13
  uint32 stamina_value = 7; //2
  repeated LanternRiteFireworksReformSkillInfo skill_info_list = 15; //8
  uint32 reform_score = 14; //6
  uint32 stage_id = 4; //12
  uint32 challenge_id = 12; //11
  uint32 fire_element_value = 2; //14
  int32 retcode = 10; //7
}

message LanternRiteDoFireworksReformReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8813; //8226;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 10; //12
  uint32 skill_id = 9; //11
  uint32 challenge_id = 14; //10
  uint32 factor_id = 15; //13
}

message LanternRiteDoFireworksReformRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8644; //8657;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 stage_id = 1; //7
  bool is_lucky = 7; //13
  uint32 challenge_id = 9; //8
  repeated LanternRiteFireworksReformFactorInfo factor_info_list = 6; //2
  uint32 stamina_value = 5; //10
  uint32 reform_score = 14; //15
  uint32 fire_element_value = 2; //11
  int32 retcode = 12; //3
  uint32 fire_element_addition_ratio = 3; //12
}

message LanternRiteEndFireworksReformReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8437; //8277;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 4; //9
  uint32 challenge_id = 8; //1
}

message LanternRiteEndFireworksReformRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8114; //8933;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_full_score = 4; //10
  int32 retcode = 13; //1
  bool is_unlock_fireworks = 6; //6
  uint32 stage_id = 9; //15
  bool is_unlock_new_skill = 11; //12
  bool is_stamina_up = 7; //4
  uint32 final_score = 8; //13
  uint32 challenge_id = 10; //5
  bool is_new_record = 12; //9
}

message UpdateSalvageBundleMarkReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8786; //8967;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 5; //14
  uint32 challenge_type = 4; //13
}

message UpdateSalvageBundleMarkRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8990; //8459;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 challenge_type = 6; //1
  int32 retcode = 1; //4
  uint32 stage_id = 10; //7
}

message MichiaeMatsuriStage {
  bool is_open = 8; //11
  uint32 open_time = 13; //5
  uint32 stage_id = 11; //12
}

message MichiaeMatsuriChestPositionInfo {
  Vector pos = 13; //10
  uint32 group_id = 4; //2
  uint32 config_id = 2; //11
}

message MichiaeMatsuriChallengePositionInfo {
  uint32 group_id = 5; //4
  uint32 gadget_id = 14; //7
  Vector pos = 13; //8
}

message MichiaeMatsuriActivityDetailInfo {
  repeated MichiaeMatsuriChallengePositionInfo challenge_pos_list = 8; //6
  uint32 gain_crystal_exp = 5; //13
  repeated uint32 unlocked_crystal_skill_list = 4; //2
  repeated MichiaeMatsuriChestPositionInfo chest_pos_list = 11; //10
  repeated MichiaeMatsuriStage stage_list = 7; //14
}

message MichiaeMatsuriDarkPressureLevelUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8618; //8825;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 dark_pressure_level = 15; //8
}

message MichiaeMatsuriInteractStatueReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8553; //8718;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 statue_entity_id = 3; //7
}

message MichiaeMatsuriInteractStatueRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8447; //8449;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 4; //10
}

message MichiaeMatsuriUnlockCrystalSkillReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8341; //8345;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 crystal_skill_id = 9; //1
}

message MichiaeMatsuriUnlockCrystalSkillRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8889; //8588;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 crystal_skill_id = 1; //1
  int32 retcode = 13; //14
}

message MichiaeMatsuriStartBossChallengeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8680; //8703;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 difficulty = 6; //5
  uint32 gadget_entity_id = 1; //15
}

message MichiaeMatsuriStartBossChallengeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8507; //8426;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 15; //15
}

message MichiaeMatsuriStartDarkChallengeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8004; //8054;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 worktop_entity_id = 4; //2
}

message MichiaeMatsuriStartDarkChallengeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8269; //8791;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //2
}

message MichiaeMatsuriRemoveChestMarkNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8051; //8726;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 config_id = 10; //9
  uint32 group_id = 8; //11
}

message MichiaeMatsuriRemoveChallengeMarkNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8168; //8072;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 gadget_id = 8; //9
  uint32 group_id = 12; //2
}

message MichiaeMatsuriGainCrystalExpUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8794; //8523;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 gain_crystal_exp = 13; //2
  uint32 activity_id = 4; //3
}

message BartenderTaskInfo {
  uint32 id = 4; //1
  bool is_finish = 7; //14
}

message BartenderLevelInfo {
  bool is_finish = 13; //7
  uint32 max_score = 12; //9
  uint32 id = 10; //4
}

message BartenderActivityDetailInfo {
  repeated uint32 unlock_item_list = 8; //3
  bool is_develop_module_open = 10; //13
  bool is_content_closed = 2; //6
  repeated BartenderLevelInfo unlock_level_list = 4; //5
  repeated uint32 unlock_formula_list = 14; //14
  repeated BartenderTaskInfo unlock_task_list = 15; //2
}

message BartenderCompleteOrderReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8867; //8414;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 cup_type = 15; //14
  uint32 qte_count = 12; //7
  uint32 quest_id = 9; //11
  repeated ItemParam item_list = 8; //10
  bool is_view_formula = 10; //9
  repeated uint32 optional_order_list = 11; //6
  uint32 retry_count = 6; //3
}

message BartenderCompleteOrderRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8192; //8125;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_new = 14; //10
  uint32 finish_order_id = 7; //3
  int32 retcode = 15; //4
  uint32 formula_id = 3; //6
  uint32 quest_id = 6; //15
  repeated uint32 affix_list = 11; //2
}

message BartenderCancelOrderReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8663; //8442;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 quest_id = 10; //3
}

message BartenderCancelOrderRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8908; //8837;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //9
  uint32 quest_id = 8; //3
}

message BartenderGetFormulaReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8258; //8462;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated ItemParam item_list = 4; //7
  uint32 quest_id = 6; //4
}

message BartenderGetFormulaRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8550; //8842;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_new = 12; //12
  int32 retcode = 3; //6
  repeated uint32 affix_list = 9; //8
  uint32 formula_id = 15; //11
}

message BartenderStartLevelReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8710; //8507;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 3; //5
}

message BartenderStartLevelRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8495; //8402;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 4; //5
  repeated uint32 order_list = 3; //13
  uint32 level_id = 14; //10
  uint32 time = 6; //8
}

message BartenderCancelLevelReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8567; //8771;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 4; //13
}

message BartenderCancelLevelRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8492; //8686;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 level_id = 8; //2
  int32 retcode = 2; //14
}

message BartenderLevelProgressNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8317; //8756;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_new_record = 10; //9
  bool is_finish = 5; //3
  uint32 level_id = 13; //15
  uint32 score = 3; //8
}

message BartenderFinishLevelReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8424; //8227;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 10; //6
}

message BartenderFinishLevelRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8364; //8093;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 14; //6
  uint32 level_id = 6; //1
}

message OfficialCustomDungeon {
  uint32 dungeon_id = 3; //11
  uint32 win_times = 14; //3
}

message UgcActivityDetailInfo {
  bool is_ugc_feature_closed = 5; //10
  uint32 custom_dungeon_group_id = 3; //12
  repeated OfficialCustomDungeon official_custom_dungeon_list = 10; //5
  bool is_enable_ugc = 15; //11
}

message CrystalLinkActivityDetailInfo {
  repeated CrystalLinkLevelInfo level_info_list = 3; //3
  uint32 difficulty_id = 12; //7
}

message CrystalLinkLevelInfo {
  repeated CrystalLinkTeamInfo team_info_list = 8; //10
  bool is_open = 7; //9
  uint32 level_id = 3; //14
  uint32 best_score = 6; //5
}

message CrystalLinkTeamInfo {
  repeated CrystalLinkBuffInfo buff_info_list = 10; //2
  repeated CrystalLinkAvatarInfo avatar_info_list = 13; //11
}

message CrystalLinkAvatarInfo {
  uint64 avatar_id = 7; //3
  bool is_trial = 9; //13
}

message CrystalLinkBuffInfo {
  uint32 effect_buff_id = 8; //1
  uint32 cond_buff_id = 7; //10
}

message CrystalLinkEnterDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8110; //8325;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 8; //7
  repeated CrystalLinkTeamInfo team_info_list = 7; //13
  uint32 difficulty_id = 4; //10
}

message CrystalLinkEnterDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8936; //8147;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 level_id = 11; //1
  uint32 difficulty_id = 2; //14
  int32 retcode = 3; //6
  repeated CrystalLinkTeamInfo team_info_list = 10; //8
}

message CrystalLinkDungeonAvatarInfo {
  bool is_trial = 12; //8
  uint64 avatar_guid = 2; //11
}

message CrystalLinkDungeonInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8343; //8858;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated CrystalLinkBuffInfo buff_info_list = 2; //8
  uint32 level_id = 6; //1
  bool is_upper_part = 15; //15
  uint32 difficulty_id = 9; //11
  repeated CrystalLinkDungeonAvatarInfo dungeon_avatar_info_list = 10; //3
  uint32 init_gallery_progress = 7; //7
}

message CrystalLinkRestartDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8056; //8022;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message CrystalLinkRestartDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8574; //8119;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //1
}

message QuickOpenActivityReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8999; //8178;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 activity_id = 14; //1
}

message QuickOpenActivityRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8108; //8882;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 6; //2
  uint32 activity_id = 7; //4
}

message IrodoriChessMapData {
  uint32 map_id = 13; //6
  IrodoriChessEntranceDetailInfo entrance_detail_info = 5; //7
  repeated uint32 equiped_card_list = 4; //3
  uint32 best_score = 3; //8
}

message IrodoriChessLevelData {
  uint32 open_time = 7; //8
  uint32 level_id = 10; //15
  IrodoriChessMapData hard_map_data = 15; //7
  IrodoriChessMapData normal_map_data = 14; //11
}

message IrodoriChessData {
  bool is_open = 7; //8
  repeated IrodoriChessLevelData level_data_list = 9; //1
}

message IrodoriFlowerData {
  repeated uint32 finished_theme_list = 5; //1
  repeated ItemParam used_flower_list = 12; //7
}

message IrodoriPoetryThemeData {
  repeated uint32 scanned_index_list = 6; //1
  repeated uint32 line_id_list = 4; //4
  uint32 max_progress = 13; //2
  uint32 theme_id = 1; //13
  uint32 progress = 14; //5
  uint32 min_progress = 15; //12
  uint32 selected_line_id = 7; //9
}

message IrodoriPoetryData {
  repeated IrodoriPoetryThemeData theme_data_list = 10; //3
  uint32 cur_theme_id = 2; //14
}

message IrodoriMasterLevelDetailInfo {
  bool is_finish = 6; //1
  uint32 diffculty = 3; //2
  uint32 min_finish_time = 14; //8
  bool is_have_try = 5; //7
}

message IrodoriMasterLevelInfo {
  repeated IrodoriMasterLevelDetailInfo detail_info = 14; //11
  uint32 level_id = 1; //14
}

message IrodoriActivityDetailInfo {
  repeated IrodoriMasterLevelInfo master_level_list = 15; //11
  IrodoriFlowerData flower_data = 6; //6
  IrodoriPoetryData poetry_data = 14; //8
  IrodoriChessData chess_data = 10; //14
}

message IrodoriEditFlowerCombinationReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8795; //8608;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 entity_id = 8; //13
  CustomGadgetTreeInfo combination_info = 9; //1
}

message IrodoriEditFlowerCombinationRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8542; //8833;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_already_finished = 10; //4
  bool is_can_take_reward = 1; //3
  int32 retcode = 2; //1
}

message IrodoriScanEntityReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8657; //8767;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 entity_id = 3; //11
}

message IrodoriScanEntityRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8540; //8026;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  IrodoriPoetryThemeData theme_data = 8; //10
  int32 retcode = 12; //5
  bool is_get_inspiration = 4; //1
}

message IrodoriFillPoetryReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8590; //8129;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 theme_id = 2; //9
  uint32 line_id = 13; //13
}

message IrodoriFillPoetryRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8762; //8880;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  IrodoriPoetryThemeData theme_data = 14; //13
  int32 retcode = 15; //12
}

message IrodoriChessEquipCardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8093; //8561;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_hard_map = 7; //2
  uint32 level_id = 12; //12
  uint32 card_id = 1; //9
}

message IrodoriChessEquipCardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8312; //8308;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 9; //2
  uint32 card_id = 14; //8
  uint32 level_id = 15; //5
  bool is_hard_map = 8; //12
}

message IrodoriChessUnequipCardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8610; //8057;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 card_id = 14; //8
  uint32 level_id = 7; //5
  bool is_hard_map = 5; //10
}

message IrodoriChessUnequipCardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8326; //8817;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_hard_map = 4; //10
  uint32 card_id = 14; //13
  uint32 level_id = 15; //14
  int32 retcode = 12; //11
}

message EnterIrodoriChessDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8505; //8717;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_hard_map = 6; //1
  uint32 level_id = 1; //11
}

message EnterIrodoriChessDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8598; //8546;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 4; //5
  bool is_hard_map = 3; //7
  uint32 level_id = 11; //13
}

message IrodoriMasterStartGalleryReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8933; //8165;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 3; //12
  uint32 difficulty = 5; //4
}

message IrodoriMasterStartGalleryRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8391; //8381;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 10; //12
}

message IrodoriMasterGalleryCgEndNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8260; //8061;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 1; //15
  uint32 gallery_id = 5; //4
}

message IrodoriMasterGallerySettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8194; //8340;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  IrodoriMasterGallerySettleInfo settle_info = 4; //13
  uint32 gallery_id = 8; //5
}

message PhotoPosData {
  Vector center = 3; //15
  uint32 open_time = 1; //2
  bool is_view = 9; //4
  uint32 pos_id = 10; //9
  bool is_open = 2; //6
}

message PhotoActivityDetailInfo {
  bool is_content_closed = 9; //4
  repeated PhotoPosData photo_pos_data_list = 13; //12
}

message PhotoActivityFinishReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8021; //8921;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 pos_id = 5; //15
  uint32 check_root_id = 3; //2
  bool is_succ = 11; //5
}

message PhotoActivityFinishRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8044; //8854;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 15; //1
  uint32 pos_id = 10; //8
}

message PhotoActivityClientViewReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8687; //8709;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 pos_id = 14; //13
}

message PhotoActivityClientViewRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8441; //8983;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 12; //3
  uint32 pos_id = 7; //8
}

message SpiceStageData {
  bool is_open = 10; //12
  uint32 success_times = 3; //1
  uint32 stage_id = 9; //6
}

message SpiceActivityDetailInfo {
  uint32 current_increase_avatar_fetter_times = 14; //15
  repeated SpiceStageData spice_stage_data_list = 11; //7
  uint32 increase_avatar_fetter_limit_times = 8; //13
}

message SpiceActivityFinishMakeSpiceReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8744; //8096;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 left_turns = 4; //4
  bool is_success = 12; //9
  repeated uint32 left_material_id_list = 1; //12
  uint32 stage_id = 9; //15
}

message SpiceActivityFinishMakeSpiceRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8964; //8481;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 stage_id = 1; //13
  int32 retcode = 2; //14
  bool is_success = 4; //3
}

message SpiceActivityProcessFoodReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8357; //8216;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated ItemParam normal_food_list = 7; //1
}

message SpiceActivityProcessFoodRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8845; //8772;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 7; //9
  repeated ItemParam special_food_list = 13; //14
  repeated ItemParam normal_food_list = 10; //1
}

message SpiceActivityGivingRecordNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8085; //8407;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 current_increase_avatar_fetter_times = 3; //3
  uint32 increase_avatar_fetter_limit_times = 4; //7
  uint32 avatar_id = 8; //11
}

message GachaStageData {

  uint32 stage_id = 15; //15
  map<uint32, uint32> target_num_map = 11; //14
  bool is_open = 4; //13
}

message GachaActivityDetailInfo {


  repeated uint32 have_get_robot_list = 14; //6
  repeated GachaStageData gacha_stage_data_list = 9; //4
  map<uint32, uint32> have_reward_robot_num_map = 15; //8
  uint32 tech_create_robot_id = 8; //3
  map<uint32, uint32> robot_num_map = 2; //5
  uint32 robot_finish_num = 5; //12
}

message GachaActivityPercentNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8200; //8450;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 item_stage = 14; //14
  map<uint32, uint32> target_num_map = 5; //6
  uint32 sub_item_stage = 13; //2
  uint32 percent = 15; //13
}

message GachaActivityUpdateElemNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8850; //8919;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 elem_type = 9; //10
}

message GachaActivityCreateRobotReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8503; //8614;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GachaActivityCreateRobotRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8997; //8610;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 robot_id = 15; //1
  int32 retcode = 2; //3
}

message GachaActivityTakeRewardReq {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8947; //8930;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  map<uint32, uint32> robot_num_map = 1; //12
}

message GachaActivityTakeRewardRsp {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8228; //8768;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  map<uint32, uint32> robot_num_map = 2; //3
  int32 retcode = 14; //13
}

message GachaActivityResetReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8367; //8163;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 4; //2
}

message GachaActivityResetRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8263; //8240;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 13; //13
  uint32 stage_id = 12; //6
}

message GachaActivityNextStageReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8201; //8257;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GachaActivityNextStageRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8592; //8918;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 stage_id = 4; //13
  int32 retcode = 12; //15
}

message ActivityGiveFriendGiftReq {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8919; //8233;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 uid = 15; //5
  uint32 schedule_id = 13; //1
  map<uint32, uint32> gift_num_map = 9; //4
}

message ActivityGiveFriendGiftRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8707; //8696;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 limit_gift_list = 2; //3
  uint32 schedule_id = 13; //4
  int32 retcode = 3; //10
}

message ActivityRecvGiftData {

  uint32 uid = 2; //15
  string nickname = 10; //3
  string remark_name = 15; //10
  ProfilePicture profile_picture = 5; //14
  map<uint32, uint32> gift_num_map = 8; //8
}

message ActivityGetRecvGiftListReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8622; //8725;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 5; //8
}

message ActivityGetRecvGiftListRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8705; //8120;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 15; //15
  repeated ActivityRecvGiftData recv_gift_list = 7; //11
  uint32 schedule_id = 10; //6
}

message ActivityHaveRecvGiftNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8600; //8733;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 10; //7
}

message ActivityAcceptGiftResultInfo {


  map<uint32, uint32> unaccept_gift_num_map = 4; //3
  uint32 uid = 11; //6
  map<uint32, uint32> accept_gift_num_map = 14; //13
}

message ActivityAcceptGiveGiftReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8679; //8095;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 2; //3
  uint32 uid = 7; //12
}

message ActivityAcceptGiveGiftRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8235; //8502;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  ActivityAcceptGiftResultInfo accept_gift_result_info = 9; //4
  int32 retcode = 6; //11
  uint32 schedule_id = 4; //10
}

message ActivityAcceptAllGiveGiftReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8116; //8113;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 10; //3
}

message ActivityAcceptAllGiveGiftRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8316; //8132;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated ActivityAcceptGiftResultInfo accept_gift_result_info_list = 14; //5
  uint32 schedule_id = 15; //10
  int32 retcode = 11; //9
}

message ActivityGetCanGiveFriendGiftReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8383; //8559;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 8; //8
}

message ActivityGetCanGiveFriendGiftRsp {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8965; //8848;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 10; //7
  int32 retcode = 12; //3
  map<uint32, uint32> gift_num_map = 4; //14
}

message ActivitySetGiftWishReq {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8597; //8017;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  map<uint32, uint32> gift_num_map = 7; //2
  uint32 schedule_id = 2; //14
}

message ActivitySetGiftWishRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8828; //8554;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 14; //15
  int32 retcode = 11; //7
}

message ActivityFriendGiftWishData {

  string nickname = 9; //7
  string remark_name = 2; //3
  ProfilePicture profile_picture = 3; //11
  map<uint32, uint32> gift_num_map = 1; //9
  uint32 uid = 4; //8
}

message ActivityGetFriendGiftWishListReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8246; //8806;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 11; //6
}

message ActivityGetFriendGiftWishListRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8145; //8253;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 15; //6
  repeated ActivityFriendGiftWishData friend_gift_wish_list = 13; //11
  uint32 schedule_id = 8; //10
}

message LuminanceStoneChallengeActivityDetailInfo {
  uint32 best_score = 10; //11
  bool is_content_closed = 4; //6
  bool is_final_gallery_complete = 12; //12
  uint32 current_stage_id = 11; //15
}

message LuminanceStoneChallengeSettleInfo {
  LuminanceStoneChallengeGallerySettleInfo settle_info = 11; //13
  bool is_new_record = 8; //12
}

message LuminanceStoneChallengeSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8545; //8186;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 gallery_id = 14; //10
  LuminanceStoneChallengeSettleInfo settle_info = 1; //13
}

message RogueDiaryDungeonRecord {
  bool is_finish = 7; //10
  uint32 max_round = 12; //5
  uint32 finish_time = 9; //15
  uint32 difficulty = 13; //13
}

message RogueDiaryStageInfo {
  uint32 stage_id = 3; //1
  RogueDiaryDungeonRecord best_record = 4; //12
  bool is_have_try = 9; //10
}

message RogueDiaryProgress {
  uint32 difficulty = 11; //7
  repeated uint32 optional_card_list = 12; //4
  bool is_enter_dungeon = 5; //9
  uint32 stage_id = 3; //12
  uint32 cur_round = 7; //3
}

message RogueDiaryActivityDetailInfo {
  repeated RogueDiaryStageInfo stage_list = 8; //11
  bool is_have_progress = 13; //10
  bool is_content_closed = 1; //2
  RogueDiaryProgress cur_progress = 5; //7
}

message RogueDiaryAvatar {
  ActivityDungeonAvatar avatar = 6; //2
  uint32 level = 2; //14
  uint32 tired_round = 9; //13
  repeated RogueDiaryAvatarDisableStatus disable_status_list = 4; //9
}

message RogueDiaryRoomInfo {
  repeated Uint32Pair monster_list = 8; //1
  bool is_boss = 4; //3
  uint32 config_id = 14; //7
}

message StartRogueDiaryPlayReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8484; //8419;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 difficulty = 12; //1
  uint32 stage_id = 8; //12
}

message StartRogueDiaryPlayRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8780; //8385;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 3; //11
  repeated RogueDiaryAvatar trial_avatar_list = 8; //13
  repeated uint32 rand_card_list = 2; //12
  repeated RogueDiaryAvatar avatar_list = 13; //9
}

message ResetRogueDiaryPlayReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8702; //8127;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 10; //5
}

message ResetRogueDiaryPlayRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8282; //8948;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 15; //11
}

message EnterRogueDiaryDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8647; //8943;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 chosen_card_list = 2; //9
  repeated RogueDiaryAvatar chosen_avatar_list = 5; //11
}

message EnterRogueDiaryDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8395; //8352;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //9
}

message ResumeRogueDiaryDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8406; //8838;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 11; //2
}

message ResumeRogueDiaryDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8382; //8989;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //15
}

message RogueDiaryDungeonInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8695; //8597;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 6; //12
  repeated uint32 round_monster_list = 11; //15
  uint32 time = 7; //4
  uint32 cur_room = 1; //5
  uint32 cur_round = 12; //6
  uint32 coin = 14; //11
  uint32 difficulty = 4; //8
  uint32 dungeon_id = 15; //14
  repeated RogueDiaryRoomInfo room_list = 5; //7
  repeated uint32 round_card_list = 13; //10
}

message RogueDiaryDungeonSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8224; //8895;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 explore_time = 3; //1
  bool is_finish = 2; //3
  uint32 cur_round = 12; //2
}

message StartRogueDiaryRoomReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8792; //8159;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 room_difficulty = 1; //13
  bool is_select_hard = 4; //1
}

message StartRogueDiaryRoomRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8413; //8793;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //4
}

message RogueDiaryTiredAvatarNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8243; //8514;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated RogueDiaryAvatar optianal_tired_avatar_list = 15; //10
  uint32 reserve_avatar_num = 10; //6
  uint32 tired_type = 8; //8
  bool is_need_show = 12; //7
}

message ReserveRogueDiaryAvatarReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8607; //8748;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated RogueDiaryAvatar reserve_avatar_list = 1; //6
}

message ReserveRogueDiaryAvatarRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8800; //8799;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 14; //13
}

message GetRogueDairyRepairInfoReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8988; //8014;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GetRogueDairyRepairInfoRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8881; //8447;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 9; //3
}

message RefreshRogueDiaryCardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8157; //8991;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 refresh_card_list = 4; //8
}

message RefreshRogueDiaryCardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8910; //8028;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 rand_card_list = 9; //15
  int32 retcode = 3; //1
}

message RogueFinishRepairReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8049; //8363;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 chosen_card_list = 4; //1
  repeated RogueDiaryAvatar chosen_avatar_list = 13; //8
}

message RogueFinishRepairRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8860; //8535;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //3
}

message TryInterruptRogueDiaryDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8804; //8617;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message TryInterruptRogueDiaryDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8184; //8903;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //4
}

message RogueDiaryRepairInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8681; //8641;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 10; //8
  repeated uint32 select_card_list = 1; //14
  repeated RogueDiaryAvatar avatar_list = 13; //13
  repeated RogueDiaryRoomInfo room_list = 5; //2
  repeated uint32 rand_card_list = 12; //10
  repeated RogueDiaryAvatar select_avatar_list = 7; //9
  repeated uint32 chosen_card_list = 8; //15
  repeated RogueDiaryAvatar trial_avatar_list = 3; //11
}

message RetryCurRogueDiaryDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8009; //8398;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message RetryCurRogueDiaryDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8523; //8334;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 12; //5
}

message RogueDiaryReviveAvatarReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8076; //8038;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  RogueDiaryAvatar revive_avatar = 13; //2
}

message RogueDiaryReviveAvatarRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8434; //8343;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 10; //8
}

message TryEnterNextRogueDiaryDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8960; //8280;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message TryEnterNextRogueDiaryDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8659; //8362;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 13; //4
}

message RogueDiaryCoinAddNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8264; //8602;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 num = 7; //10
}

message SummerTimeV2DetailInfo {
  repeated SummerTimeV2DungeonStageInfo dungeon_stage_info_list = 11; //13
  uint32 cur_dungeon_reward_limit = 10; //10
  bool is_content_closed = 7; //4
  uint32 taken_reward_count = 14; //5
  repeated SummerTimeV2BoatStageInfo boat_stage_info_list = 6; //15
}

message SummerTimeV2DungeonStageInfo {
  uint32 stage_id = 6; //10
  bool is_open = 14; //3
  uint32 open_time = 13; //12
  bool is_prev_dungeon_succeed = 4; //15
}

message SummerTimeV2BoatStageInfo {
  uint32 open_time = 3; //7
  bool is_open = 14; //14
  uint32 stage_id = 2; //10
  uint32 best_score = 4; //13
}

message SummerTimeV2BoatSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8520; //8870;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  SummerTimeV2BoatGallerySettleInfo settle_info = 2; //11
  uint32 stage_id = 14; //7
  bool is_new_record = 12; //2
  uint32 gallery_id = 10; //1
}

message ActivityPushTipsData {
  ActivityPushTipsState state = 12; //10
  uint32 activity_push_tips_id = 11; //4
}

message ActivityPushTipsInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8527; //8513;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 6; //14
  repeated ActivityPushTipsData activity_push_tips_data_list = 7; //3
  uint32 activity_id = 9; //10
}

message ActivityReadPushTipsReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8896; //8145;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 activity_push_tips_id_list = 11; //14
  uint32 activity_id = 14; //7
}

message ActivityReadPushTipsRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8938; //8574;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 8; //9
}

message SummerTimeV2RestartBoatGalleryReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8396; //8476;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 gallery_id = 13; //5
}

message SummerTimeV2RestartBoatGalleryRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8972; //8004;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 gallery_id = 15; //13
  int32 retcode = 12; //8
}

message SummerTimeV2RestartDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8738; //8346;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message SummerTimeV2RestartDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 8606; //8996;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 3; //3
}

message IslandPartyStageData {
  uint32 stage_id = 2; //13
  bool is_open = 1; //14
  uint32 best_score = 5; //4
}

message IslandPartyDetailInfo {
  repeated IslandPartyStageData stage_data_list = 5; //15
}

message IslandPartySettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22820; //24601;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_new_record = 14; //13
  GalleryStopReason reason = 13; //1
  repeated IslandPartyGallerySettleInfo settle_info_list = 9; //8
  repeated ExhibitionDisplayInfo score_list = 8; //6
  uint32 time_remain = 2; //15
}

message GearLevelData {
  uint32 shortest_time = 1; //8
  uint32 open_time = 4; //11
  uint32 last_duration = 12; //5
  uint32 level_id = 7; //12
  bool is_finished = 13; //9
  bool is_open = 9; //3
}

message JigsawPictureData {
  bool is_finished = 8; //7
  uint32 shortest_time = 12; //10
  bool is_open = 4; //5
  uint32 last_duration = 11; //6
}

message GearActivityDetailInfo {
  repeated GearLevelData gear_level_data_list = 9; //14
  JigsawPictureData jigsaw_picture_data = 13; //8
}

message GearActivityStartPlayGearReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21124; //23467;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 11; //5
}

message GearActivityStartPlayGearRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21492; //21025;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 level_id = 1; //9
  int32 retcode = 5; //2
}

message GearColumnInfo {
  uint32 gear_column_index = 15; //7
  bool is_overturn = 8; //3
  bool has_gear = 9; //2
  uint32 gear_id = 6; //11
  uint32 placement_layer = 11; //6
}

message GearActivityFinishPlayGearReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20920; //21834;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_success = 15; //4
  bool use_clue = 13; //12
  repeated GearColumnInfo gear_column_info_list = 9; //9
  uint32 level_id = 2; //5
}

message GearActivityFinishPlayGearRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24722; //21800;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 9; //2
  bool is_success = 15; //15
  uint32 level_id = 7; //3
}

message GearActivityStartPlayPictureReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22919; //24550;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GearActivityStartPlayPictureRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23454; //23388;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //6
}

message GearActivityFinishPlayPictureReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24600; //21054;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_success = 3; //8
}

message GearActivityFinishPlayPictureRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21610; //21851;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 8; //12
  bool is_success = 7; //6
}

message GravenInnocencePhotoStageInfo {
  bool is_finished = 5; //11
  uint32 stage_id = 12; //6
  bool is_open = 13; //9
}

message GravenInnocencePhotoObjectInfo {
  uint32 object_id = 1; //1
  uint32 finish_time = 10; //4
  uint32 param = 15; //14
}

message GravenInnocencePhotoInfo {
  repeated GravenInnocencePhotoStageInfo stage_info_list = 3; //5
  repeated GravenInnocencePhotoObjectInfo object_info_list = 10; //7
}

message GravenInnocenceCampStageInfo {
  bool is_open = 8; //15
  uint32 level_id = 12; //10
  uint32 stage_id = 14; //9
  bool is_finished = 13; //3
}

message GravenInnocenceCampInfo {
  repeated GravenInnocenceCampStageInfo stage_info_list = 4; //5
}

message GravenInnocenceRaceLevelInfo {
  uint32 level_id = 7; //13
  uint32 max_score = 15; //14
  bool is_open = 13; //1
}

message GravenInnocenceRaceInfo {
  repeated GravenInnocenceRaceLevelInfo level_info_list = 7; //11
}

message GravenInnocenceCarveStageInfo {
  uint32 stage_id = 2; //9
  bool is_open = 12; //1
}

message GravenInnocenceCarveInfo {
  repeated GravenInnocenceCarveStageInfo stage_info_list = 4; //10
  uint32 can_edit_count = 15; //7
  repeated uint32 has_edit_config_id_list = 12; //6
}

message GravenInnocenceDetailInfo {
  bool is_content_closed = 8; //8
  GravenInnocenceRaceInfo race_info = 13; //10
  GravenInnocencePhotoInfo photo_info = 5; //7
  GravenInnocenceCarveInfo carve_info = 12; //13
  GravenInnocenceCampInfo camp_info = 11; //12
}

message GravenInnocenceRaceSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20447; //20681;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_new_record = 11; //4
  uint32 gallery_id = 14; //6
  uint32 score = 6; //5
  GalleryStopReason reason = 9; //2
  uint32 total_coint_count = 13; //13
  uint32 remain_time = 12; //10
  uint32 challenge_progress = 3; //1
  uint32 coin_count = 8; //8
  bool is_success = 1; //7
  uint32 level_id = 2; //11
}

message GravenInnocenceRaceRestartReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21280; //22882;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 gallery_id = 9; //6
}

message GravenInnocenceRaceRestartRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24627; //21880;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 12; //8
  uint32 gallery_id = 8; //6
}

message GravenInnocenceEditCarveCombinationReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23125; //23107;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 entity_id = 5; //2
  CustomGadgetTreeInfo combination_info = 15; //11
}

message GravenInnocenceEditCarveCombinationRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24700; //20702;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //5
}

message GravenInnocencePhotoFinishReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23521; //21750;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 param = 9; //1
  uint32 object_id = 3; //4
}

message GravenInnocencePhotoFinishRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22592; //23948;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 object_id = 5; //6
  uint32 param = 11; //11
  int32 retcode = 2; //12
}

message GravenInnocencePhotoReminderNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20385; //23864;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 group_bundle_id = 11; //14
  uint32 reminder_id = 9; //6
}

message InstableSprayTeamInfo {
  repeated InstableSprayAvatarInfo avatar_info_list = 12; //13
}

message InstableSprayStageInfo {
  bool is_finished = 13; //10
  uint32 max_score = 2; //3
  uint32 stage_id = 8; //4
  repeated InstableSprayTeamInfo team_info_list = 3; //6
}

message InstableSprayDetailInfo {
  repeated InstableSprayStageInfo stage_info_list = 9; //9
}

message InstableSprayAvatarInfo {
  bool is_trial = 2; //8
  uint64 avatar_id = 12; //2
}

message InstableSprayEnterDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24659; //24312;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 4; //13
  uint32 difficulty = 1; //2
  repeated InstableSprayAvatarInfo avatar_info_list = 8; //7
}

message InstableSprayEnterDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23633; //23381;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 level_id = 8; //11
  int32 retcode = 14; //9
}

message InstableSpraySwitchTeamReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23451; //24857;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated InstableSprayAvatarInfo avatar_info_list = 11; //13
}

message InstableSpraySwitchTeamRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20452; //24152;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 level_id = 14; //1
  int32 retcode = 12; //8
}

message InstableSprayLevelFinishNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24172; //21961;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_need_switch_team = 6; //11
  bool is_skip_black_screen = 14; //7
  uint32 round = 2; //15
  uint32 stage_id = 11; //8
  uint32 level_id = 9; //10
}

message InstableSprayRestartDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20911; //23678;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated InstableSprayAvatarInfo avatar_info_list = 3; //6
}

message InstableSprayRestartDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21689; //24923;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 level_id = 9; //1
  int32 retcode = 12; //13
}

message MuqadasPotionLevelData {
  uint32 level_id = 14; //15
  uint32 max_score = 6; //9
  bool is_open = 10; //10
}

message MuqadasPotionActivityDetailInfo {
  repeated MuqadasPotionLevelData muqadas_potion_level_data_list = 10; //8
}

message MuqadasPotionActivityEnterDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20473; //24602;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 5; //12
}

message MuqadasPotionActivityEnterDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20138; //21804;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 15; //6
  uint32 level_id = 8; //9
}

message MuqadasPotionDungeonSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23665; //20005;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 final_score = 14; //11
  uint32 capture_weakness_count = 7; //15
  bool is_success = 3; //6
  uint32 level_id = 11; //10
  bool is_new_record = 2; //2
}

message MuqadasPotionRestartDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20619; //22391;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message MuqadasPotionRestartDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22672; //21208;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 15; //5
}

message MuqadasPotionCaptureWeaknessReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20534; //20011;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 capture_weakness_count = 12; //10
  uint32 level_id = 10; //15
}

message MuqadasPotionCaptureWeaknessRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22408; //24081;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 4; //12
}

message TreasureSeelieRegionData {
  bool is_done = 8; //12
  uint32 open_day = 3; //6
  uint32 opened_chest_num = 10; //10
  float region_radius = 12; //7
  bool is_open = 1; //9
  uint32 open_time = 5; //8
  Vector region_center_pos = 6; //11
  uint32 scene_id = 4; //13
  uint32 total_chest_num = 9; //15
  uint32 region_id = 13; //1
}

message TreasureSeelieActivityDetailInfo {
  uint32 treasure_close_time = 8; //10
  bool is_content_closed = 6; //8
  repeated TreasureSeelieRegionData region_data_list = 5; //14
}

message TreasureSeelieCollectOrbsNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23448; //20754;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 current_num = 1; //11
  uint32 total_num = 9; //5
}

message RockBoardExploreStageData {
  bool is_finish = 1; //6
  uint32 open_time = 7; //7
  bool is_open = 6; //5
  uint32 stage_id = 9; //3
}

message RockBoardExploreDetailInfo {
  repeated RockBoardExploreStageData stage_data_list = 10; //9
}

message VintageHuntingStageData {
  uint32 open_time = 1; //10
  bool is_finish = 11; //3
  bool is_open = 12; //9
  uint32 record_value = 2; //12
  uint32 stage_id = 10; //7
}

message VintagePresentLevelData {
  uint32 present_id = 5; //10
  bool is_open = 2; //11
  bool is_finish = 3; //5
  uint32 stage_id = 7; //1
}

message VintagePresentStageData {

  uint32 open_time = 14; //1
  uint32 stage_id = 15; //15
  bool is_finish = 4; //13
  bool is_open = 9; //10
  map<uint32, VintagePresentLevelData> present_level_map = 7; //2
}

message VintageBoothUsedItemData {
  bool is_open = 2; //7
  uint32 gadget_id = 12; //8
}

message VintageCampChallengeLevelData {
  uint32 stage_id = 8; //14
  uint32 level_id = 9; //11
  bool is_finish = 6; //8
  bool is_open = 11; //6
}

message VintageCampChallengeStageData {

  bool is_open = 13; //5
  uint32 max_finished_level = 7; //11
  uint32 open_time = 10; //3
  bool is_finish = 4; //10
  uint32 stage_id = 9; //4
  map<uint32, VintageCampChallengeLevelData> camp_level_map = 1; //2
}

message VintageMarketTraderInfo {
  uint32 trader_id = 6; //7
  repeated ItemParam available_item_list = 10; //9
}

message VintageMarketDealInfo {

  map<uint32, VintageMarketTraderInfo> trader_item_info_map = 13; //13
}

message VintageMarketStoreInfo {
  repeated uint32 cur_attr_list = 12; //5
  repeated uint32 next_aim_attr_list = 10; //14
  repeated uint32 strategy_list = 2; //2
  uint32 slot_count = 7; //3
  uint32 store_id = 8; //10
}

message VintageMarketStoreOpInfo {
  repeated uint32 strategy_list = 4; //5
  uint32 help_uid = 14; //9
  uint32 store_id = 2; //2
  uint32 help_skill_id = 13; //7
  repeated uint32 add_attr_list = 3; //15
}

message VintageMarketInfo {

  bool is_help_module_open = 1035; //1485
  bool is_store_content_interrupt = 10; //15
  VintageMarketDealInfo deal_info = 14; //11
  uint32 store_round = 2; //7
  repeated uint32 store_round_income_list = 1216; //207
  bool is_store_content_finish = 8; //5
  repeated uint32 cur_env_event_list = 1; //8
  bool is_market_content_open = 4; //10
  uint32 next_can_use_help_round = 458; //1800
  bool is_market_content_finish = 6; //2
  repeated uint32 viewed_strategy_list = 13; //14
  uint32 prev_coin_c_num = 12; //3
  map<uint32, bool> bargain_info_map = 9; //6
  uint32 dividend_reward_count = 255; //1798
  repeated uint32 cur_npc_event_list = 3; //4
  bool is_help_in_cd = 1190; //366
  uint32 prev_coin_b_num = 11; //1
  repeated VintageMarketStoreInfo open_store_list = 7; //9
  uint32 help_skill_id = 1222; //760
  bool is_round_tips_view = 5; //12
  bool is_strategy_module_open = 1164; //876
  repeated uint32 unlock_strategy_list = 15; //13
}

message VintageActivityDetailInfo {



  VintageMarketInfo market_info = 1; //2
  map<uint32, VintageHuntingStageData> hunting_stage_map = 7; //7
  VintageBoothUsedItemData booth_data = 15; //5
  map<uint32, VintageCampChallengeStageData> camp_stage_map = 3; //13
  map<uint32, VintagePresentStageData> present_stage_map = 2; //4
  bool is_content_closed = 12; //11
}

message VintageMarketDeliverItemReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21636; //23141;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated ItemParam deliver_item_list = 15; //3
  uint32 trader_id = 4; //5
}

message VintageMarketDeliverItemRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21050; //22181;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 10; //6
  uint32 trader_id = 14; //3
}

message VintageHuntingFirstStageSettleInfo {
  uint32 elite_cnt = 8; //10
  uint32 timid_cnt = 3; //2
  uint32 brutal_cnt = 1; //6
  uint32 score = 13; //14
}

message VintageHuntingSecondStageSettleInfo {

  map<uint32, uint32> animal_count_map = 7; //6
  uint32 capture_animal_num = 1; //7
  uint32 total_num = 14; //15
}

message VintageHuntingThirdStageSettleInfo {
  uint32 left_time = 7; //13
  bool is_success = 6; //9
}

message SceneGalleryVintageHuntingSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21852; //20324;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool has_new_watcher = 1; //11
  uint32 stage_id = 2; //9
  uint32 total_watcher_num = 9; //12
  uint32 finished_watcher_num = 5; //6
  bool is_new_record = 6; //1
  oneof info {
    VintageHuntingFirstStageSettleInfo first_stage_info = 15; //4
    VintageHuntingSecondStageSettleInfo second_stage_info = 8; //10
    VintageHuntingThirdStageSettleInfo third_stage_info = 4; //8
  }
}

message VintagePresentFinishNoify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22633; //24142;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 present_id = 7; //7
}

message VintageDecorateBoothReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22772; //20846;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 entity_id = 1; //6
  CustomGadgetTreeInfo combination_info = 11; //11
}

message VintageDecorateBoothRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20174; //20993;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //1
}

message VintageHuntingStartGalleryReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23502; //21780;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 5; //7
}

message VintageHuntingStartGalleryRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24063; //21951;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 11; //4
}

message VintageCampGroupBundleRegisterNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23285; //24244;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 group_bundle_id = 5; //10
}

message VintageCampStageFinishNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23644; //22830;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 stage_id = 7; //11
}

message VintageMarketStartStorePlayReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20758; //22864;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 store_round = 1; //5
}

message VintageMarketStartStorePlayRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21141; //22130;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 prev_round_coin_b = 13; //7
  uint32 store_round = 6; //2
  uint32 prev_round_coin_c = 1; //5
  int32 retcode = 3; //8
}

message VintageMarketFinishStorePlayReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23780; //20676;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 store_round = 8; //9
  repeated VintageMarketStoreOpInfo store_op_list = 12; //3
}

message VintageMarketFinishStorePlayRsp {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23367; //23462;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 trigger_env_event_list = 5; //8
  uint32 store_round = 6; //12
  repeated uint32 trigger_npc_event_list = 2; //10
  repeated uint32 low_attr_store_list = 9; //11
  uint32 round_coin_b_income = 14; //9
  uint32 round_delta_coin_c = 7; //1
  map<uint32, uint32> store_income_map = 1; //3
  int32 retcode = 11; //7
  uint32 round_total_income = 4; //14
  uint32 display_return_coin_b = 15; //15
}

message VintagePresentFinishNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23457; //20086;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 present_id = 4; //3
}

message VintageMarketStoreUnlockSlotReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24687; //20626;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 store_id = 4; //10
}

message VintageMarketStoreUnlockSlotRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20112; //20733;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 8; //1
  uint32 slot_count = 10; //6
  uint32 store_id = 5; //10
}

message VintageMarketStoreChooseStrategyReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20971; //21248;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 store_id = 10; //6
  repeated VintageMarketStoreOpInfo store_op_list = 15; //9
  repeated uint32 strategy_list = 2; //8
}

message VintageMarketStoreChooseStrategyRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23497; //24860;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 store_id = 15; //15
  int32 retcode = 8; //9
  repeated uint32 strategy_list = 7; //2
}

message VintageMarketStoreViewStrategyReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24026; //21700;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 strategy_id = 10; //1
  repeated uint32 strategy_list = 15; //14
}

message VintageMarketStoreViewStrategyRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21369; //21814;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //2
  repeated uint32 strategy_list = 7; //3
  uint32 strategy_id = 15; //14
}

message VintageMarketDividendFinishNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20769; //23147;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 coin_a = 11; //5
  uint32 coin_c = 3; //11
}

message VintageMarketNpcEventFinishNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21065; //24201;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 unlock_strategy_list = 15; //15
  uint32 coin_c = 8; //12
  uint32 coin_a = 12; //4
}

message WindFieldDetailInfo {
  repeated WindFieldStageInfo stage_info_list = 9; //11
}

message WindFieldStageInfo {
  bool is_open = 2; //12
  uint32 open_time = 13; //14
  uint32 stage_id = 10; //8
}

message WindFieldRestartDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21270; //20731;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message WindFieldRestartDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21482; //24712;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 3; //5
}

message FungusDetail {
  bool is_cultivate = 12; //5
  uint32 capture_order = 14; //6
  uint32 name_id = 4; //14
  uint32 min_cultivate_step = 3; //1
  uint32 fungus_id = 6; //9
}

message FungusPlotStageDetail {
  bool is_open = 15; //3
  uint32 stage_id = 3; //15
}

message FungusTrainingDungeonDetail {
  bool is_open = 8; //13
  uint32 dungeon_id = 6; //12
  uint32 best_score = 7; //9
}

message FungusFighterMonsterDetail {
  uint32 fungus_id = 10; //2
  float cur_hp_percentage = 9; //7
  bool is_alive = 12; //9
}

message FungusTrainingMonsterPreviewDetail {
  uint32 monster_id = 3; //8
  uint32 level = 5; //10
  repeated uint32 affix_list = 11; //7
}

message FungusTrainingPoolPreviewDetail {
  uint32 pool_id = 10; //8
  repeated FungusTrainingMonsterPreviewDetail monster_preview_detail_list = 5; //6
}

message FungusTrainingProgressDetail {
  uint32 cur_round = 1; //9
  uint32 dungeon_id = 13; //10
  repeated FungusTrainingPoolPreviewDetail monster_pool_preview_list = 9; //5
  repeated FungusFighterMonsterDetail monster_detail_list = 2; //6
  uint32 total_used_time = 4; //7
  repeated uint32 backup_monster_list = 15; //4
  repeated uint32 choosen_monster_list = 8; //8
}

message FungusFighterDetailInfo {
  repeated FungusPlotStageDetail plot_stage_detail_list = 6; //6
  repeated FungusDetail fungus_detail_list = 3; //4
  repeated uint32 unlock_camp_id_list = 9; //12
  repeated FungusTrainingProgressDetail training_dungeon_progress_detail_list = 4; //3
  repeated FungusTrainingDungeonDetail training_dungeon_detail_list = 12; //15
  repeated uint32 finish_camp_id_list = 2; //1
  repeated uint32 unlock_cultivate_id_list = 13; //8
}

message EnterFungusFighterPlotDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23842; //23053;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 dungeon_id = 11; //14
  repeated uint32 fungus_id_list = 6; //8
}

message EnterFungusFighterPlotDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23496; //21008;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 3; //10
  uint32 dungeon_id = 4; //15
  repeated uint32 fungus_id_list = 13; //2
}

message FungusFighterPlotInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24391; //22174;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 fungus_id_list = 1; //11
  uint32 dungeon_id = 12; //4
}

message FungusCultivateReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22123; //21749;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 cultivate_id = 15; //8
  uint32 copy_step = 7; //7
  uint32 exchange_step = 13; //11
  uint32 cultivate_step = 2; //13
  uint32 rotate_step = 8; //15
  uint32 undo_step = 3; //6
  uint32 time = 12; //2
  uint32 place_step = 5; //10
}

message FungusCultivateRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23930; //23532;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 cultivate_id = 13; //4
  bool is_new_record = 2; //13
  int32 retcode = 12; //10
}

message FungusRenameReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21219; //22006;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 name_id = 2; //1
  uint32 fungus_id = 5; //11
}

message FungusRenameRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23858; //20066;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 12; //5
  uint32 fungus_id = 3; //15
  uint32 name_id = 7; //12
}

message EnterFungusFighterTrainingDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22698; //23860;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 dungeon_id = 10; //3
}

message EnterFungusFighterTrainingDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21261; //21593;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 15; //7
  uint32 dungeon_id = 14; //11
}

message FungusFighterRuntimeDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22858; //24674;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  FungusTrainingProgressDetail progress_detail = 14; //7
}

message FungusFighterTrainingSelectFungusReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21917; //23903;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 backup_fungus_id_list = 5; //11
  repeated uint32 fight_fungus_id_list = 2; //7
}

message FungusFighterTrainingSelectFungusRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20972; //21570;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 15; //7
}

message FungusFighterTrainingGallerySettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23677; //23931;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_new_record = 5; //14
  uint32 total_used_time = 9; //4
  GalleryStopReason reason = 3; //5
  uint32 dead_fungus_num = 12; //1
  uint32 settle_round = 11; //15
  bool is_final_settle = 7; //10
  uint32 gadget_life_percentage = 14; //11
  uint32 final_score = 6; //9
}

message FungusFighterClearTrainingRuntimeDataReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23642; //24137;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 dungeon_id = 3; //6
}

message FungusFighterClearTrainingRuntimeDataRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22321; //22991;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //8
}

message FungusFighterUseBackupFungusReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22618; //21266;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 backup_fungus_id_list = 13; //1
}

message FungusFighterUseBackupFungusRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23332; //23428;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //12
}

message FungusFighterRestartTraningDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20900; //23980;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message FungusFighterRestartTraningDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24603; //22890;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 10; //11
}

message CharAmusementStageData {
  uint32 finish_time = 11; //15
  bool is_open = 9; //12
  uint32 stage_id = 12; //6
}

message CharAmusementDetailInfo {
  repeated CharAmusementStageData stage_data_list = 1; //1
}

message CharAmusementSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21939; //23133;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_succ = 13; //3
  uint32 finish_time = 9; //14
  bool is_new_record = 11; //2
}

message EffigyChallengeV2LevelData {
  uint32 challenge_mode_difficulty_pass = 9; //1
  uint32 level_id = 15; //5
  uint32 challenge_mode_last_choose_skill_no = 5; //10
  uint32 best_cost_time = 7; //12
  bool is_level_open = 13; //7
  uint32 challenge_mode_difficulty_open = 14; //13
}

message EffigyChallengeV2DetailInfo {
  repeated EffigyChallengeV2LevelData level_data_list = 8; //3
}

message EffigyChallengeV2EnterDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23798; //23489;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 challenge_mode_difficulty = 8; //7
  uint32 level_id = 10; //12
  uint32 challenge_mode_skill_no = 12; //11
}

message EffigyChallengeV2EnterDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23456; //24917;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 challenge_mode_skill_no = 3; //11
  int32 retcode = 15; //10
  uint32 challenge_mode_difficulty = 5; //14
  uint32 level_id = 7; //13
}

message EffigyChallengeV2RestartDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21461; //24522;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message EffigyChallengeV2RestartDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21563; //23167;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 3; //5
}

message EffigyChallengeV2ChooseSkillReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22489; //21269;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 15; //6
  uint32 challenge_mode_skill_no = 12; //7
}

message EffigyChallengeV2ChooseSkillRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21025; //22448;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 level_id = 14; //15
  int32 retcode = 9; //9
  uint32 challenge_mode_skill_no = 13; //3
}

message EffigyChallengeV2DungeonInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20626; //22835;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 challenge_mode_difficulty = 4; //2
  uint32 skill_no = 10; //4
  uint32 level_id = 6; //13
}

message CoinCollectTeamInfoData {
  repeated uint32 avatar_costume_id_list = 5; //12
  uint32 player_uid = 7; //2
  bool is_host = 15; //14
  uint32 choose_skill_no = 3; //4
  repeated uint32 avatar_lv_list = 6; //10
  repeated uint32 avatar_id_list = 2; //9
}

message CoinCollectLevelData {
  uint32 level_id = 7; //3
  repeated CoinCollectTeamInfoData double_best_team_info_list = 6; //12
  uint32 last_choose_skill_no = 8; //9
  uint32 single_best_collect_num = 14; //15
  bool is_have_watched_cutscene = 2; //1
  uint32 single_best_pass_time_ms = 3; //2
  bool is_have_play_single_level = 9; //11
  bool is_level_open = 12; //8
  bool is_have_play_double_level = 15; //6
  CoinCollectTeamInfoData single_best_team_info = 5; //13
  uint32 double_best_collect_num = 10; //14
  uint32 double_best_pass_time_ms = 13; //10
}

message CoinCollectDetailInfo {
  repeated CoinCollectLevelData level_data_list = 6; //10
}

message CoinCollectChooseSkillReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20307; //21214;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 choose_skill_no = 7; //5
  uint32 level_id = 10; //2
}

message CoinCollectChooseSkillRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24303; //24700;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 level_id = 5; //4
  uint32 choose_skill_no = 1; //6
  int32 retcode = 7; //5
}

message RestartCoinCollectPlaySingleModeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22217; //22367;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 13; //2
}

message RestartCoinCollectPlaySingleModeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22874; //24828;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 9; //8
  uint32 level_id = 14; //11
}

message EndCoinCollectPlaySingleModeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20052; //23216;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 multistage_play_index = 9; //15
}

message EndCoinCollectPlaySingleModeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20893; //20302;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //13
}

message CoinCollectPrepareReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20471; //21718;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message CoinCollectPrepareRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23815; //20930;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //1
}

message CoinCollectInterruptPlayReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24934; //22934;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 gallery_id = 9; //13
}

message CoinCollectInterruptPlayRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24576; //22509;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 6; //2
  uint32 gallery_id = 7; //8
}

message CoinCollectCheckDoubleStartPlayReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24094; //21294;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 11; //11
}

message CoinCollectCheckDoubleStartPlayRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24464; //21244;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 level_id = 8; //3
  int32 retcode = 11; //9
}

message BrickBreakerLevelInfo {
  bool is_finish = 11; //5
  uint32 level_id = 2; //12
  bool is_can_start = 1; //1
  uint32 max_score = 6; //15
  repeated uint32 chosen_skill_list = 12; //11
  repeated uint32 chosen_avatar_list = 4; //6
}

message BrickBreakerActivityStageInfo {
  bool is_dungeon_level_unlock = 12; //14
  bool is_world_level_unlock = 5; //13
  uint32 stage_id = 1; //10
}

message BrickBreakerDetailInfo {

  repeated BrickBreakerLevelInfo dungeon_level_info_list = 7; //15
  repeated BrickBreakerActivityStageInfo stage_info_list = 9; //14
  repeated BrickBreakerLevelInfo world_level_info_list = 3; //8
  map<uint32, uint32> skill_info_map = 8; //9
}

message SingleStartBrickBreakerReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23861; //23113;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_dungeon = 15; //11
  repeated uint32 chosen_avatar_list = 10; //13
  repeated uint32 chosen_skill_list = 12; //7
  uint32 level_id = 1; //6
}

message SingleStartBrickBreakerRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23349; //20622;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 level_id = 11; //5
  int32 retcode = 3; //11
  bool is_dungeon = 15; //12
}

message SingleRestartBrickBreakerReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23113; //22704;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 2; //3
  bool is_dungeon = 14; //6
}

message SingleRestartBrickBreakerRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22641; //22112;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 level_id = 10; //13
  bool is_dungeon = 4; //1
  int32 retcode = 6; //14
}

message BrickBreakerSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21188; //24616;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  enum SettleReason {
    SETTLE_REASON_TIME_OUT = 0;
    SETTLE_PLAY_END = 1;
    SETTLE_PLAYER_QUIT = 2;
    SETTLE_LIFE_COUNT = 3;
  }

  uint32 gallery_id = 11; //6
  uint32 score = 1; //14
  uint32 level_id = 5; //1
  bool is_new_record = 7; //13
  repeated Uint32Pair update_skill_list = 8; //10
  SettleReason reason = 10; //5
  bool is_single_mode = 14; //9
  uint32 combo = 13; //12
  uint32 time = 3; //15
  bool is_dungeon = 4; //11
}

message BrickBreakerTwiceStartReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20456; //24028;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message BrickBreakerTwiceStartRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23952; //22591;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 9; //13
}

message BrickBreakerQuitReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23676; //20137;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message BrickBreakerQuitRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23955; //20667;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 7; //10
}

message SeaLampV3RaceLevelInfo {
  bool is_open = 13; //2
  uint32 max_score = 14; //3
  uint32 level_id = 5; //10
}

message SeaLampV3RaceInfo {
  repeated SeaLampV3RaceLevelInfo level_info_list = 6; //9
}

message SeaLampV3ShadowLevelInfo {
  bool is_open = 7; //4
  uint32 level_id = 2; //3
  uint32 min_finish_time = 12; //6
}

message SeaLampV3ShadowStageInfo {
  uint32 stage_id = 5; //2
  bool is_open = 11; //6
  repeated SeaLampV3ShadowLevelInfo level_info_list = 4; //14
}

message SeaLampV3ShadowInfo {
  repeated SeaLampV3ShadowStageInfo stage_info_list = 9; //2
}

message SeaLampV3CampStageInfo {
  bool is_finished = 2; //14
  uint32 level_id = 5; //12
  bool is_open = 4; //6
  uint32 stage_id = 12; //1
}

message SeaLampV3CampInfo {
  repeated SeaLampV3CampStageInfo stage_info_list = 12; //15
}

message SeaLampV3DetailInfo {
  SeaLampV3ShadowInfo shadow_info = 3; //3
  SeaLampV3CampInfo camp_info = 11; //8
  SeaLampV3RaceInfo race_info = 4; //10
}

message LanV3BoatGameStartSingleReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21556; //23637;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message LanV3BoatGameStartSingleRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23055; //22069;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //14
}

message LanV3BoatGameTransferFinishNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20696; //20683;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_reenter = 14; //5
}

message LanV3RaceSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23477; //24629;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 remain_time = 5; //10
  uint32 gallery_id = 9; //4
  uint32 level_id = 14; //13
  uint32 coin_count = 11; //14
  uint32 total_coint_count = 15; //5
  bool is_new_record = 3; //2
  bool is_success = 7; //1
  uint32 score = 8; //7
}

message LanV3RaceRestartReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23737; //20331;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 gallery_id = 10; //13
}

message LanV3RaceRestartRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21596; //23477;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 9; //1
  uint32 gallery_id = 12; //3
}

message LanV3BoatInterruptSettleStageReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24752; //20951;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message LanV3BoatInterruptSettleStageRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20568; //24759;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //15
}

message LanV3ShadowFinishLevelReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23802; //20227;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 finish_time = 7; //6
  uint32 level_id = 6; //15
}

message LanV3ShadowFinishLevelRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23853; //20480;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 14; //3
}

message DuelHeartLevelDifficultyInfo {
  bool is_open = 1; //6
  uint32 cost_time = 6; //9
  uint32 difficulty = 7; //12
}

message DuelHeartLevelInfo {
  bool is_cg_viewed = 1; //5
  repeated DuelHeartLevelDifficultyInfo difficulty_info_list = 8; //13
  uint32 level_id = 11; //4
  bool is_open = 12; //11
}

message DuelHeartDetailInfo {
  repeated DuelHeartLevelInfo level_info_list = 15; //14
}

message DuelHeartEnterDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23310; //20076;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level_id = 13; //12
}

message DuelHeartEnterDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22551; //24080;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 14; //5
}

message DuelHeartRestartDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21530; //23780;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message DuelHeartRestartDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22153; //24816;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //5
}

message DuelHeartSelectDifficultyReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23596; //22297;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 difficulty = 2; //4
}

message DuelHeartSelectDifficultyRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21405; //22312;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 8; //2
}

message DuelHeartSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20655; //22250;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_succ = 5; //1
  bool is_new_record = 4; //5
  uint32 cost_time = 1; //13
}

message DuelHeartCgEndNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20166; //20093;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message TeamChainStageData {
  uint32 best_score = 6; //14
  bool is_open = 1; //12
  uint32 stage_id = 2; //15
}

message TeamChainDetailInfo {
  repeated TeamChainStageData stage_data_list = 10; //14
  bool is_token_costume_reward = 11; //4
}

message TeamChainChooseAvatarInfo {
  bool is_trial_avatar = 5; //11
  uint32 avatar_id = 13; //15
}

message TeamChainChooseTeamInfo {
  repeated uint32 skill_no_list = 12; //3
  repeated TeamChainChooseAvatarInfo avatar_info_list = 6; //6
}

message TeamChainEnterDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21568; //20636;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 13; //7
  uint32 difficulty = 2; //11
  repeated TeamChainChooseTeamInfo team_info_list = 11; //6
}

message TeamChainEnterDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21537; //21776;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 12; //11
}

message TeamChainRestartDungeonReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21237; //22269;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated TeamChainChooseTeamInfo team_info_list = 2; //11
}

message TeamChainRestartDungeonRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24930; //21313;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //8
}

message TeamChainDungeonInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 20331; //24946;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 skill_no_list = 12; //13
  uint32 stage_id = 11; //5
}

message TeamChainTakeCostumeRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 22700; //21207;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message TeamChainTakeCostumeRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21178; //24258;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //9
}

message ElectroherculesBattleLevelInfo {
  bool is_finish = 13; //7
  uint32 min_finish_time = 2; //9
  uint32 level_id = 12; //3
}

message ElectroherculesBattleStageInfo {
  bool is_stage_open = 3; //4
  repeated ElectroherculesBattleLevelInfo level_info_list = 10; //9
  uint32 stage_id = 1; //6
}

message ElectroherculesBattleDetailInfo {
  repeated ElectroherculesBattleStageInfo stage_info_list = 7; //15
}

message ElectroherculesBattleSelectDifficultyReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 23202; //24212;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 stage_id = 10; //11
  uint32 diffculty = 7; //14
}

message ElectroherculesBattleSelectDifficultyRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 24683; //23684;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 stage_id = 10; //6
  int32 retcode = 14; //14
  uint32 diffculty = 1; //3
  uint32 gallery_id = 7; //12
}

message ElectroherculesBattleSettleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 21217; //21083;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_new_record = 11; //11
  uint32 diffculty = 9; //9
  uint32 gallery_id = 6; //14
  uint32 finish_time = 15; //15
  uint32 stage_id = 5; //3
}

enum RogueCellState {
  ROGUE_CELL_NONE = 0;
  ROGUE_CELL_BATTLE = 1;
  ROGUE_CELL_SUCCESS = 2;
  ROGUE_CELL_FINISH = 3;
  ROGUE_CELL_TAKEN_CHEST = 4;
}

enum RogueEliteCellDifficultyType {
  ROGUE_ELITE_NORMAL = 0;
  ROGUE_ELITE_HARD = 1;
}

enum RogueDiaryAvatarDisableStatus {
  ROGUE_DIARY_AVATAR_DISABLE_NONE = 0;
  ROGUE_DIARY_AVATAR_DISABLE_DEATH = 1;
  ROGUE_DIARY_AVATAR_DISABLE_TIRED = 2;
  ROGUE_DIARY_AVATAR_DISABLE_DUPLICATED = 3;
}

enum ActivityPushTipsState {
  ACTIVITY_PUSH_TIPS_STATE_NONE = 0;
  ACTIVITY_PUSH_TIPS_STATE_START = 1;
  ACTIVITY_PUSH_TIPS_STATE_READ = 2;
}

