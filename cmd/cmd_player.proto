syntax = "proto3";

package proto;
option go_package = "./;proto";


import "define.proto";

message GetPlayerTokenReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 105; //172;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  string account_ext = 6; //9
  string account_token = 2; //10
  uint32 channel_id = 3; //15
  bool is_guest = 14; //6
  string psn_region = 9; //4
  uint32 sub_channel_id = 7; //8
  string account_uid = 4; //11
  uint32 key_id = 294; //1787
  uint32 account_type = 5; //1
  uint32 cloud_client_ip = 13; //14
  uint32 minors_reg_min_age = 1399; //995
  uint32 uid = 11; //2
  string online_id = 12; //7
  string birthday = 65; //1718
  string client_ip_str = 8; //3
  uint32 platform_type = 10; //12
  string client_rand_key = 776; //760
  string country_code = 1; //5
  uint32 lang = 904; //892
  string psn_id = 15; //13
}

message GetPlayerTokenRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 155; //198;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 minors_reg_min_age = 1481; //1561
  uint32 channel_id = 1356; //896
  uint32 platform_type = 11; //8
  string account_uid = 9; //12
  bool is_login_white_list = 1663; //573
  bool is_guest = 4; //4
  uint32 black_uid_end_time = 2; //14
  bool is_watchdog_uid = 661; //2028
  string psn_id = 1285; //1811
  uint32 tag = 1344; //1635
  string country_code = 1960; //2013
  string token = 6; //11
  uint32 sub_channel_id = 891; //1802
  bytes security_cmd_buffer = 13; //6
  string client_version_random_key = 1558; //1529
  string birthday = 1459; //937
  uint64 secret_key_seed = 8; //13
  uint32 account_type = 3; //5
  string msg = 10; //7
  repeated uint32 finish_collection_id_list = 1846; //1640
  string sign = 1993; //1140
  string secret_key = 12; //15
  StopServerInfo stop_server = 347; //1382
  int32 retcode = 15; //2
  uint32 uid = 1; //1
  bool is_proficient_player = 7; //9
  uint32 reg_platform = 1614; //1112
  string server_rand_key = 1420; //1493
  bytes extra_bin_data = 14; //3
  string client_ip_str = 64; //860
  uint32 gm_uid = 5; //10
  uint32 key_id = 2003; //1172
}

message TrackingIOInfo {
  string rydevicetype = 2; //11
  string mac = 9; //6
  string deviceid = 5; //9
  string client_tz = 6; //5
  string current_caid = 15; //7
  string cached_caid = 11; //15
  string appid = 3; //1
}

message AdjustTrackingInfo {
  string event_token = 13; //9
  string adid = 3; //4
  string idfa = 7; //2
  string app_token = 5; //14
  string gps_adid = 8; //3
  string fire_adid = 15; //13
}

message PlayerLoginReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 187; //112;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 language_type = 5; //6
  uint32 reg_platform = 119; //615
  TrackingIOInfo tracking_io_info = 710; //1660
  uint32 account_type = 7; //13
  string token = 6; //15
  bytes extra_bin_data = 78; //1458
  uint32 channel_id = 324; //1314
  uint32 client_data_version = 426; //688
  string account_uid = 9; //2
  string client_version = 11; //12
  string security_library_md5 = 378; //772
  string country_code = 1616; //2000
  string psn_id = 1568; //1268
  uint32 client_port = 2024; //431
  string device_name = 1; //9
  string cps = 821; //1163
  uint64 login_rand = 8; //3
  uint32 target_home_param = 323; //984
  AdjustTrackingInfo adjust_tracking_info = 442; //1816
  bool is_transfer = 2037; //908
  uint32 tag = 1223; //1787
  bool is_guest = 10; //5
  bytes environment_error_code = 1015; //2026
  string online_id = 54; //903
  bool is_editor = 13; //8
  string checksum_client_version = 1738; //861
  bytes security_cmd_reply = 907; //1995
  string security_library_version = 684; //1213
  string birthday = 1280; //1652
  string device_uuid = 15; //4
  uint32 client_token = 1762; //1546
  uint32 sub_channel_id = 1709; //23
  uint32 target_uid = 4; //11
  string device_info = 14; //1
  string client_verison_hash = 1765; //1707
  string checksum = 1715; //1532
  uint32 platform_type = 12; //14
  uint32 target_home_owner_uid = 216; //1864
  uint32 cloud_client_ip = 1394; //1335
  uint32 gm_uid = 246; //612
  string system_version = 3; //10
  string platform = 2; //7
}

message ShortAbilityHashPair {
  sfixed32 ability_config_hash = 10; //15
  sfixed32 ability_name_hash = 6; //1
}

message PlayerLoginRsp {


  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 198; //135;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 client_data_version = 7; //1
  bool is_sc_open = 1852; //1429
  int32 retcode = 1; //15
  map<uint32, BlockInfo> block_info_map = 982; //571
  bool is_audit = 201; //1685
  bool is_transfer = 956; //2018
  string client_silence_md5 = 979; //1746
  ResVersionConfig next_res_version_config = 1331; //1573
  uint32 client_silence_data_version = 2; //6
  uint64 login_rand = 8; //4
  bool is_new_player = 10; //8
  string client_version_suffix = 624; //1047
  string game_biz = 4; //5
  string next_resource_url = 1095; //621
  bool is_relogin = 6; //10
  double total_tick_time = 1769; //125
  bool is_enable_client_hash_debug = 1254; //932
  bytes sc_info = 151; //2024
  int32 ability_hash_code = 13; //12
  string register_cps = 552; //2040
  bool is_login_rsp_split = 1435; //1649
  bool is_use_ability_hash = 15; //2
  map<string, int32> ability_hash_map = 5; //11
  repeated ShortAbilityHashPair short_ability_hash_map = 1199; //250
  string client_md5 = 1070; //1830
  string country_code = 238; //1900
  bool is_data_need_relogin = 1021; //951
  ResVersionConfig res_version_config = 777; //1969
  repeated FeatureBlockInfo feature_block_info_list = 2035; //1352
  string birthday = 163; //624
  uint32 target_uid = 3; //14
  bytes player_data = 14; //13
  string client_silence_version_suffix = 935; //1299
  uint32 target_home_owner_uid = 787; //553
  uint32 player_data_version = 9; //7
}

message PlayerLogoutReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 120; //107;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  enum Reason {
    DISCONNECT = 0;
    CLIENT_REQ = 1;
    TIMEOUT = 2;
    ADMIN_REQ = 3;
    SERVER_CLOSE = 4;
    GM_CLEAR = 5;
    PLAYER_TRANSFER = 6;
    CLIENT_CHECKSUM_INVALID = 7;
  }

  Reason reason = 1; //6
}

message PlayerLogoutRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 174; //121;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //12
}

message PlayerLogoutNotify {
  enum CmdId {
    
    NONE = 0;
    CMD_ID = 180; //103;
  }

  int32 retcode = 7; //13
}

message PlayerDataNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 170; //190;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint64 server_time = 3; //7
  string nick_name = 11; //8
  bool is_first_login_today = 7; //12
  uint32 region_id = 9; //6
  map<uint32, PropValue> prop_map = 5; //15
}

message ChangeGameTimeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 162; //173;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 game_time = 9; //6
  bool is_force_set = 6; //11
  uint32 extra_days = 7; //12
}

message ChangeGameTimeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 114; //199;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 7; //8
  uint32 extra_days = 5; //5
  uint32 cur_game_time = 15; //14
}

message PlayerGameTimeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 124; //131;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 uid = 14; //7
  uint32 game_time = 1; //3
  bool is_home = 3; //13
}

message PlayerPropNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 129; //175;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  map<uint32, PropValue> prop_map = 5; //13
}

message ClientTriggerEventNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 178; //148;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 force_id = 5; //3
  EventTriggerType event_type = 1; //2
}

message SetPlayerPropReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 116; //197;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated PropValue prop_list = 8; //7
}

message SetPlayerPropRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 113; //181;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 13; //11
}

message SetPlayerBornDataReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 169; //105;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 avatar_id = 15; //2
  string nick_name = 10; //13
}

message SetPlayerBornDataRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 106; //182;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 5; //10
}

message DoSetPlayerBornDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 139; //147;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

}

message PlayerPropChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 146; //139;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 prop_delta = 8; //13
  uint32 prop_type = 12; //12
}

message SetPlayerNameReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 200; //153;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  string nick_name = 3; //1
}

message SetPlayerNameRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 192; //122;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 11; //9
  string nick_name = 13; //14
}

message SetOpenStateReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 188; //165;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 key = 7; //12
  uint32 value = 14; //5
}

message SetOpenStateRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 125; //104;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 key = 10; //9
  int32 retcode = 9; //14
  uint32 value = 15; //15
}

message OpenStateUpdateNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 158; //193;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  map<uint32, uint32> open_state_map = 9; //6
}

message OpenStateChangeNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 118; //127;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  map<uint32, uint32> open_state_map = 15; //4
}

message PlayerCookReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 175; //194;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 cook_count = 3; //1
  uint32 qte_quality = 13; //12
  uint32 recipe_id = 15; //8
  uint32 assist_avatar = 6; //14
}

message PlayerCookRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 128; //188;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated ItemParam extral_item_list = 13; //15
  uint32 cook_count = 12; //12
  repeated ItemParam item_list = 9; //11
  int32 retcode = 7; //3
  uint32 qte_quality = 4; //5
  CookRecipeData recipe_data = 5; //7
}

message PlayerRandomCookReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 173; //126;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated ItemParam material_list = 2; //13
}

message PlayerRandomCookRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 122; //163;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 13; //4
}

message CookRecipeData {
  uint32 proficiency = 1; //13
  uint32 recipe_id = 6; //9
}

message CookDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 145; //195;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated CookRecipeData recipe_data_list = 9; //2
  uint32 grade = 2; //11
}

message CookRecipeDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 185; //106;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  CookRecipeData recipe_data = 6; //4
}

message CookGradeDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 151; //134;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 grade = 2; //12
}

message PlayerCompoundMaterialReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 142; //150;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 count = 3; //11
  uint32 compound_id = 2; //3
}

message CompoundQueueData {
  uint32 output_count = 12; //1
  uint32 compound_id = 9; //4
  uint32 output_time = 11; //14
  uint32 wait_count = 8; //8
}

message PlayerCompoundMaterialRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 150; //143;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  CompoundQueueData compound_que_data = 8; //5
  int32 retcode = 15; //12
}

message TakeCompoundOutputReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 130; //174;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 compound_group_id = 4; //3
  uint32 compound_id = 13; //10
}

message TakeCompoundOutputRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 143; //176;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated ItemParam item_list = 13; //6
  int32 retcode = 2; //2
}

message CompoundDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 135; //146;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 unlock_compound_list = 5; //1
  repeated CompoundQueueData compound_que_data_list = 14; //9
}

message GetCompoundDataReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 107; //141;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GetCompoundDataRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 152; //149;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 2; //3
  repeated uint32 unlock_compound_list = 14; //11
  repeated CompoundQueueData compound_que_data_list = 6; //7
}

message PlayerTimeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 103; //191;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint64 server_time = 15; //5
  uint64 player_time = 13; //11
  bool is_paused = 7; //14
}

message PlayerSetPauseReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 153; //124;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_paused = 11; //1
}

message PlayerSetPauseRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 136; //156;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 4; //15
}

message PlayerSetLanguageReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 194; //142;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 language_type = 3; //5
}

message PlayerSetLanguageRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 181; //130;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 6; //11
}

message DataResVersionNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 164; //167;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  enum DataResVersionOpType {
    OP_TYPE_NONE = 0;
    OP_TYPE_RELOGIN = 1;
    OP_TYPE_MP_RELOGIN = 2;
  }

  string client_silence_md5 = 12; //10
  string client_silence_version_suffix = 15; //15
  ResVersionConfig res_version_config = 7; //9
  bool is_data_need_relogin = 6; //7
  DataResVersionOpType op_type = 14; //12
  uint32 client_data_version = 3; //2
  string client_version_suffix = 8; //5
  uint32 client_silence_data_version = 5; //1
  string client_md5 = 1; //14
}

message DailyTaskInfo {
  uint32 reward_id = 14; //3
  uint32 progress = 7; //13
  uint32 finish_progress = 9; //10
  uint32 daily_task_id = 5; //4
  bool is_finished = 3; //14
}

message DailyTaskDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 183; //158;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 score_reward_id = 2; //11
  uint32 finished_num = 11; //4
  bool is_taken_score_reward = 13; //9
}

message DailyTaskProgressNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 179; //170;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  DailyTaskInfo info = 12; //12
}

message DailyTaskScoreRewardNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 127; //117;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 reward_id = 9; //14
}

message WorldOwnerDailyTaskNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 163; //102;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated DailyTaskInfo task_list = 9; //1
  uint32 finished_daily_task_num = 4; //5
  uint32 filter_city_id = 15; //2
}

message AddRandTaskInfoNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 123; //119;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 rand_task_id = 2; //5
  Vector pos = 6; //13
}

message RemoveRandTaskInfoNotify {
  enum FinishReason {
    DEFAULT = 0;
    CLEAR = 1;
    DISTANCE = 2;
    FINISH = 3;
  }

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 115; //161;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_succ = 7; //9
  FinishReason reason = 2; //10
  uint32 rand_task_id = 9; //13
}

message TakePlayerLevelRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 156; //129;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 level = 9; //3
}

message TakePlayerLevelRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 190; //157;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 reward_id = 4; //9
  int32 retcode = 5; //13
  uint32 level = 7; //6
}

message PlayerLevelRewardUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 154; //200;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 level_list = 5; //9
}

message GivingRecord {

  bool is_finished = 1; //9
  uint32 group_id = 14; //5
  bool is_gadget_giving = 6; //8
  uint32 giving_id = 4; //3
  uint32 last_group_id = 8; //6
  uint32 config_id = 7; //2
  map<uint32, uint32> material_cnt_map = 10; //15
}

message GivingRecordNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 195; //116;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated GivingRecord giving_record_list = 4; //14
}

message GivingRecordChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 167; //187;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_deactive = 4; //11
  GivingRecord giving_record = 8; //15
}

message ItemGivingReq {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 101; //140;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  enum ItemGivingType {
    QUEST = 0;
    GADGET = 1;
  }

  map<uint64, uint32> item_guid_count_map = 13; //15
  uint32 giving_id = 7; //13
  repeated ItemParam item_param_list = 9; //4
  ItemGivingType item_giving_type = 8; //2
}

message ItemGivingRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 137; //118;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 giving_group_id = 8; //1
  uint32 giving_id = 2; //13
  int32 retcode = 13; //3
}

message PlayerCookArgsReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 184; //166;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 assist_avatar = 9; //10
  uint32 recipe_id = 5; //11
}

message PlayerCookArgsRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 111; //168;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 15; //4
  float qte_range_ratio = 6; //12
}

message PlayerLuaShellNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 191; //133;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  LuaShellType shell_type = 7; //7
  uint32 id = 12; //5
  bytes lua_shell = 5; //12
  uint32 use_type = 8; //10
}

message ServerDisconnectClientNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 160; //184;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 data = 10; //10
}

message AntiAddictNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 104; //180;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 msg_type = 13; //6
  string msg = 3; //3
  string level = 14; //5
}

message PlayerForceExitReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 161; //189;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message PlayerForceExitRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 165; //159;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 13; //15
}

message PlayerInjectFixNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 126; //132;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 id = 14; //13
  bytes inject_fix = 6; //10
}

message TaskVar {
  uint32 key = 8; //8
  repeated int32 value_list = 15; //6
}

message TaskVarNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 177; //160;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated TaskVar task_var_list = 9; //7
}

message ClientLockGameTimeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 112; //114;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_lock = 1; //5
}

message GetNextResourceInfoReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 134; //192;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message GetNextResourceInfoRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 189; //120;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  string next_resource_url = 1; //14
  ResVersionConfig next_res_version_config = 5; //2
  int32 retcode = 9; //12
}

message AdjustWorldLevelReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 138; //164;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 expect_world_level = 11; //8
  uint32 cur_world_level = 3; //9
}

message AdjustWorldLevelRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 140; //138;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 14; //13
  uint32 cd_over_time = 7; //15
  uint32 after_world_level = 15; //14
}

message DailyTaskFilterCityReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 182; //111;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 city_id = 15; //8
}

message DailyTaskFilterCityRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 172; //144;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 15; //5
  uint32 city_id = 14; //9
}

message DailyTaskUnlockedCitiesNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 131; //186;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 unlocked_city_list = 15; //12
}

message ExclusiveRuleInfo {
  repeated uint32 object_id_list = 11; //1
  uint32 rule_type = 6; //10
}

message ExclusiveRuleNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 176; //101;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated ExclusiveRuleInfo rule_info_list = 6; //5
}

message CompoundUnlockNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 159; //128;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 compound_id = 6; //3
}

message GameplayRecommendationSkillRequest {
  uint32 skill_depot_id = 9; //1
}

message GameplayRecommendationReliquaryRequest {
  uint32 equip_type = 7; //6
}

message GameplayRecommendationElementReliquaryRequest {
  uint32 equip_type = 7; //9
  uint32 element_type = 12; //12
}

message GetGameplayRecommendationReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 149; //151;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 avatar_id = 8; //9
  oneof detail {
    GameplayRecommendationSkillRequest skill_request = 1689; //553
    GameplayRecommendationReliquaryRequest reliquary_request = 118; //1993
    GameplayRecommendationElementReliquaryRequest element_reliquary_request = 1105; //1489
  }
}

message GameplayRecommendationSkillResponse {
  uint32 skill_depot_id = 12; //13
  repeated uint32 skill_id_list = 8; //9
}

message GameplayRecommendationReliquaryMainPropData {
  uint32 permillage = 9; //1
  uint32 main_prop_id = 6; //12
}

message GameplayRecommendationReliquaryResponse {
  repeated GameplayRecommendationReliquaryMainPropData main_prop_data_list = 12; //8
  uint32 equip_type = 15; //3
}

message GameplayRecommendationElementReliquaryResponse {
  uint32 element_type = 4; //11
  repeated GameplayRecommendationReliquaryMainPropData main_prop_data_list = 3; //5
  uint32 equip_type = 7; //15
}

message GetGameplayRecommendationRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 196; //123;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 12; //6
  uint32 avatar_id = 1; //15
  oneof detail {
    GameplayRecommendationSkillResponse skill_response = 223; //1022
    GameplayRecommendationReliquaryResponse reliquary_response = 1964; //196
    GameplayRecommendationElementReliquaryResponse element_reliquary_response = 1912; //167
  }
}

message TakeBackGivingItemReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 144; //171;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 giving_id = 10; //4
}

message TakeBackGivingItemRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 132; //145;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 giving_id = 3; //10
  int32 retcode = 11; //6
}

message PlayerNicknameAuditDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 168; //108;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  ContentAuditInfo info = 13; //13
}

message PlayerNicknameNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 133; //109;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  string nickname = 11; //7
}

message NicknameAuditConfigNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 186; //152;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_open = 5; //8
  uint32 submit_limit = 7; //12
}

message ReadNicknameAuditReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 148; //177;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message ReadNicknameAuditRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 197; //137;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 1; //12
}

message PlayerCompoundMaterialBoostReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 102; //185;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_boost_all = 8; //8
  uint32 target_compound_group_id = 3; //14
  uint32 consume_material_id = 13; //9
  uint32 consume_material_count = 9; //1
}

message PlayerCompoundMaterialBoostRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 119; //125;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated ItemParam take_item_list = 14; //2
  CompoundBoostTakeStatusType take_status = 8; //6
  int32 retcode = 15; //7
  repeated CompoundQueueData compound_que_data_list = 6; //1
}

message PlayerGameTimeByLuaNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 121; //178;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 uid = 9; //13
  uint32 sim_speed = 1; //9
  uint32 game_time = 8; //10
}

message PlayerIpRegionNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 171; //136;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  string ip_code = 6; //9
}

enum CompoundBoostTakeStatusType {
  COMPOUND_BOOST_TAKE_STATUS_NONE = 0;
  COMPOUND_BOOST_TAKE_STATUS_BOOST_ONLY = 1;
  COMPOUND_BOOST_TAKE_STATUS_BOOST_AND_TAKE = 2;
  COMPOUND_BOOST_TAKE_STATUS_BAG_FULL = 3;
}

