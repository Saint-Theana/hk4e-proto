syntax = "proto3";

package proto;
option go_package = "./;proto";


import "define.proto";
import "cmd/cmd_social.proto";

message UgcMusicNote {
  uint32 start_time = 3; //12
  uint32 end_time = 5; //5
}

message UgcMusicTrack {
  repeated UgcMusicNote music_note_list = 13; //6
}

message UgcMusicRecord {
  repeated UgcMusicTrack music_track_list = 3; //4
  uint32 music_id = 2; //13
}

message UgcMusicBriefInfo {
  uint64 import_from_ugc_guid = 6; //5
  bool is_published = 11; //8
  bool is_played = 5; //1
  uint32 music_id = 14; //2
  uint32 save_page_type = 287; //1182
  uint32 save_idx = 9; //12
  string creator_nickname = 3; //10
  uint32 version = 1; //15
  uint32 save_time = 10; //3
  repeated uint32 after_note_list = 1062; //1002
  repeated uint32 before_note_list = 1363; //982
  bool is_psn_platform = 13; //9
  uint32 time_line_edit_time = 1837; //1822
  bool is_changed_after_publish = 4; //11
  uint32 publish_time = 15; //13
  uint32 max_score = 12; //14
  uint32 real_time_edit_time = 88; //576
  uint32 note_count = 2; //7
  uint64 ugc_guid = 8; //4
  uint32 self_max_score = 7; //6
}

message GetUgcReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6338; //6326;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  UgcType ugc_type = 2; //8
  uint64 ugc_guid = 15; //5
  RecordUsage ugc_record_usage = 8; //6
  bool is_require_brief = 5; //11
  GetUgcType get_ugc_type = 10; //13
}

message GetUgcRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6345; //6318;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint64 ugc_guid = 9; //15
  UgcType ugc_type = 12; //10
  int32 retcode = 8; //2
  RecordUsage ugc_record_usage = 7; //14
  oneof record {
    UgcMusicRecord music_record = 1; //4
  }
  oneof brief {
    UgcMusicBriefInfo music_brief_info = 616; //1819
  }
}

message GetUgcBriefInfoReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6346; //6325;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint64 ugc_guid = 11; //7
  UgcType ugc_type = 10; //10
}

message GetUgcBriefInfoRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6341; //6307;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint64 ugc_guid = 15; //3
  UgcType ugc_type = 9; //11
  int32 retcode = 1; //4
  oneof brief {
    UgcMusicBriefInfo music_brief_info = 8; //2
  }
}

message SaveUgcReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6331; //6329;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  UgcType ugc_type = 1; //11
  oneof record {
    UgcMusicRecord music_record = 15; //2
  }
  oneof brief {
    UgcMusicBriefInfo music_brief_info = 160; //1488
  }
}

message SaveUgcRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6335; //6322;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 8; //15
  uint64 ugc_guid = 12; //8
  UgcType ugc_type = 15; //1
}

message PublishUgcReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6316; //6344;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  UgcType ugc_type = 9; //7
  uint64 ugc_guid = 14; //12
}

message PublishUgcRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6325; //6349;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint64 ugc_guid = 4; //14
  int32 retcode = 14; //15
  UgcType ugc_type = 8; //13
}

message CheckUgcUpdateReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6302; //6320;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  UgcType ugc_type = 3; //13
}

message CheckUgcUpdateRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6340; //6345;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint64 update_ugc_guid_list = 2; //15
  int32 retcode = 14; //10
  UgcType ugc_type = 6; //12
}

message UgcNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6337; //6341;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_ugc_publish_ban = 13; //12
  bool is_ugc_publish_feature_closed = 5; //8
  bool is_ugc_feature_closed = 10; //15
}

message CheckUgcStateReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6314; //6342;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message CheckUgcStateRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 6342; //6314;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 13; //7
}

enum UgcType {
  UGC_TYPE_NONE = 0;
  UGC_TYPE_MUSIC_GAME = 1;
}

enum GetUgcType {
  GET_UGC_NONE = 0;
  GET_UGC_TYPE_MINE = 1;
  GET_UGC_TYPE_PUBLISH = 2;
}

enum RecordUsage {
  UGC_RECORD_USAGE_NONE = 0;
  UGC_RECORD_USAGE_IMPORT = 1;
  UGC_RECORD_USAGE_PLAY = 2;
  UGC_RECORD_USAGE_TRIAL = 3;
  UGC_RECORD_USAGE_COMPARE = 4;
}

