syntax = "proto3";

package proto;
option go_package = "./;proto";


import "define.proto";

message PlayerStoreNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 605; //672;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated Item item_list = 5; //15
  uint32 weight_limit = 6; //8
  StoreType store_type = 10; //2
}

message StoreWeightLimitNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 655; //698;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 weapon_count_limit = 9; //2
  StoreType store_type = 11; //7
  uint32 material_count_limit = 3; //4
  uint32 reliquary_count_limit = 5; //6
  uint32 furniture_count_limit = 2; //9
  uint32 weight_limit = 14; //15
}

message StoreItemChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 687; //612;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  StoreType store_type = 5; //12
  repeated Item item_list = 13; //10
}

message StoreItemDelNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 698; //635;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint64 guid_list = 6; //12
  StoreType store_type = 10; //15
}

message ItemHint {
  uint32 item_id = 13; //8
  bool is_new = 14; //2
  uint32 count = 12; //15
  uint64 guid = 8; //4
}

message ItemAddHintNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 620; //607;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_position_valid = 14; //14
  uint32 quest_id = 7; //3
  uint32 reason = 3; //6
  bool is_general_reward_hiden = 11; //15
  repeated ItemHint item_list = 8; //10
  bool is_transfered_from_avatar_card = 12; //12
  Vector position = 9; //9
  repeated ItemHint overflow_transformed_item_list = 1; //8
}

message UseItemReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 670; //690;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 count = 12; //13
  uint64 target_guid = 6; //14
  uint64 guid = 8; //10
  bool is_enter_mp_dungeon_team = 13; //15
  uint32 option_idx = 14; //7
}

message UseItemRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 662; //673;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint64 guid = 12; //5
  uint64 target_guid = 11; //1
  uint32 item_id = 4; //4
  uint32 option_idx = 3; //8
  int32 retcode = 7; //14
}

message DropItemReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 614; //699;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  Vector pos = 13; //11
  StoreType store_type = 12; //1
  uint32 count = 3; //2
  uint64 guid = 10; //13
}

message DropItemRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 624; //631;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 10; //9
  uint64 guid = 9; //1
  StoreType store_type = 14; //15
}

message WearEquipReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 616; //697;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint64 equip_guid = 12; //7
  uint64 avatar_guid = 1; //5
}

message WearEquipRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 613; //681;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 9; //5
  uint64 equip_guid = 13; //1
  uint64 avatar_guid = 6; //7
}

message TakeoffEquipReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 669; //605;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint64 avatar_guid = 8; //8
  uint32 slot = 3; //15
}

message TakeoffEquipRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 606; //682;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint64 avatar_guid = 5; //9
  int32 retcode = 15; //6
  uint32 slot = 3; //10
}

message AvatarEquipChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 639; //647;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint64 avatar_guid = 15; //10
  uint64 equip_guid = 11; //13
  SceneReliquaryInfo reliquary = 13; //1
  SceneWeaponInfo weapon = 10; //15
  uint32 item_id = 2; //14
  uint32 equip_type = 12; //8
}

message WeaponUpgradeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 646; //639;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint64 food_weapon_guid_list = 7; //1
  repeated ItemParam item_param_list = 1; //15
  uint64 target_weapon_guid = 11; //4
}

message WeaponUpgradeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 700; //653;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 cur_level = 5; //7
  int32 retcode = 14; //11
  uint32 old_level = 1; //8
  repeated ItemParam item_param_list = 9; //2
  uint64 target_weapon_guid = 13; //6
}

message WeaponPromoteReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 692; //622;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint64 target_weapon_guid = 3; //5
}

message WeaponPromoteRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 688; //665;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint64 target_weapon_guid = 2; //3
  uint32 old_promote_level = 10; //7
  uint32 cur_promote_level = 13; //12
  int32 retcode = 14; //4
}

message ReliquaryUpgradeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 625; //604;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated ItemParam item_param_list = 8; //11
  uint64 target_reliquary_guid = 14; //6
  repeated uint64 food_reliquary_guid_list = 13; //12
}

message ReliquaryUpgradeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 658; //693;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 old_level = 15; //4
  uint32 cur_level = 13; //13
  uint64 target_reliquary_guid = 12; //9
  repeated uint32 cur_append_prop_list = 4; //2
  uint32 power_up_rate = 9; //6
  repeated uint32 old_append_prop_list = 14; //15
  int32 retcode = 8; //5
}

message ReliquaryPromoteReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 618; //627;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint64 item_guid = 10; //10
  uint64 target_guid = 12; //13
}

message ReliquaryPromoteRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 675; //694;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 old_promote_level = 7; //10
  uint64 target_reliquary_guid = 2; //6
  repeated uint32 cur_append_prop_list = 12; //9
  int32 retcode = 6; //12
  uint32 cur_promote_level = 15; //2
  repeated uint32 old_append_prop_list = 11; //8
}

message AvatarCardChangeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 628; //688;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 item_id = 11; //6
  uint64 avatar_guid = 1; //14
  uint32 count = 6; //7
}

message AvatarCardChangeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 673; //626;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 10; //1
}

message GrantRewardNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 622; //663;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  Reward reward = 10; //6
}

message WeaponAwakenReq {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 645; //695;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint64 item_guid = 2; //10
  map<uint32, uint32> affix_level_map = 12; //7
  uint64 target_weapon_guid = 9; //9
}

message WeaponAwakenRsp {


  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 685; //606;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 11; //9
  uint64 avatar_guid = 5; //10
  map<uint32, uint32> old_affix_level_map = 6; //4
  uint32 target_weapon_awaken_level = 3; //2
  uint64 target_weapon_guid = 2; //15
  map<uint32, uint32> cur_affix_level_map = 12; //11
}

message ItemCdGroupTimeNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 651; //634;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  map<uint32, uint64> item_cd_map = 13; //9
}

message DropHintNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 642; //650;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  Vector position = 9; //7
  repeated uint32 item_id_list = 10; //14
}

message CombineReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 650; //643;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 combine_count = 10; //12
  uint32 combine_id = 8; //9
  uint64 avatar_guid = 15; //14
}

message CombineRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 630; //674;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated ItemParam cost_item_list = 2; //3
  int32 retcode = 12; //7
  repeated ItemParam total_extra_item_list = 1; //6
  uint32 combine_id = 5; //11
  repeated ItemParam total_random_item_list = 3; //9
  repeated ItemParam result_item_list = 13; //2
  uint32 combine_count = 10; //13
  repeated ItemParam total_return_item_list = 4; //12
  uint64 avatar_guid = 7; //10
}

message ForgeQueueData {
  uint32 finish_count = 1; //13
  uint32 total_finish_timestamp = 11; //14
  uint32 avatar_id = 12; //7
  uint32 queue_id = 9; //1
  uint32 unfinish_count = 8; //10
  uint32 next_finish_timestamp = 2; //11
  uint32 forge_id = 6; //15
}

message ForgeQueueDataNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 643; //676;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  map<uint32, ForgeQueueData> forge_queue_map = 14; //7
  repeated uint32 removed_forge_queue_list = 10; //6
}

message ForgeGetQueueDataReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 635; //646;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message ForgeGetQueueDataRsp {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 607; //641;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  map<uint32, ForgeQueueData> forge_queue_map = 4; //2
  int32 retcode = 12; //15
  uint32 max_queue_num = 7; //6
}

message ForgeStartReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 652; //649;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 avatar_id = 10; //7
  uint32 forge_id = 3; //4
  uint32 forge_count = 6; //6
}

message ForgeStartRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 603; //691;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 10; //8
}

message ForgeQueueManipulateReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 653; //624;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 forge_queue_id = 5; //5
  ForgeQueueManipulateType manipulate_type = 2; //13
}

message ForgeQueueManipulateRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 636; //656;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  ForgeQueueManipulateType manipulate_type = 7; //4
  repeated ItemParam extra_output_item_list = 13; //13
  repeated ItemParam return_item_list = 3; //10
  int32 retcode = 5; //1
  repeated ItemParam output_item_list = 12; //9
}

message ResinChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 694; //642;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 next_add_timestamp = 4; //6
  uint32 cur_buy_count = 5; //4
  uint32 cur_value = 12; //12
}

message BuyResinReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 663; //602;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

}

message BuyResinRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 623; //619;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 cur_value = 15; //10
  int32 retcode = 1; //5
}

message MaterialDeleteReturnNotify {


  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 615; //661;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  map<uint32, uint32> return_item_map = 7; //5
  MaterialDeleteReturnType type = 11; //8
  map<uint32, uint32> delete_material_map = 10; //6
}

message TakeMaterialDeleteReturnReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 656; //629;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  MaterialDeleteReturnType type = 6; //8
}

message TakeMaterialDeleteReturnRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 690; //657;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 12; //14
}

message MaterialDeleteUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 654; //700;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

}

message McoinExchangeHcoinReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 695; //616;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 hcoin = 13; //5
  uint32 mcoin_cost = 15; //1
}

message McoinExchangeHcoinRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 667; //687;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 mcoin_cost = 11; //8
  uint32 hcoin = 15; //7
  int32 retcode = 7; //4
}

message MaterilaInfo {
  uint32 count = 3; //11
  uint64 guid = 12; //5
}

message DestroyMaterialReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 601; //640;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated MaterilaInfo material_list = 10; //5
}

message DestroyMaterialRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 637; //618;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 item_count_list = 13; //12
  repeated uint32 item_id_list = 7; //13
  int32 retcode = 12; //11
}

message SetEquipLockStateReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 684; //666;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_locked = 3; //15
  uint64 target_equip_guid = 10; //9
}

message SetEquipLockStateRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 611; //668;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint64 target_equip_guid = 11; //14
  int32 retcode = 8; //13
  bool is_locked = 4; //10
}

message CalcWeaponUpgradeReturnItemsReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 691; //633;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint64 food_weapon_guid_list = 8; //15
  uint64 target_weapon_guid = 10; //12
  repeated ItemParam item_param_list = 4; //3
}

message CalcWeaponUpgradeReturnItemsRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 660; //684;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated ItemParam item_param_list = 7; //4
  int32 retcode = 4; //15
  uint64 target_weapon_guid = 9; //8
}

message ForgeDataNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 604; //680;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 forge_id_list = 4; //5
  map<uint32, ForgeQueueData> forge_queue_map = 14; //8
  uint32 max_queue_num = 8; //14
}

message ForgeFormulaDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 661; //689;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_locked = 1; //15
  uint32 forge_id = 12; //13
}

message CombineDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 665; //659;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 combine_id_list = 4; //5
}

message CombineFormulaDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 626; //632;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 combine_id = 3; //6
  bool is_locked = 7; //3
}

message ClosedItemNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 612; //614;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 item_id_list = 6; //8
}

message CheckAddItemExceedLimitNotify {
  enum ItemExceedLimitMsgType {
    ITEM_EXCEED_LIMIT_MSG_DEFAULT = 0;
    ITEM_EXCEED_LIMIT_MSG_TEXT = 1;
    ITEM_EXCEED_LIMIT_MSG_DIALOG = 2;
    ITEM_EXCEED_LIMIT_MSG_DIALOG_NONBLOCK = 3;
  }

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 634; //692;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool is_drop = 1; //5
  ItemExceedLimitMsgType msg_type = 7; //4
  repeated uint32 exceeded_item_type_list = 15; //10
  repeated uint32 exceeded_item_list = 5; //12
  uint32 reason = 2; //14
}

message SetIsAutoUnlockSpecificEquipReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 689; //620;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_auto_unlock_specific_equip = 3; //14
}

message SetIsAutoUnlockSpecificEquipRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 638; //664;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 8; //3
}

message ReliquaryDecomposeReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 640; //638;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 config_id = 13; //13
  uint32 target_count = 5; //9
  repeated uint64 guid_list = 2; //8
}

message ReliquaryDecomposeRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 682; //611;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  int32 retcode = 13; //3
  repeated uint64 guid_list = 12; //14
}

message ReliquaryFilterStateSaveNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 672; //644;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  map<uint32, uint32> reliquary_filter_state_map = 3; //8
}

message ReliquaryFilterStateNotify {

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 631; //686;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  map<uint32, uint32> reliquary_filter_state_map = 11; //5
}

enum ForgeQueueManipulateType {
  FORGE_QUEUE_MANIPULATE_TYPE_RECEIVE_OUTPUT = 0;
  FORGE_QUEUE_MANIPULATE_TYPE_STOP_FORGE = 1;
}

enum MaterialDeleteReturnType {
  MATERIAL_DELETE_RETURN_BAG = 0;
  MATERIAL_DELETE_RETURN_SEED = 1;
}

