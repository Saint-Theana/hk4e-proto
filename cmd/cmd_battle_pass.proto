syntax = "proto3";

package proto;
option go_package = "./;proto";


import "define.proto";

message BattlePassCycle {
  uint32 cycle_idx = 8; //3
  uint32 end_time = 11; //10
  uint32 begin_time = 2; //13
}

message BattlePassMission {
  enum MissionStatus {
    MISSION_INVALID = 0;
    MISSION_UNFINISHED = 1;
    MISSION_FINISHED = 2;
    MISSION_POINT_TAKEN = 3;
  }

  uint32 cur_progress = 11; //13
  MissionStatus mission_status = 9; //15
  uint32 mission_id = 6; //11
  uint32 reward_battle_pass_point = 10; //3
  uint32 mission_type = 14; //12
  uint32 total_progress = 13; //6
}

message BattlePassRewardTag {
  uint32 level = 8; //4
  BattlePassUnlockStatus unlock_status = 13; //2
  uint32 reward_id = 15; //7
}

message BattlePassProduct {
  string normal_product_id = 4; //13
  string extra_product_id = 14; //10
  string upgrade_product_id = 7; //6
}

message BattlePassSchedule {
  uint32 level = 10; //14
  uint32 begin_time = 8; //2
  uint32 end_time = 14; //15
  uint32 point = 7; //1
  BattlePassCycle cur_cycle = 5; //4
  BattlePassUnlockStatus unlock_status = 6; //7
  repeated BattlePassRewardTag reward_taken_list = 3; //11
  uint32 cur_cycle_points = 9; //10
  uint32 paid_platform_flags = 2; //12
  BattlePassProduct product_info = 15; //13
  bool is_extra_paid_reward_taken = 12; //6
  bool is_viewed = 4; //3
  uint32 schedule_id = 11; //9
}

message BattlePassAllDataNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2638; //2626;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool have_cur_schedule = 6; //2
  repeated BattlePassMission mission_list = 3; //4
  BattlePassSchedule cur_schedule = 15; //1
}

message BattlePassMissionUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2645; //2618;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated BattlePassMission mission_list = 10; //1
}

message BattlePassMissionDelNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2646; //2625;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 del_mission_id_list = 11; //10
}

message BattlePassCurScheduleUpdateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2641; //2607;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  bool have_cur_schedule = 5; //11
  BattlePassSchedule cur_schedule = 14; //1
}

message BattlePassRewardTakeOption {
  BattlePassRewardTag tag = 15; //10
  uint32 option_idx = 14; //14
}

message TakeBattlePassRewardReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2619; //2602;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated BattlePassRewardTakeOption take_option_list = 1; //12
}

message TakeBattlePassRewardRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2643; //2631;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated ItemParam item_list = 3; //7
  int32 retcode = 5; //13
  repeated BattlePassRewardTakeOption take_option_list = 13; //9
}

message TakeBattlePassMissionPointReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2631; //2629;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 mission_id_list = 5; //5
}

message TakeBattlePassMissionPointRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2635; //2622;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 4; //4
  repeated uint32 mission_id_list = 10; //11
}

message GetBattlePassProductReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2616; //2644;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 battle_pass_product_play_type = 15; //10
}

message GetBattlePassProductRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2625; //2649;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 4; //14
  string price_tier = 15; //6
  uint32 battle_pass_product_play_type = 9; //2
  string product_id = 7; //1
  uint32 cur_schedule_id = 6; //11
}

message SetBattlePassViewedReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2637; //2641;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 schedule_id = 10; //6
}

message SetBattlePassViewedRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2614; //2642;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 2; //2
  int32 retcode = 8; //3
}

message BattlePassBuySuccNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2642; //2614;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 schedule_id = 14; //4
  uint32 product_play_type = 11; //11
  uint32 add_point = 6; //12
  repeated ItemParam item_list = 2; //9
}

message BuyBattlePassLevelReq {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2607; //2647;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 buy_level = 4; //8
}

message BuyBattlePassLevelRsp {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 2615; //2637;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  int32 retcode = 7; //5
  uint32 buy_level = 15; //13
}

enum BattlePassUnlockStatus {
  BATTLE_PASS_UNLOCK_INVALID = 0;
  BATTLE_PASS_UNLOCK_FREE = 1;
  BATTLE_PASS_UNLOCK_PAID = 2;
}

