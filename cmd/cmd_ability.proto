syntax = "proto3";

package proto;
option go_package = "./;proto";


import "define.proto";
import "cmd/cmd_fight.proto";

message AbilityInvokeEntryHead {
  int32 modifier_config_local_id = 8; //7
  bool is_serverbuff_modifier = 10; //2
  uint32 instanced_ability_id = 2; //1
  uint32 instanced_modifier_id = 9; //12
  int32 local_id = 7; //10
  uint32 server_buff_uid = 15; //14
  uint32 target_id = 5; //3
}

message AbilityInvokeEntry {
  bytes ability_data = 4; //15
  AbilityInvokeEntryHead head = 13; //2
  uint32 event_id = 8; //12
  uint32 entity_id = 11; //9
  double total_tick_time = 14; //14
  uint32 forward_peer = 10; //4
  AbilityInvokeArgument argument_type = 12; //1
  bool is_ignore_auth = 6; //8
  ForwardType forward_type = 15; //3
}

message AbilityInvocationFixedNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1105; //1172;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  AbilityInvokeEntry invoke6th = 15; //14
  AbilityInvokeEntry invoke5th = 8; //8
  AbilityInvokeEntry invoke4th = 5; //1
  AbilityInvokeEntry invoke2nd = 3; //5
  AbilityInvokeEntry invoke1st = 1; //10
  AbilityInvokeEntry invoke3rd = 6; //12
}

message AbilityInvocationsNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1155; //1198;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated AbilityInvokeEntry invokes = 11; //2
}

message AbilityMetaReInitOverrideMap {
  repeated AbilityScalarValueEntry override_map = 2; //7
}

message AbilityMetaAddAbility {
  AbilityAppliedAbility ability = 4; //12
}

message ModifierProperty {
  AbilityString key = 8; //15
  float value = 14; //5
}

message AbilityMetaModifierChange {
  AbilityAttachedModifier attached_instanced_modifier = 7; //7
  uint32 server_buff_uid = 9; //4
  bool is_attached_parent_ability = 3; //10
  ModifierAction action = 2; //13
  int32 modifier_local_id = 6; //2
  AbilityString parent_ability_name = 10; //1
  bool is_mute_remote = 11; //6
  uint32 apply_entity_id = 8; //5
  repeated ModifierProperty properties = 13; //3
  AbilityString parent_ability_override = 5; //11
  bool is_durability_zero = 1; //9
}

message AbilityMetaDurabilityIsZero {
  bool is_zero = 8; //5
}

message AbilityMetaSpecialFloatArgument {
  float argument_value = 2; //14
  bool is_on = 9; //10
}

message AbilityMetaAddOrGetAbilityAndTrigger {
  AbilityString ability_name = 6; //13
  float trigger_argument = 15; //3
  AbilityString ability_override = 4; //8
}

message AbilityMetaSetKilledState {
  bool killed = 1; //2
}

message AbilityMetaSetAbilityTrigger {
  uint32 trigger_ability_entity_id = 15; //11
}

message AbilityMetaSetModifierApplyEntityId {
  uint32 apply_entity_id = 6; //10
}

message AbilityMetaModifierDurabilityChange {
  float reduce_durability = 7; //6
  float remain_durability = 14; //15
}

message AbilityMetaElementReactionVisual {
  int32 hit_index = 12; //2
  uint32 element_source_type = 3; //12
  uint32 element_reactor_type = 2; //6
  uint32 element_reaction_type = 7; //5
}

message AbilityMetaTriggerElementReaction {
  int32 hit_index = 5; //9
  uint32 element_source_type = 11; //7
  uint32 element_reactor_type = 15; //12
  uint32 trigger_entity_id = 10; //2
  uint32 element_reaction_type = 6; //1
}

message AbilityMetaLoseHp {
  uint32 lose_hp_config_idx = 4; //10
}

message AbilityMetaSetPoseParameter {
  AnimatorParameterValueInfoPair value = 2; //6
}

message AbilityMetaUpdateBaseReactionDamage {
  uint32 source_caster_id = 14; //15
  AbilityString ability_name = 11; //1
  AbilityString global_value_key = 13; //4
  uint32 reaction_type = 12; //8
}

message AbilityActionTriggerAbility {
  uint32 other_id = 10; //14
}

message AbilityActionSetCrashDamage {
  Vector hit_pos = 10; //2
  float damage = 4; //15
}

message AbilityBornType {
  Vector rot = 9; //2
  Vector move_dir = 12; //14
  Vector pos = 7; //5
}

message AbilityFireworkBornType {
  uint32 effect_index = 2; //13
  Vector pos = 8; //10
  Vector move_dir = 1; //1
  Vector rot = 12; //5
}

message AbilityActionSummon {
  Vector pos = 14; //10
  Vector rot = 10; //1
}

message AbilityActionBlink {
  Vector rot = 5; //11
  Vector pos = 9; //10
}

message AbilityActionCreateGadget {
  uint32 room_id = 9; //3
  Vector rot = 2; //8
  Vector pos = 15; //11
}

message AbilityActionSetRandomOverrideMapValue {
  float random_value = 9; //1
}

message AbilityActionServerMonsterLog {
  repeated int32 param_list = 5; //2
}

message AbilityActionCreateTile {
  Vector rot = 7; //3
  Vector pos = 2; //8
}

message AbilityActionDestroyTile {
  Vector rot = 11; //3
  Vector pos = 8; //1
}

message AbilityActionFireAfterImgae {
  Vector dir = 2; //12
}

message AbilityApplyLevelModifier {
  uint32 apply_entity_id = 6; //6
}

message AbilityActionGenerateElemBall {
  uint32 room_id = 6; //2
  Vector pos = 7; //7
  Vector rot = 15; //13
}

message AbilityActionDeductStamina {
  bool is_swim = 1; //1
}

message AbilityActionHitEffect {
  uint32 trigger_id = 14; //3
}

message AbilityActionSetBulletTrackTarget {
  uint32 chased_entity_id = 5; //1
  uint32 lock_point_index = 7; //2
}

message AbilityMixinEmpty {
}

message AbilityMixinAvatarSteerByCamera {
  Vector target_dir = 2; //7
  Vector target_pos = 4; //6
}

message AbilityMixinWindZone {
  repeated uint32 entity_ids = 11; //13
  repeated uint32 zone_id_list = 12; //10
}

message AbilityMixinCostStamina {
  bool is_swim = 13; //3
}

message AbilityMixinEliteShield {
  float sub_shield = 13; //2
}

message AbilityMixinElementShield {
  float sub_shield = 13; //10
  float shield = 2; //8
  uint32 absorb_type = 1; //1
  uint32 player_num = 15; //4
  bool is_shield_broken = 12; //9
  float max_shield = 8; //12
}

message AbilityMixinGlobalShield {
  bool is_create_effect = 13; //4
  float sub_shield = 2; //7
  float height_offset = 6; //5
  uint32 avatar_id = 7; //11
  float max_shield = 3; //10
  string shield_effect_name = 5; //2
}

message AbilityMixinShieldBar {
  uint32 player_num = 7; //14
  float max_shield = 11; //15
  float shield = 8; //12
  uint32 element_type = 1; //13
}

message AbilityMixinWindSeedSpawner {
  message AddSignal {
  }

  message RefreshSeed {
    repeated Vector pos_list = 1; //6
  }

  message CatchSeed {
    uint32 entity_id = 5; //8
  }

  oneof cmd {
    AddSignal add_signal = 13; //2
    RefreshSeed refresh_seed = 3; //15
    CatchSeed catch_seed = 4; //11
  }
}

message AbilityMixinDoActionByElementReaction {
  uint32 target_entity_id = 10; //1
}

message AbilityMixinFieldEntityCountChange {
  uint32 field_entity_count = 4; //14
}

message AbilityMixinScenePropSync {
  repeated int64 delete_id_list = 10; //5
  bool is_clear_all = 2; //12
  repeated MassivePropSyncInfo massive_prop_list = 11; //15
}

message AbilityMixinWidgetMpSupport {
  uint32 target_entity_id = 7; //9
}

message AbilityMixinDoActionBySelfModifierElementDurabilityRatio {
  float last_duability_ratio = 1; //9
}

message AbilityMixinFireworksLauncher {
  uint32 invoke_type = 15; //2
  uint32 start_count_down_time = 6; //3
  uint32 fired_bullet_count = 13; //1
  uint32 phase = 4; //6
  repeated uint32 fireworks_config = 11; //4
  uint32 turn_index = 2; //7
}

message AbilityMixinUGCTimeControl {
  uint64 start_move_time_ms = 5; //13
  uint32 start_move_time = 6; //3
}

message AbilityMixinUIInteract {
}

message AbilityMixinAvatarCombat {
  bool is_enter_combat = 15; //9
}

message AbilityMixinShootFromCamera {
  Vector init_pos = 6; //13
  Vector forward = 9; //2
}

message AbilityMixinEraseBrickActivity {
  repeated uint32 data = 8; //6
}

message BreakoutSyncCreateConnect {
  repeated BreakoutSyncConnectUidInfo uid_info_list = 6; //1
}

message BreakoutSyncPing {
  uint64 client_game_time = 12; //2
  uint64 server_game_time = 7; //11
}

message BreakoutSyncFinishGame {
  bool is_win = 1; //13
  bool is_stop_gallery = 8; //15
  uint64 server_game_time = 5; //9
}

message BreakoutSyncSnapShot {
  BreakoutSnapShot snap_shot = 3; //9
}

message BreakoutSyncAction {
  BreakoutAction action = 9; //1
}

message AbilityMixinBreakout {
  enum SyncType {
    SYNC_TYPE_NONE = 0;
    SYNC_TYPE_CREATE_CONNECT = 1;
    SYNC_TYPE_START_GAME = 2;
    SYNC_TYPE_PING = 3;
    SYNC_TYPE_FINISH_GAME = 4;
    SYNC_TYPE_SNAP_SHOT = 5;
    SYNC_TYPE_ACTION = 6;
  }

  SyncType sync_type = 3; //8
  int32 retcode = 13; //2
  oneof sync {
    BreakoutSyncCreateConnect sync_create_connect = 14; //4
    BreakoutSyncPing sync_ping = 4; //7
    BreakoutSyncFinishGame sync_finish_game = 7; //6
    BreakoutSyncSnapShot sync_snap_shot = 10; //12
    BreakoutSyncAction sync_action = 12; //9
  }
}

message AttackResultCreateCount {
  repeated uint32 create_count_list = 12; //10
  repeated uint32 create_count_no_cost_list = 4; //7
}

message ClientAbilityInitBeginNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1187; //1112;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 entity_id = 2; //1
}

message ClientAbilityInitFinishNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1198; //1135;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated AbilityInvokeEntry invokes = 14; //14
  uint32 entity_id = 1; //11
}

message AbilityInvocationFailNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1120; //1107;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  string reason = 4; //7
  uint32 entity_id = 13; //13
  AbilityInvokeEntry invoke = 14; //3
}

message EntityAbilityInvokeEntry {
  uint32 entity_id = 9; //8
  repeated AbilityInvokeEntry invokes = 4; //1
}

message ClientAbilitiesInitFinishCombineNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1180; //1103;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated EntityAbilityInvokeEntry entity_invoke_list = 4; //1
}

message WindSeedClientNotify {
  message RefreshNotify {
    uint32 refresh_num = 13; //9
  }

  message AddWindBulletNotify {
    Vector seed_pos = 10; //6
    uint32 catch_player_uid = 13; //8
    uint32 seed_entity_id = 1; //7
  }

  message AreaNotify {
    bytes area_code = 1; //5
    uint32 area_id = 12; //10
    uint32 area_type = 5; //7
  }

  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1114; //1199;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  oneof notify {
    RefreshNotify refresh_notify = 11; //14
    AddWindBulletNotify add_wind_bullet_notify = 8; //6
    AreaNotify area_notify = 2; //4
  }
}

message AbilityChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1124; //1131;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 entity_id = 7; //1
  AbilityControlBlock ability_control_block = 10; //15
}

message ClientAbilityChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1129; //1175;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  bool is_init_hash = 4; //9
  uint32 entity_id = 9; //2
  repeated AbilityInvokeEntry invokes = 10; //3
}

message ServerUpdateGlobalValueNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1178; //1148;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  enum UpdateType {
    INVALUE = 0;
    ADD = 1;
    SET = 2;
  }

  uint32 entity_id = 3; //9
  UpdateType update_type = 8; //13
  float delta = 12; //3
  uint32 key_hash = 10; //10
  float value = 2; //6
}

message ServerGlobalValueChangeNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1116; //1197;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  uint32 entity_id = 11; //6
  float value = 10; //12
  uint32 key_hash = 6; //13
}

message ClientAIStateNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1113; //1181;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  uint32 entity_id = 6; //9
  uint32 cur_tactic = 10; //15
}

message ServerCombatEndNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1169; //1105;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  repeated uint32 combat_end_type_list = 15; //14
}

message ClientRemoveCombatEndModifierNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1106; //1182;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
    IS_ALLOW_CLIENT = 1;
  }

  repeated uint32 combat_end_type_list = 12; //7
}

message PerformOperationNotify {
  enum CmdId {
    option allow_alias = true;
    NONE = 0;
    CMD_ID = 1139; //1147;
    ENET_CHANNEL_ID = 0;
    ENET_IS_RELIABLE = 1;
  }

  enum OperateType {
    OPERATE_TYPE_NONE = 0;
    OPERATE_TYPE_EFFECT = 1;
  }

  uint32 index = 10; //9
  Vector pos = 14; //7
  Vector rot = 1; //10
  OperateType operate_type = 5; //3
  uint32 entity_id = 3; //13
}

enum AbilityInvokeArgument {
  ABILITY_NONE = 0;
  ABILITY_META_MODIFIER_CHANGE = 1;
  ABILITY_META_COMMAND_MODIFIER_CHANGE_REQUEST = 2;
  ABILITY_META_SPECIAL_FLOAT_ARGUMENT = 3;
  ABILITY_META_OVERRIDE_PARAM = 4;
  ABILITY_META_CLEAR_OVERRIDE_PARAM = 5;
  ABILITY_META_REINIT_OVERRIDEMAP = 6;
  ABILITY_META_GLOBAL_FLOAT_VALUE = 7;
  ABILITY_META_CLEAR_GLOBAL_FLOAT_VALUE = 8;
  ABILITY_META_ABILITY_ELEMENT_STRENGTH = 9;
  ABILITY_META_ADD_OR_GET_ABILITY_AND_TRIGGER = 10;
  ABILITY_META_SET_KILLED_SETATE = 11;
  ABILITY_META_SET_ABILITY_TRIGGER = 12;
  ABILITY_META_ADD_NEW_ABILITY = 13;
  ABILITY_META_REMOVE_ABILITY = 14;
  ABILITY_META_SET_MODIFIER_APPLY_ENTITY = 15;
  ABILITY_META_MODIFIER_DURABILITY_CHANGE = 16;
  ABILITY_META_ELEMENT_REACTION_VISUAL = 17;
  ABILITY_META_SET_POSE_PARAMETER = 18;
  ABILITY_META_UPDATE_BASE_REACTION_DAMAGE = 19;
  ABILITY_META_TRIGGER_ELEMENT_REACTION = 20;
  ABILITY_META_LOSE_HP = 21;
  ABILITY_META_DURABILITY_IS_ZERO = 22;
  ABILITY_ACTION_TRIGGER_ABILITY = 50;
  ABILITY_ACTION_SET_CRASH_DAMAGE = 51;
  ABILITY_ACTION_EFFECT = 52;
  ABILITY_ACTION_SUMMON = 53;
  ABILITY_ACTION_BLINK = 54;
  ABILITY_ACTION_CREATE_GADGET = 55;
  ABILITY_ACTION_APPLY_LEVEL_MODIFIER = 56;
  ABILITY_ACTION_GENERATE_ELEM_BALL = 57;
  ABILITY_ACTION_SET_RANDOM_OVERRIDE_MAP_VALUE = 58;
  ABILITY_ACTION_SERVER_MONSTER_LOG = 59;
  ABILITY_ACTION_CREATE_TILE = 60;
  ABILITY_ACTION_DESTROY_TILE = 61;
  ABILITY_ACTION_FIRE_AFTER_IMAGE = 62;
  ABILITY_ACTION_DEDUCT_STAMINA = 63;
  ABILITY_ACTION_HIT_EFFECT = 64;
  ABILITY_ACTION_SET_BULLET_TRACK_TARGET = 65;
  ABILITY_MIXIN_AVATAR_STEER_BY_CAMERA = 100;
  ABILITY_MIXIN_MONSTER_DEFEND = 101;
  ABILITY_MIXIN_WIND_ZONE = 102;
  ABILITY_MIXIN_COST_STAMINA = 103;
  ABILITY_MIXIN_ELITE_SHIELD = 104;
  ABILITY_MIXIN_ELEMENT_SHIELD = 105;
  ABILITY_MIXIN_GLOBAL_SHIELD = 106;
  ABILITY_MIXIN_SHIELD_BAR = 107;
  ABILITY_MIXIN_WIND_SEED_SPAWNER = 108;
  ABILITY_MIXIN_DO_ACTION_BY_ELEMENT_REACTION = 109;
  ABILITY_MIXIN_FIELD_ENTITY_COUNT_CHANGE = 110;
  ABILITY_MIXIN_SCENE_PROP_SYNC = 111;
  ABILITY_MIXIN_WIDGET_MP_SUPPORT = 112;
  ABILITY_MIXIN_DO_ACTION_BY_SELF_MODIFIER_ELEMENT_DURABILITY_RATIO = 113;
  ABILITY_MIXIN_FIREWORKS_LAUNCHER = 114;
  ABILITY_MIXIN_ATTACK_RESULT_CREATE_COUNT = 115;
  ABILITY_MIXIN_UGC_TIME_CONTROL = 116;
  ABILITY_MIXIN_AVATAR_COMBAT = 117;
  ABILITY_MIXIN_DEATH_ZONE_REGIONAL_PLAY_MIXIN = 118;
  ABILITY_MIXIN_UI_INTERACT = 119;
  ABILITY_MIXIN_SHOOT_FROM_CAMERA = 120;
  ABILITY_MIXIN_ERASE_BRICK_ACTIVITY = 121;
  ABILITY_MIXIN_BREAKOUT = 122;
}

enum ModifierAction {
  ADDED = 0;
  REMOVED = 1;
}

